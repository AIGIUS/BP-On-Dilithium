
stm32f407vgt6_mldsa_bp_m4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057fc  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08005988  08005988  00006988  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ec4  08005ec4  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005ec4  08005ec4  00006ec4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ecc  08005ecc  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ecc  08005ecc  00006ecc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005ed0  08005ed0  00006ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08005ed4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          000024fc  20000018  20000018  00007018  2**3
                  ALLOC
 11 ._user_heap_stack 00008004  20002514  20002514  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012583  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4a  00000000  00000000  000195cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000a3af  00000000  00000000  0001c115  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ae8  00000000  00000000  000264c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000ce9  00000000  00000000  00026fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002185e  00000000  00000000  00027c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00013105  00000000  00000000  000494f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c4f5d  00000000  00000000  0005c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00121559  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001dfc  00000000  00000000  0012159c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 0000008b  00000000  00000000  00123398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800596c 	.word	0x0800596c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	0800596c 	.word	0x0800596c
.syntax unified


// This code uses UMULL - which is constant time on the M4, but not on the M3
// Make sure that this code is never used on an M3
smlad r0,r0,r0,r0
 80001c8:	fb20 0000 	smlad	r0, r0, r0, r0

080001cc <pqcrystals_dilithium_ntt>:
  zeta0     .req R11
  zeta1     .req R12
  zeta2     .req R14

  //preserve registers
  push {R4-R11, R14}
 80001cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  ldr ptr_zeta, =#zetas_interleaved_asm
 80001d0:	f8df 1a60 	ldr.w	r1, [pc, #2656]	@ 8000c34 <inv_ntt_asm_smull_64+0x4>
  add ptr_zeta, #4
 80001d4:	f101 0104 	add.w	r1, r1, #4
  //load constants, ptr
  ldr.w qinv, inv_ntt_asm_smull_qinv  //-qinv_signed
 80001d8:	f8df 2a4c 	ldr.w	r2, [pc, #2636]	@ 8000c28 <inv_ntt_asm_smull_qinv>
  ldr.w q, inv_ntt_asm_smull_q
 80001dc:	f8df 3a4c 	ldr.w	r3, [pc, #2636]	@ 8000c2c <inv_ntt_asm_smull_q>
  //stage 1 and 2
  ldr.w cntr, inv_ntt_asm_smull_64
 80001e0:	f8df 4a4c 	ldr.w	r4, [pc, #2636]	@ 8000c30 <inv_ntt_asm_smull_64>

  ldr zeta1, [ptr_zeta, #4]  //z2
 80001e4:	f8d1 c004 	ldr.w	ip, [r1, #4]
  ldr zeta2, [ptr_zeta, #8]  //z3
 80001e8:	f8d1 e008 	ldr.w	lr, [r1, #8]
  ldr zeta0, [ptr_zeta], #12  //z1
 80001ec:	f851 bb0c 	ldr.w	fp, [r1], #12
  1:
    ldr.w pol0, [ptr_p]
 80001f0:	f8d0 5000 	ldr.w	r5, [r0]
    ldr pol1, [ptr_p, #256]  //64*4
 80001f4:	f8d0 6100 	ldr.w	r6, [r0, #256]	@ 0x100
    ldr pol2, [ptr_p, #512]  //128*4
 80001f8:	f8d0 7200 	ldr.w	r7, [r0, #512]	@ 0x200
    ldr pol3, [ptr_p, #768]  //192*4
 80001fc:	f8d0 8300 	ldr.w	r8, [r0, #768]	@ 0x300
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage1
 8000200:	fb87 a90b 	smull	sl, r9, r7, fp
 8000204:	fb0a f702 	mul.w	r7, sl, r2
 8000208:	fbc7 a903 	smlal	sl, r9, r7, r3
 800020c:	eba5 0709 	sub.w	r7, r5, r9
 8000210:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage1
 8000214:	fb88 a90b 	smull	sl, r9, r8, fp
 8000218:	fb0a f802 	mul.w	r8, sl, r2
 800021c:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000220:	eba6 0809 	sub.w	r8, r6, r9
 8000224:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage2
 8000228:	fb86 a90c 	smull	sl, r9, r6, ip
 800022c:	fb0a f602 	mul.w	r6, sl, r2
 8000230:	fbc6 a903 	smlal	sl, r9, r6, r3
 8000234:	eba5 0609 	sub.w	r6, r5, r9
 8000238:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage2
 800023c:	fb88 a90e 	smull	sl, r9, r8, lr
 8000240:	fb0a f802 	mul.w	r8, sl, r2
 8000244:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000248:	eba7 0809 	sub.w	r8, r7, r9
 800024c:	eb07 0709 	add.w	r7, r7, r9

    str pol1, [ptr_p, #256]
 8000250:	f8c0 6100 	str.w	r6, [r0, #256]	@ 0x100
    str pol2, [ptr_p, #512]
 8000254:	f8c0 7200 	str.w	r7, [r0, #512]	@ 0x200
    str pol3, [ptr_p, #768]
 8000258:	f8c0 8300 	str.w	r8, [r0, #768]	@ 0x300
    str pol0, [ptr_p], #4
 800025c:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000260:	3c01      	subs	r4, #1
    bne 1b
 8000262:	d1c5      	bne.n	80001f0 <pqcrystals_dilithium_ntt+0x24>
  sub ptr_p, #256      // on pol0 again
 8000264:	f5a0 7080 	sub.w	r0, r0, #256	@ 0x100

  //stage 3 and 4
  movw cntr, #16
 8000268:	f240 0410 	movw	r4, #16
  ldr zeta1, [ptr_zeta, #4]  //z8
 800026c:	f8d1 c004 	ldr.w	ip, [r1, #4]
  ldr zeta2, [ptr_zeta, #8]  //z9
 8000270:	f8d1 e008 	ldr.w	lr, [r1, #8]
  ldr zeta0, [ptr_zeta], #12  //z4
 8000274:	f851 bb0c 	ldr.w	fp, [r1], #12
  1:
    ldr.w pol0, [ptr_p]  //16*4
 8000278:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 800027c:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000280:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 8000284:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000288:	fb87 a90b 	smull	sl, r9, r7, fp
 800028c:	fb0a f702 	mul.w	r7, sl, r2
 8000290:	fbc7 a903 	smlal	sl, r9, r7, r3
 8000294:	eba5 0709 	sub.w	r7, r5, r9
 8000298:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage3
 800029c:	fb88 a90b 	smull	sl, r9, r8, fp
 80002a0:	fb0a f802 	mul.w	r8, sl, r2
 80002a4:	fbc8 a903 	smlal	sl, r9, r8, r3
 80002a8:	eba6 0809 	sub.w	r8, r6, r9
 80002ac:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage4
 80002b0:	fb86 a90c 	smull	sl, r9, r6, ip
 80002b4:	fb0a f602 	mul.w	r6, sl, r2
 80002b8:	fbc6 a903 	smlal	sl, r9, r6, r3
 80002bc:	eba5 0609 	sub.w	r6, r5, r9
 80002c0:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 80002c4:	fb88 a90e 	smull	sl, r9, r8, lr
 80002c8:	fb0a f802 	mul.w	r8, sl, r2
 80002cc:	fbc8 a903 	smlal	sl, r9, r8, r3
 80002d0:	eba7 0809 	sub.w	r8, r7, r9
 80002d4:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #64]
 80002d8:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 80002dc:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192]
 80002e0:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 80002e4:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 80002e8:	3c01      	subs	r4, #1
    bne 1b
 80002ea:	d1c5      	bne.n	8000278 <pqcrystals_dilithium_ntt+0xac>
  add.w ptr_p, ptr_p, #192      //(64-16)*4
 80002ec:	f100 00c0 	add.w	r0, r0, #192	@ 0xc0

  movw cntr, #16
 80002f0:	f240 0410 	movw	r4, #16
  ldr zeta1, [ptr_zeta, #4]  //z10
 80002f4:	f8d1 c004 	ldr.w	ip, [r1, #4]
  ldr zeta2, [ptr_zeta, #8]  //z11
 80002f8:	f8d1 e008 	ldr.w	lr, [r1, #8]
  ldr zeta0, [ptr_zeta], #12  //z5
 80002fc:	f851 bb0c 	ldr.w	fp, [r1], #12
  1:
    ldr.w pol0, [ptr_p]
 8000300:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 8000304:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000308:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 800030c:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000310:	fb87 a90b 	smull	sl, r9, r7, fp
 8000314:	fb0a f702 	mul.w	r7, sl, r2
 8000318:	fbc7 a903 	smlal	sl, r9, r7, r3
 800031c:	eba5 0709 	sub.w	r7, r5, r9
 8000320:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000324:	fb88 a90b 	smull	sl, r9, r8, fp
 8000328:	fb0a f802 	mul.w	r8, sl, r2
 800032c:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000330:	eba6 0809 	sub.w	r8, r6, r9
 8000334:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage4
 8000338:	fb86 a90c 	smull	sl, r9, r6, ip
 800033c:	fb0a f602 	mul.w	r6, sl, r2
 8000340:	fbc6 a903 	smlal	sl, r9, r6, r3
 8000344:	eba5 0609 	sub.w	r6, r5, r9
 8000348:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 800034c:	fb88 a90e 	smull	sl, r9, r8, lr
 8000350:	fb0a f802 	mul.w	r8, sl, r2
 8000354:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000358:	eba7 0809 	sub.w	r8, r7, r9
 800035c:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #64]
 8000360:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 8000364:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192]  //(16*3-1)*4
 8000368:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 800036c:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000370:	3c01      	subs	r4, #1
    bne 1b
 8000372:	d1c5      	bne.n	8000300 <pqcrystals_dilithium_ntt+0x134>
  add ptr_p, ptr_p, #192      //(64-16)*4
 8000374:	f100 00c0 	add.w	r0, r0, #192	@ 0xc0

  movw cntr, #16
 8000378:	f240 0410 	movw	r4, #16

  ldr.w zeta1, [ptr_zeta, #4]  //z12
 800037c:	f8d1 c004 	ldr.w	ip, [r1, #4]
  ldr.w zeta2, [ptr_zeta, #8]  //z13
 8000380:	f8d1 e008 	ldr.w	lr, [r1, #8]
  ldr zeta0, [ptr_zeta], #12  //z6
 8000384:	f851 bb0c 	ldr.w	fp, [r1], #12
  1:
    ldr.w pol0, [ptr_p]  //16*4
 8000388:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 800038c:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000390:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]  //(16*3)*4
 8000394:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000398:	fb87 a90b 	smull	sl, r9, r7, fp
 800039c:	fb0a f702 	mul.w	r7, sl, r2
 80003a0:	fbc7 a903 	smlal	sl, r9, r7, r3
 80003a4:	eba5 0709 	sub.w	r7, r5, r9
 80003a8:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage3
 80003ac:	fb88 a90b 	smull	sl, r9, r8, fp
 80003b0:	fb0a f802 	mul.w	r8, sl, r2
 80003b4:	fbc8 a903 	smlal	sl, r9, r8, r3
 80003b8:	eba6 0809 	sub.w	r8, r6, r9
 80003bc:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage4
 80003c0:	fb86 a90c 	smull	sl, r9, r6, ip
 80003c4:	fb0a f602 	mul.w	r6, sl, r2
 80003c8:	fbc6 a903 	smlal	sl, r9, r6, r3
 80003cc:	eba5 0609 	sub.w	r6, r5, r9
 80003d0:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 80003d4:	fb88 a90e 	smull	sl, r9, r8, lr
 80003d8:	fb0a f802 	mul.w	r8, sl, r2
 80003dc:	fbc8 a903 	smlal	sl, r9, r8, r3
 80003e0:	eba7 0809 	sub.w	r8, r7, r9
 80003e4:	eb07 0709 	add.w	r7, r7, r9
    str.w pol1, [ptr_p, #64]
 80003e8:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 80003ec:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192]
 80003f0:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 80003f4:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 80003f8:	3c01      	subs	r4, #1
    bne 1b
 80003fa:	d1c5      	bne.n	8000388 <pqcrystals_dilithium_ntt+0x1bc>
  add ptr_p, #192      //(64-16)*4
 80003fc:	f100 00c0 	add.w	r0, r0, #192	@ 0xc0

  movw cntr, #16
 8000400:	f240 0410 	movw	r4, #16
  ldr.w zeta1, [ptr_zeta, #4]  //z14
 8000404:	f8d1 c004 	ldr.w	ip, [r1, #4]
  ldr.w zeta2, [ptr_zeta, #8]  //z15
 8000408:	f8d1 e008 	ldr.w	lr, [r1, #8]
  ldr zeta0, [ptr_zeta], #12  //z7
 800040c:	f851 bb0c 	ldr.w	fp, [r1], #12
  1:
    ldr.w pol0, [ptr_p]  //16*4
 8000410:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 8000414:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000418:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 800041c:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000420:	fb87 a90b 	smull	sl, r9, r7, fp
 8000424:	fb0a f702 	mul.w	r7, sl, r2
 8000428:	fbc7 a903 	smlal	sl, r9, r7, r3
 800042c:	eba5 0709 	sub.w	r7, r5, r9
 8000430:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000434:	fb88 a90b 	smull	sl, r9, r8, fp
 8000438:	fb0a f802 	mul.w	r8, sl, r2
 800043c:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000440:	eba6 0809 	sub.w	r8, r6, r9
 8000444:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage4
 8000448:	fb86 a90c 	smull	sl, r9, r6, ip
 800044c:	fb0a f602 	mul.w	r6, sl, r2
 8000450:	fbc6 a903 	smlal	sl, r9, r6, r3
 8000454:	eba5 0609 	sub.w	r6, r5, r9
 8000458:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 800045c:	fb88 a90e 	smull	sl, r9, r8, lr
 8000460:	fb0a f802 	mul.w	r8, sl, r2
 8000464:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000468:	eba7 0809 	sub.w	r8, r7, r9
 800046c:	eb07 0709 	add.w	r7, r7, r9
    str.w pol1, [ptr_p, #64]
 8000470:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 8000474:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192] //(16*3-1)*4
 8000478:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 800047c:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000480:	3c01      	subs	r4, #1
    bne 1b
 8000482:	d1c5      	bne.n	8000410 <pqcrystals_dilithium_ntt+0x244>
  sub ptr_p, #832      //(208)*4
 8000484:	f5a0 7050 	sub.w	r0, r0, #832	@ 0x340

  //stage 5 and 6
  movw cntr, #16
 8000488:	f240 0410 	movw	r4, #16
  1:
    ldr.w zeta1, [ptr_zeta, #4]  //z32, ..., z62
 800048c:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]  //z33, ..., z63
 8000490:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr zeta0, [ptr_zeta], #12  //z16, ..., z31
 8000494:	f851 bb0c 	ldr.w	fp, [r1], #12

    ldr.w pol0, [ptr_p]  //4*4
 8000498:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 800049c:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 80004a0:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]  //(4*3)*4
 80004a4:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage5
 80004a8:	fb87 a90b 	smull	sl, r9, r7, fp
 80004ac:	fb0a f702 	mul.w	r7, sl, r2
 80004b0:	fbc7 a903 	smlal	sl, r9, r7, r3
 80004b4:	eba5 0709 	sub.w	r7, r5, r9
 80004b8:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage5
 80004bc:	fb88 a90b 	smull	sl, r9, r8, fp
 80004c0:	fb0a f802 	mul.w	r8, sl, r2
 80004c4:	fbc8 a903 	smlal	sl, r9, r8, r3
 80004c8:	eba6 0809 	sub.w	r8, r6, r9
 80004cc:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage6
 80004d0:	fb86 a90c 	smull	sl, r9, r6, ip
 80004d4:	fb0a f602 	mul.w	r6, sl, r2
 80004d8:	fbc6 a903 	smlal	sl, r9, r6, r3
 80004dc:	eba5 0609 	sub.w	r6, r5, r9
 80004e0:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 80004e4:	fb88 a90e 	smull	sl, r9, r8, lr
 80004e8:	fb0a f802 	mul.w	r8, sl, r2
 80004ec:	fbc8 a903 	smlal	sl, r9, r8, r3
 80004f0:	eba7 0809 	sub.w	r8, r7, r9
 80004f4:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #16]
 80004f8:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 80004fc:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48]  //(4*3-1)*4
 8000500:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #4
 8000504:	f840 5b04 	str.w	r5, [r0], #4

    ldr.w pol0, [ptr_p]
 8000508:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 800050c:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 8000510:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]
 8000514:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage5
 8000518:	fb87 a90b 	smull	sl, r9, r7, fp
 800051c:	fb0a f702 	mul.w	r7, sl, r2
 8000520:	fbc7 a903 	smlal	sl, r9, r7, r3
 8000524:	eba5 0709 	sub.w	r7, r5, r9
 8000528:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage5
 800052c:	fb88 a90b 	smull	sl, r9, r8, fp
 8000530:	fb0a f802 	mul.w	r8, sl, r2
 8000534:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000538:	eba6 0809 	sub.w	r8, r6, r9
 800053c:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage6
 8000540:	fb86 a90c 	smull	sl, r9, r6, ip
 8000544:	fb0a f602 	mul.w	r6, sl, r2
 8000548:	fbc6 a903 	smlal	sl, r9, r6, r3
 800054c:	eba5 0609 	sub.w	r6, r5, r9
 8000550:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000554:	fb88 a90e 	smull	sl, r9, r8, lr
 8000558:	fb0a f802 	mul.w	r8, sl, r2
 800055c:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000560:	eba7 0809 	sub.w	r8, r7, r9
 8000564:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #16]
 8000568:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 800056c:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48]
 8000570:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #4
 8000574:	f840 5b04 	str.w	r5, [r0], #4

    ldr.w pol0, [ptr_p] //4*4
 8000578:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 800057c:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 8000580:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]
 8000584:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage5
 8000588:	fb87 a90b 	smull	sl, r9, r7, fp
 800058c:	fb0a f702 	mul.w	r7, sl, r2
 8000590:	fbc7 a903 	smlal	sl, r9, r7, r3
 8000594:	eba5 0709 	sub.w	r7, r5, r9
 8000598:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage5
 800059c:	fb88 a90b 	smull	sl, r9, r8, fp
 80005a0:	fb0a f802 	mul.w	r8, sl, r2
 80005a4:	fbc8 a903 	smlal	sl, r9, r8, r3
 80005a8:	eba6 0809 	sub.w	r8, r6, r9
 80005ac:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage6
 80005b0:	fb86 a90c 	smull	sl, r9, r6, ip
 80005b4:	fb0a f602 	mul.w	r6, sl, r2
 80005b8:	fbc6 a903 	smlal	sl, r9, r6, r3
 80005bc:	eba5 0609 	sub.w	r6, r5, r9
 80005c0:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 80005c4:	fb88 a90e 	smull	sl, r9, r8, lr
 80005c8:	fb0a f802 	mul.w	r8, sl, r2
 80005cc:	fbc8 a903 	smlal	sl, r9, r8, r3
 80005d0:	eba7 0809 	sub.w	r8, r7, r9
 80005d4:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #16]
 80005d8:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 80005dc:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48] //(4*3-1)*4
 80005e0:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #4
 80005e4:	f840 5b04 	str.w	r5, [r0], #4

    ldr.w pol0, [ptr_p]  //4*4
 80005e8:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 80005ec:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 80005f0:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]  //(4*3)*4
 80005f4:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage5
 80005f8:	fb87 a90b 	smull	sl, r9, r7, fp
 80005fc:	fb0a f702 	mul.w	r7, sl, r2
 8000600:	fbc7 a903 	smlal	sl, r9, r7, r3
 8000604:	eba5 0709 	sub.w	r7, r5, r9
 8000608:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage5
 800060c:	fb88 a90b 	smull	sl, r9, r8, fp
 8000610:	fb0a f802 	mul.w	r8, sl, r2
 8000614:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000618:	eba6 0809 	sub.w	r8, r6, r9
 800061c:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage6
 8000620:	fb86 a90c 	smull	sl, r9, r6, ip
 8000624:	fb0a f602 	mul.w	r6, sl, r2
 8000628:	fbc6 a903 	smlal	sl, r9, r6, r3
 800062c:	eba5 0609 	sub.w	r6, r5, r9
 8000630:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000634:	fb88 a90e 	smull	sl, r9, r8, lr
 8000638:	fb0a f802 	mul.w	r8, sl, r2
 800063c:	fbc8 a903 	smlal	sl, r9, r8, r3
 8000640:	eba7 0809 	sub.w	r8, r7, r9
 8000644:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #16]
 8000648:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 800064c:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48]
 8000650:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #52
 8000654:	f840 5b34 	str.w	r5, [r0], #52

    subs.w cntr, cntr, #1
 8000658:	f1b4 0401 	subs.w	r4, r4, #1
    bne 1b
 800065c:	f47f af16 	bne.w	800048c <pqcrystals_dilithium_ntt+0x2c0>
  sub ptr_p, #1024      //256*4
 8000660:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400

  //stage 7 and 8
  mov cntr, #64
 8000664:	f04f 0440 	mov.w	r4, #64	@ 0x40
  1:

    ldr.w zeta1, [ptr_zeta, #4]  //z128,..., z254
 8000668:	f8d1 c004 	ldr.w	ip, [r1, #4]
    ldr.w zeta2, [ptr_zeta, #8]  //z129,..., z255
 800066c:	f8d1 e008 	ldr.w	lr, [r1, #8]
    ldr zeta0, [ptr_zeta], #12  //z64, ..., z127
 8000670:	f851 bb0c 	ldr.w	fp, [r1], #12
    ldr.w pol0, [ptr_p]  //1*4
 8000674:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #4]
 8000678:	f8d0 6004 	ldr.w	r6, [r0, #4]
    ldr.w pol2, [ptr_p, #8]
 800067c:	f8d0 7008 	ldr.w	r7, [r0, #8]
    ldr.w pol3, [ptr_p, #12]  //3*4
 8000680:	f8d0 800c 	ldr.w	r8, [r0, #12]
    ct_butterfly_montg pol0, pol2, zeta0, q, qinv, temp_h, temp_l  //stage7
 8000684:	fb87 a90b 	smull	sl, r9, r7, fp
 8000688:	fb0a f702 	mul.w	r7, sl, r2
 800068c:	fbc7 a903 	smlal	sl, r9, r7, r3
 8000690:	eba5 0709 	sub.w	r7, r5, r9
 8000694:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol1, pol3, zeta0, q, qinv, temp_h, temp_l  //stage7
 8000698:	fb88 a90b 	smull	sl, r9, r8, fp
 800069c:	fb0a f802 	mul.w	r8, sl, r2
 80006a0:	fbc8 a903 	smlal	sl, r9, r8, r3
 80006a4:	eba6 0809 	sub.w	r8, r6, r9
 80006a8:	eb06 0609 	add.w	r6, r6, r9
    ct_butterfly_montg pol0, pol1, zeta1, q, qinv, temp_h, temp_l  //stage8
 80006ac:	fb86 a90c 	smull	sl, r9, r6, ip
 80006b0:	fb0a f602 	mul.w	r6, sl, r2
 80006b4:	fbc6 a903 	smlal	sl, r9, r6, r3
 80006b8:	eba5 0609 	sub.w	r6, r5, r9
 80006bc:	eb05 0509 	add.w	r5, r5, r9
    ct_butterfly_montg pol2, pol3, zeta2, q, qinv, temp_h, temp_l  //stage8
 80006c0:	fb88 a90e 	smull	sl, r9, r8, lr
 80006c4:	fb0a f802 	mul.w	r8, sl, r2
 80006c8:	fbc8 a903 	smlal	sl, r9, r8, r3
 80006cc:	eba7 0809 	sub.w	r8, r7, r9
 80006d0:	eb07 0709 	add.w	r7, r7, r9

    str.w pol1, [ptr_p, #4]
 80006d4:	f8c0 6004 	str.w	r6, [r0, #4]
    str.w pol2, [ptr_p, #8]
 80006d8:	f8c0 7008 	str.w	r7, [r0, #8]
    str.w pol3, [ptr_p, #12]
 80006dc:	f8c0 800c 	str.w	r8, [r0, #12]
    str pol0, [ptr_p], #16
 80006e0:	f840 5b10 	str.w	r5, [r0], #16
    subs cntr, #1
 80006e4:	3c01      	subs	r4, #1
    bne 1b
 80006e6:	d1bf      	bne.n	8000668 <pqcrystals_dilithium_ntt+0x49c>

    //restore registers
    pop {R4-R11, PC}
 80006e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080006ec <pqcrystals_dilithium_invntt_tomont>:
  zeta0     .req R11
  zeta1     .req R12
  zeta2     .req R14

  //preserve registers
  push {R4-R11, R14}
 80006ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //load constants, ptr
  ldr.w qinv, inv_ntt_asm_smull_qinv  //-qinv_signed
 80006f0:	f8df 2534 	ldr.w	r2, [pc, #1332]	@ 8000c28 <inv_ntt_asm_smull_qinv>
  ldr.w q  , inv_ntt_asm_smull_q
 80006f4:	f8df 3534 	ldr.w	r3, [pc, #1332]	@ 8000c2c <inv_ntt_asm_smull_q>
  ldr ptr_zeta, =#zetas_interleaved_asm + 1020  // &zetas_interleaved_asm[N-1]
 80006f8:	f8df 153c 	ldr.w	r1, [pc, #1340]	@ 8000c38 <inv_ntt_asm_smull_64+0x8>

  //stage 1 and 2
  ldr.w cntr, inv_ntt_asm_smull_64
 80006fc:	f8df 4530 	ldr.w	r4, [pc, #1328]	@ 8000c30 <inv_ntt_asm_smull_64>
  1:
    ldr.w zeta1, [ptr_zeta, #-4]  //z1, ..., z127
 8000700:	f851 cc04 	ldr.w	ip, [r1, #-4]
    ldr.w zeta2, [ptr_zeta, #-8]  //z128,.., z191
 8000704:	f851 ec08 	ldr.w	lr, [r1, #-8]
    ldr zeta0, [ptr_zeta], #-12  //z0, ..., z126
 8000708:	f851 b90c 	ldr.w	fp, [r1], #-12
    ldr.w pol0, [ptr_p]  //1*4
 800070c:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #4]
 8000710:	f8d0 6004 	ldr.w	r6, [r0, #4]
    ldr.w pol2, [ptr_p, #8]
 8000714:	f8d0 7008 	ldr.w	r7, [r0, #8]
    ldr.w pol3, [ptr_p, #12]  //3*4
 8000718:	f8d0 800c 	ldr.w	r8, [r0, #12]
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage1
 800071c:	eba6 0905 	sub.w	r9, r6, r5
 8000720:	eb05 0506 	add.w	r5, r5, r6
 8000724:	fb89 a60b 	smull	sl, r6, r9, fp
 8000728:	fb0a f902 	mul.w	r9, sl, r2
 800072c:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage1
 8000730:	eba8 0907 	sub.w	r9, r8, r7
 8000734:	eb07 0708 	add.w	r7, r7, r8
 8000738:	fb89 a80c 	smull	sl, r8, r9, ip
 800073c:	fb0a f902 	mul.w	r9, sl, r2
 8000740:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage2
 8000744:	eba7 0905 	sub.w	r9, r7, r5
 8000748:	eb05 0507 	add.w	r5, r5, r7
 800074c:	fb89 a70e 	smull	sl, r7, r9, lr
 8000750:	fb0a f902 	mul.w	r9, sl, r2
 8000754:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage2
 8000758:	eba8 0906 	sub.w	r9, r8, r6
 800075c:	eb06 0608 	add.w	r6, r6, r8
 8000760:	fb89 a80e 	smull	sl, r8, r9, lr
 8000764:	fb0a f902 	mul.w	r9, sl, r2
 8000768:	fbc9 a803 	smlal	sl, r8, r9, r3
    str.w pol1, [ptr_p, #4]
 800076c:	f8c0 6004 	str.w	r6, [r0, #4]
    str.w pol2, [ptr_p, #8]
 8000770:	f8c0 7008 	str.w	r7, [r0, #8]
    str.w pol3, [ptr_p, #12]
 8000774:	f8c0 800c 	str.w	r8, [r0, #12]
    str pol0, [ptr_p], #16
 8000778:	f840 5b10 	str.w	r5, [r0], #16
    subs cntr, #1
 800077c:	3c01      	subs	r4, #1
    bne 1b
 800077e:	d1bf      	bne.n	8000700 <pqcrystals_dilithium_invntt_tomont+0x14>
  sub ptr_p, #1024      // on pol0 again
 8000780:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400

  //stage 3 and 4
  movw cntr, #16
 8000784:	f240 0410 	movw	r4, #16
  1:
    ldr.w zeta1, [ptr_zeta, #-4]
 8000788:	f851 cc04 	ldr.w	ip, [r1, #-4]
    ldr.w zeta2, [ptr_zeta, #-8]
 800078c:	f851 ec08 	ldr.w	lr, [r1, #-8]
    ldr zeta0, [ptr_zeta], #-12
 8000790:	f851 b90c 	ldr.w	fp, [r1], #-12

    ldr.w pol0, [ptr_p]
 8000794:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 8000798:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 800079c:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]
 80007a0:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage3
 80007a4:	eba6 0905 	sub.w	r9, r6, r5
 80007a8:	eb05 0506 	add.w	r5, r5, r6
 80007ac:	fb89 a60b 	smull	sl, r6, r9, fp
 80007b0:	fb0a f902 	mul.w	r9, sl, r2
 80007b4:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage3
 80007b8:	eba8 0907 	sub.w	r9, r8, r7
 80007bc:	eb07 0708 	add.w	r7, r7, r8
 80007c0:	fb89 a80c 	smull	sl, r8, r9, ip
 80007c4:	fb0a f902 	mul.w	r9, sl, r2
 80007c8:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage4
 80007cc:	eba7 0905 	sub.w	r9, r7, r5
 80007d0:	eb05 0507 	add.w	r5, r5, r7
 80007d4:	fb89 a70e 	smull	sl, r7, r9, lr
 80007d8:	fb0a f902 	mul.w	r9, sl, r2
 80007dc:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 80007e0:	eba8 0906 	sub.w	r9, r8, r6
 80007e4:	eb06 0608 	add.w	r6, r6, r8
 80007e8:	fb89 a80e 	smull	sl, r8, r9, lr
 80007ec:	fb0a f902 	mul.w	r9, sl, r2
 80007f0:	fbc9 a803 	smlal	sl, r8, r9, r3

    str.w pol1, [ptr_p, #16]
 80007f4:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 80007f8:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48]
 80007fc:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #4
 8000800:	f840 5b04 	str.w	r5, [r0], #4

    ldr.w pol0, [ptr_p]
 8000804:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 8000808:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 800080c:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]
 8000810:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000814:	eba6 0905 	sub.w	r9, r6, r5
 8000818:	eb05 0506 	add.w	r5, r5, r6
 800081c:	fb89 a60b 	smull	sl, r6, r9, fp
 8000820:	fb0a f902 	mul.w	r9, sl, r2
 8000824:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage3
 8000828:	eba8 0907 	sub.w	r9, r8, r7
 800082c:	eb07 0708 	add.w	r7, r7, r8
 8000830:	fb89 a80c 	smull	sl, r8, r9, ip
 8000834:	fb0a f902 	mul.w	r9, sl, r2
 8000838:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage4
 800083c:	eba7 0905 	sub.w	r9, r7, r5
 8000840:	eb05 0507 	add.w	r5, r5, r7
 8000844:	fb89 a70e 	smull	sl, r7, r9, lr
 8000848:	fb0a f902 	mul.w	r9, sl, r2
 800084c:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 8000850:	eba8 0906 	sub.w	r9, r8, r6
 8000854:	eb06 0608 	add.w	r6, r6, r8
 8000858:	fb89 a80e 	smull	sl, r8, r9, lr
 800085c:	fb0a f902 	mul.w	r9, sl, r2
 8000860:	fbc9 a803 	smlal	sl, r8, r9, r3

    str.w pol1, [ptr_p, #16]
 8000864:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 8000868:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48]
 800086c:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #4
 8000870:	f840 5b04 	str.w	r5, [r0], #4

    ldr.w pol0, [ptr_p]
 8000874:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 8000878:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 800087c:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]
 8000880:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage3
 8000884:	eba6 0905 	sub.w	r9, r6, r5
 8000888:	eb05 0506 	add.w	r5, r5, r6
 800088c:	fb89 a60b 	smull	sl, r6, r9, fp
 8000890:	fb0a f902 	mul.w	r9, sl, r2
 8000894:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage3
 8000898:	eba8 0907 	sub.w	r9, r8, r7
 800089c:	eb07 0708 	add.w	r7, r7, r8
 80008a0:	fb89 a80c 	smull	sl, r8, r9, ip
 80008a4:	fb0a f902 	mul.w	r9, sl, r2
 80008a8:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage4
 80008ac:	eba7 0905 	sub.w	r9, r7, r5
 80008b0:	eb05 0507 	add.w	r5, r5, r7
 80008b4:	fb89 a70e 	smull	sl, r7, r9, lr
 80008b8:	fb0a f902 	mul.w	r9, sl, r2
 80008bc:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 80008c0:	eba8 0906 	sub.w	r9, r8, r6
 80008c4:	eb06 0608 	add.w	r6, r6, r8
 80008c8:	fb89 a80e 	smull	sl, r8, r9, lr
 80008cc:	fb0a f902 	mul.w	r9, sl, r2
 80008d0:	fbc9 a803 	smlal	sl, r8, r9, r3

    str.w pol1, [ptr_p, #16]
 80008d4:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 80008d8:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48] //(4*3-1)*4
 80008dc:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #4
 80008e0:	f840 5b04 	str.w	r5, [r0], #4

    ldr.w pol0, [ptr_p]
 80008e4:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #16]
 80008e8:	f8d0 6010 	ldr.w	r6, [r0, #16]
    ldr.w pol2, [ptr_p, #32]
 80008ec:	f8d0 7020 	ldr.w	r7, [r0, #32]
    ldr.w pol3, [ptr_p, #48]
 80008f0:	f8d0 8030 	ldr.w	r8, [r0, #48]	@ 0x30
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage3
 80008f4:	eba6 0905 	sub.w	r9, r6, r5
 80008f8:	eb05 0506 	add.w	r5, r5, r6
 80008fc:	fb89 a60b 	smull	sl, r6, r9, fp
 8000900:	fb0a f902 	mul.w	r9, sl, r2
 8000904:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage3
 8000908:	eba8 0907 	sub.w	r9, r8, r7
 800090c:	eb07 0708 	add.w	r7, r7, r8
 8000910:	fb89 a80c 	smull	sl, r8, r9, ip
 8000914:	fb0a f902 	mul.w	r9, sl, r2
 8000918:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage4
 800091c:	eba7 0905 	sub.w	r9, r7, r5
 8000920:	eb05 0507 	add.w	r5, r5, r7
 8000924:	fb89 a70e 	smull	sl, r7, r9, lr
 8000928:	fb0a f902 	mul.w	r9, sl, r2
 800092c:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage4
 8000930:	eba8 0906 	sub.w	r9, r8, r6
 8000934:	eb06 0608 	add.w	r6, r6, r8
 8000938:	fb89 a80e 	smull	sl, r8, r9, lr
 800093c:	fb0a f902 	mul.w	r9, sl, r2
 8000940:	fbc9 a803 	smlal	sl, r8, r9, r3
    str.w pol1, [ptr_p, #16]
 8000944:	f8c0 6010 	str.w	r6, [r0, #16]
    str.w pol2, [ptr_p, #32]
 8000948:	f8c0 7020 	str.w	r7, [r0, #32]
    str.w pol3, [ptr_p, #48]
 800094c:	f8c0 8030 	str.w	r8, [r0, #48]	@ 0x30
    str pol0, [ptr_p], #52
 8000950:	f840 5b34 	str.w	r5, [r0], #52
    subs.w cntr, cntr, #1
 8000954:	f1b4 0401 	subs.w	r4, r4, #1
    bne 1b
 8000958:	f47f af16 	bne.w	8000788 <pqcrystals_dilithium_invntt_tomont+0x9c>
  sub ptr_p, #1024      //256*4
 800095c:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400

  //stage 5 and 6
  movw cntr, #16
 8000960:	f240 0410 	movw	r4, #16
  ldr.w zeta1, [ptr_zeta, #-4]
 8000964:	f851 cc04 	ldr.w	ip, [r1, #-4]
  ldr.w zeta2, [ptr_zeta, #-8]
 8000968:	f851 ec08 	ldr.w	lr, [r1, #-8]
  ldr zeta0, [ptr_zeta], #-12
 800096c:	f851 b90c 	ldr.w	fp, [r1], #-12
  1:
    ldr.w pol0, [ptr_p]
 8000970:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 8000974:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000978:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 800097c:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage5
 8000980:	eba6 0905 	sub.w	r9, r6, r5
 8000984:	eb05 0506 	add.w	r5, r5, r6
 8000988:	fb89 a60b 	smull	sl, r6, r9, fp
 800098c:	fb0a f902 	mul.w	r9, sl, r2
 8000990:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage5
 8000994:	eba8 0907 	sub.w	r9, r8, r7
 8000998:	eb07 0708 	add.w	r7, r7, r8
 800099c:	fb89 a80c 	smull	sl, r8, r9, ip
 80009a0:	fb0a f902 	mul.w	r9, sl, r2
 80009a4:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage6
 80009a8:	eba7 0905 	sub.w	r9, r7, r5
 80009ac:	eb05 0507 	add.w	r5, r5, r7
 80009b0:	fb89 a70e 	smull	sl, r7, r9, lr
 80009b4:	fb0a f902 	mul.w	r9, sl, r2
 80009b8:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 80009bc:	eba8 0906 	sub.w	r9, r8, r6
 80009c0:	eb06 0608 	add.w	r6, r6, r8
 80009c4:	fb89 a80e 	smull	sl, r8, r9, lr
 80009c8:	fb0a f902 	mul.w	r9, sl, r2
 80009cc:	fbc9 a803 	smlal	sl, r8, r9, r3

    str.w pol1, [ptr_p, #64]
 80009d0:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 80009d4:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192] //(16*3-1)*4
 80009d8:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 80009dc:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 80009e0:	3c01      	subs	r4, #1
    bne 1b
 80009e2:	d1c5      	bne.n	8000970 <pqcrystals_dilithium_invntt_tomont+0x284>
  add ptr_p, #192      //(64-16)*4
 80009e4:	f100 00c0 	add.w	r0, r0, #192	@ 0xc0

  movw cntr, #16
 80009e8:	f240 0410 	movw	r4, #16
  ldr.w zeta1, [ptr_zeta, #-4]
 80009ec:	f851 cc04 	ldr.w	ip, [r1, #-4]
  ldr.w zeta2, [ptr_zeta, #-8]
 80009f0:	f851 ec08 	ldr.w	lr, [r1, #-8]
  ldr zeta0, [ptr_zeta], #-12
 80009f4:	f851 b90c 	ldr.w	fp, [r1], #-12
  1:
    ldr.w pol0, [ptr_p]
 80009f8:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 80009fc:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000a00:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 8000a04:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage5
 8000a08:	eba6 0905 	sub.w	r9, r6, r5
 8000a0c:	eb05 0506 	add.w	r5, r5, r6
 8000a10:	fb89 a60b 	smull	sl, r6, r9, fp
 8000a14:	fb0a f902 	mul.w	r9, sl, r2
 8000a18:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage5
 8000a1c:	eba8 0907 	sub.w	r9, r8, r7
 8000a20:	eb07 0708 	add.w	r7, r7, r8
 8000a24:	fb89 a80c 	smull	sl, r8, r9, ip
 8000a28:	fb0a f902 	mul.w	r9, sl, r2
 8000a2c:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000a30:	eba7 0905 	sub.w	r9, r7, r5
 8000a34:	eb05 0507 	add.w	r5, r5, r7
 8000a38:	fb89 a70e 	smull	sl, r7, r9, lr
 8000a3c:	fb0a f902 	mul.w	r9, sl, r2
 8000a40:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000a44:	eba8 0906 	sub.w	r9, r8, r6
 8000a48:	eb06 0608 	add.w	r6, r6, r8
 8000a4c:	fb89 a80e 	smull	sl, r8, r9, lr
 8000a50:	fb0a f902 	mul.w	r9, sl, r2
 8000a54:	fbc9 a803 	smlal	sl, r8, r9, r3
    str.w pol1, [ptr_p, #64]
 8000a58:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 8000a5c:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192]
 8000a60:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 8000a64:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000a68:	3c01      	subs	r4, #1
    bne 1b
 8000a6a:	d1c5      	bne.n	80009f8 <pqcrystals_dilithium_invntt_tomont+0x30c>
  add.w ptr_p, ptr_p, #192      //(64-16)*4
 8000a6c:	f100 00c0 	add.w	r0, r0, #192	@ 0xc0

  movw cntr, #16
 8000a70:	f240 0410 	movw	r4, #16
  ldr.w zeta1, [ptr_zeta, #-4]
 8000a74:	f851 cc04 	ldr.w	ip, [r1, #-4]
  ldr.w zeta2, [ptr_zeta, #-8]
 8000a78:	f851 ec08 	ldr.w	lr, [r1, #-8]
  ldr zeta0, [ptr_zeta], #-12
 8000a7c:	f851 b90c 	ldr.w	fp, [r1], #-12
  1:
    ldr.w pol0, [ptr_p]
 8000a80:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 8000a84:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000a88:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 8000a8c:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage5
 8000a90:	eba6 0905 	sub.w	r9, r6, r5
 8000a94:	eb05 0506 	add.w	r5, r5, r6
 8000a98:	fb89 a60b 	smull	sl, r6, r9, fp
 8000a9c:	fb0a f902 	mul.w	r9, sl, r2
 8000aa0:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage5
 8000aa4:	eba8 0907 	sub.w	r9, r8, r7
 8000aa8:	eb07 0708 	add.w	r7, r7, r8
 8000aac:	fb89 a80c 	smull	sl, r8, r9, ip
 8000ab0:	fb0a f902 	mul.w	r9, sl, r2
 8000ab4:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000ab8:	eba7 0905 	sub.w	r9, r7, r5
 8000abc:	eb05 0507 	add.w	r5, r5, r7
 8000ac0:	fb89 a70e 	smull	sl, r7, r9, lr
 8000ac4:	fb0a f902 	mul.w	r9, sl, r2
 8000ac8:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000acc:	eba8 0906 	sub.w	r9, r8, r6
 8000ad0:	eb06 0608 	add.w	r6, r6, r8
 8000ad4:	fb89 a80e 	smull	sl, r8, r9, lr
 8000ad8:	fb0a f902 	mul.w	r9, sl, r2
 8000adc:	fbc9 a803 	smlal	sl, r8, r9, r3
    str.w pol1, [ptr_p, #64]
 8000ae0:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 8000ae4:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192]
 8000ae8:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 8000aec:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000af0:	3c01      	subs	r4, #1
    bne 1b
 8000af2:	d1c5      	bne.n	8000a80 <pqcrystals_dilithium_invntt_tomont+0x394>
  add ptr_p, #192      //(64-16)*4
 8000af4:	f100 00c0 	add.w	r0, r0, #192	@ 0xc0

  movw cntr, #16
 8000af8:	f240 0410 	movw	r4, #16
  ldr.w zeta1, [ptr_zeta, #-4]
 8000afc:	f851 cc04 	ldr.w	ip, [r1, #-4]
  ldr.w zeta2, [ptr_zeta, #-8]
 8000b00:	f851 ec08 	ldr.w	lr, [r1, #-8]
  ldr zeta0, [ptr_zeta], #-12
 8000b04:	f851 b90c 	ldr.w	fp, [r1], #-12
  1:
    ldr.w pol0, [ptr_p]
 8000b08:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #64]
 8000b0c:	f8d0 6040 	ldr.w	r6, [r0, #64]	@ 0x40
    ldr.w pol2, [ptr_p, #128]
 8000b10:	f8d0 7080 	ldr.w	r7, [r0, #128]	@ 0x80
    ldr.w pol3, [ptr_p, #192]
 8000b14:	f8d0 80c0 	ldr.w	r8, [r0, #192]	@ 0xc0
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage5
 8000b18:	eba6 0905 	sub.w	r9, r6, r5
 8000b1c:	eb05 0506 	add.w	r5, r5, r6
 8000b20:	fb89 a60b 	smull	sl, r6, r9, fp
 8000b24:	fb0a f902 	mul.w	r9, sl, r2
 8000b28:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage5
 8000b2c:	eba8 0907 	sub.w	r9, r8, r7
 8000b30:	eb07 0708 	add.w	r7, r7, r8
 8000b34:	fb89 a80c 	smull	sl, r8, r9, ip
 8000b38:	fb0a f902 	mul.w	r9, sl, r2
 8000b3c:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000b40:	eba7 0905 	sub.w	r9, r7, r5
 8000b44:	eb05 0507 	add.w	r5, r5, r7
 8000b48:	fb89 a70e 	smull	sl, r7, r9, lr
 8000b4c:	fb0a f902 	mul.w	r9, sl, r2
 8000b50:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage6
 8000b54:	eba8 0906 	sub.w	r9, r8, r6
 8000b58:	eb06 0608 	add.w	r6, r6, r8
 8000b5c:	fb89 a80e 	smull	sl, r8, r9, lr
 8000b60:	fb0a f902 	mul.w	r9, sl, r2
 8000b64:	fbc9 a803 	smlal	sl, r8, r9, r3
    str.w pol1, [ptr_p, #64]
 8000b68:	f8c0 6040 	str.w	r6, [r0, #64]	@ 0x40
    str.w pol2, [ptr_p, #128]
 8000b6c:	f8c0 7080 	str.w	r7, [r0, #128]	@ 0x80
    str.w pol3, [ptr_p, #192]
 8000b70:	f8c0 80c0 	str.w	r8, [r0, #192]	@ 0xc0
    str pol0, [ptr_p], #4
 8000b74:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000b78:	3c01      	subs	r4, #1
    bne 1b
 8000b7a:	d1c5      	bne.n	8000b08 <pqcrystals_dilithium_invntt_tomont+0x41c>
  sub ptr_p, #832      //(208)*4
 8000b7c:	f5a0 7050 	sub.w	r0, r0, #832	@ 0x340

  //stage 7 and 8
  movw cntr, #64
 8000b80:	f240 0440 	movw	r4, #64	@ 0x40
  ldr.w zeta0, [ptr_zeta]
 8000b84:	f8d1 b000 	ldr.w	fp, [r1]
  ldr.w zeta1, [ptr_zeta, #-4]
 8000b88:	f851 cc04 	ldr.w	ip, [r1, #-4]
  ldr.w zeta2, [ptr_zeta, #-12] // zetas_interleaved_asm[0] = 4404704
 8000b8c:	f851 ec0c 	ldr.w	lr, [r1, #-12]
  ldr.w ptr_zeta, inv_ntt_asm_smull_f //ptr_zeta not needed anymore, contains now value f for final reduction
 8000b90:	f8df 1090 	ldr.w	r1, [pc, #144]	@ 8000c24 <inv_ntt_asm_smull_f>
  1:
    ldr.w pol0, [ptr_p]
 8000b94:	f8d0 5000 	ldr.w	r5, [r0]
    ldr.w pol1, [ptr_p, #256]  //64*4
 8000b98:	f8d0 6100 	ldr.w	r6, [r0, #256]	@ 0x100
    ldr.w pol2, [ptr_p, #512]  //128*4
 8000b9c:	f8d0 7200 	ldr.w	r7, [r0, #512]	@ 0x200
    ldr.w pol3, [ptr_p, #768]  //192*4
 8000ba0:	f8d0 8300 	ldr.w	r8, [r0, #768]	@ 0x300
    gs_butterfly_montg pol0, pol1, zeta0, q, qinv, temp_h, temp_l  //stage7
 8000ba4:	eba6 0905 	sub.w	r9, r6, r5
 8000ba8:	eb05 0506 	add.w	r5, r5, r6
 8000bac:	fb89 a60b 	smull	sl, r6, r9, fp
 8000bb0:	fb0a f902 	mul.w	r9, sl, r2
 8000bb4:	fbc9 a603 	smlal	sl, r6, r9, r3
    gs_butterfly_montg pol2, pol3, zeta1, q, qinv, temp_h, temp_l  //stage7
 8000bb8:	eba8 0907 	sub.w	r9, r8, r7
 8000bbc:	eb07 0708 	add.w	r7, r7, r8
 8000bc0:	fb89 a80c 	smull	sl, r8, r9, ip
 8000bc4:	fb0a f902 	mul.w	r9, sl, r2
 8000bc8:	fbc9 a803 	smlal	sl, r8, r9, r3
    gs_butterfly_montg pol0, pol2, zeta2, q, qinv, temp_h, temp_l  //stage8
 8000bcc:	eba7 0905 	sub.w	r9, r7, r5
 8000bd0:	eb05 0507 	add.w	r5, r5, r7
 8000bd4:	fb89 a70e 	smull	sl, r7, r9, lr
 8000bd8:	fb0a f902 	mul.w	r9, sl, r2
 8000bdc:	fbc9 a703 	smlal	sl, r7, r9, r3
    gs_butterfly_montg pol1, pol3, zeta2, q, qinv, temp_h, temp_l  //stage8
 8000be0:	eba8 0906 	sub.w	r9, r8, r6
 8000be4:	eb06 0608 	add.w	r6, r6, r8
 8000be8:	fb89 a80e 	smull	sl, r8, r9, lr
 8000bec:	fb0a f902 	mul.w	r9, sl, r2
 8000bf0:	fbc9 a803 	smlal	sl, r8, r9, r3
    montg_red ptr_zeta, pol0, q, qinv, temp_h, temp_l        //final reduction
 8000bf4:	fb85 a501 	smull	sl, r5, r5, r1
 8000bf8:	fb0a f902 	mul.w	r9, sl, r2
 8000bfc:	fbc9 a503 	smlal	sl, r5, r9, r3
    montg_red ptr_zeta, pol1, q, qinv, temp_h, temp_l        //final reduction
 8000c00:	fb86 a601 	smull	sl, r6, r6, r1
 8000c04:	fb0a f902 	mul.w	r9, sl, r2
 8000c08:	fbc9 a603 	smlal	sl, r6, r9, r3
    // twiddle factor of the previous butterfly
    // zeta2 is 4404704 instead of 25847 (4404704 = (25847 * 16382) % Q)

    //montg_red ptr_zeta, pol2, q, qinv, temp_h, temp_l        //final reduction
    //montg_red ptr_zeta, pol3, q, qinv, temp_h, temp_l        //final reduction
    str.w pol1, [ptr_p, #256]
 8000c0c:	f8c0 6100 	str.w	r6, [r0, #256]	@ 0x100
    str.w pol2, [ptr_p, #512]
 8000c10:	f8c0 7200 	str.w	r7, [r0, #512]	@ 0x200
    str.w pol3, [ptr_p, #768]
 8000c14:	f8c0 8300 	str.w	r8, [r0, #768]	@ 0x300
    str pol0, [ptr_p], #4
 8000c18:	f840 5b04 	str.w	r5, [r0], #4
    subs cntr, #1
 8000c1c:	3c01      	subs	r4, #1
    bne 1b
 8000c1e:	d1b9      	bne.n	8000b94 <pqcrystals_dilithium_invntt_tomont+0x4a8>

    //restore registers
    pop {R4-R11, PC}
 8000c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000c24 <inv_ntt_asm_smull_f>:
 8000c24:	0000a3fa 	.word	0x0000a3fa

08000c28 <inv_ntt_asm_smull_qinv>:
 8000c28:	fc7fdfff 	.word	0xfc7fdfff

08000c2c <inv_ntt_asm_smull_q>:
 8000c2c:	007fe001 	.word	0x007fe001

08000c30 <inv_ntt_asm_smull_64>:
 8000c30:	00000040 	.word	0x00000040
  ldr ptr_zeta, =#zetas_interleaved_asm
 8000c34:	08005988 	.word	0x08005988
  ldr ptr_zeta, =#zetas_interleaved_asm + 1020  // &zetas_interleaved_asm[N-1]
 8000c38:	08005d84 	.word	0x08005d84

08000c3c <pqcrystals_dilithium_asm_pointwise_montgomery>:
// void asm_pointwise_montgomery(int32_t c[N], const int32_t a[N], const int32_t b[N]);
.global pqcrystals_dilithium_asm_pointwise_montgomery
.type pqcrystals_dilithium_asm_pointwise_montgomery,%function
.align 2
pqcrystals_dilithium_asm_pointwise_montgomery:
    push.w {r4-r11, r14}
 8000c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pb2   .req r10
    tmp0  .req r11
    ctr   .req r12
    res   .req r14

    movw qinv, #:lower16:0xfc7fdfff
 8000c40:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
    movt qinv, #:upper16:0xfc7fdfff
 8000c44:	f6cf 437f 	movt	r3, #64639	@ 0xfc7f
    movw q, #0xE001
 8000c48:	f24e 0401 	movw	r4, #57345	@ 0xe001
    movt q, #0x7F
 8000c4c:	f2c0 047f 	movt	r4, #127	@ 0x7f


    // 85x3 = 255 coefficients
    movw ctr, #85
 8000c50:	f240 0c55 	movw	ip, #85	@ 0x55
    1:
        ldr.w pa1, [a_ptr, #4]
 8000c54:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pa2, [a_ptr, #8]
 8000c58:	f8d1 7008 	ldr.w	r7, [r1, #8]
        ldr pa0, [a_ptr], #12
 8000c5c:	f851 5b0c 	ldr.w	r5, [r1], #12
        ldr.w pb1, [b_ptr, #4]
 8000c60:	f8d2 9004 	ldr.w	r9, [r2, #4]
        ldr.w pb2, [b_ptr, #8]
 8000c64:	f8d2 a008 	ldr.w	sl, [r2, #8]
        ldr pb0, [b_ptr], #12
 8000c68:	f852 8b0c 	ldr.w	r8, [r2], #12

        montgomery_multiplication res, pa0, pb0, q, qinv
 8000c6c:	fb85 5e08 	smull	r5, lr, r5, r8
 8000c70:	fb05 f803 	mul.w	r8, r5, r3
 8000c74:	fbc8 5e04 	smlal	r5, lr, r8, r4
        str res, [c_ptr], #4
 8000c78:	f840 eb04 	str.w	lr, [r0], #4
        montgomery_multiplication res, pa1, pb1, q, qinv
 8000c7c:	fb86 6e09 	smull	r6, lr, r6, r9
 8000c80:	fb06 f903 	mul.w	r9, r6, r3
 8000c84:	fbc9 6e04 	smlal	r6, lr, r9, r4
        str res, [c_ptr], #4
 8000c88:	f840 eb04 	str.w	lr, [r0], #4
        montgomery_multiplication res, pa2, pb2, q, qinv
 8000c8c:	fb87 7e0a 	smull	r7, lr, r7, sl
 8000c90:	fb07 fa03 	mul.w	sl, r7, r3
 8000c94:	fbca 7e04 	smlal	r7, lr, sl, r4
        str res, [c_ptr], #4
 8000c98:	f840 eb04 	str.w	lr, [r0], #4
    subs ctr, #1
 8000c9c:	f1bc 0c01 	subs.w	ip, ip, #1
    bne.w 1b
 8000ca0:	f47f afd8 	bne.w	8000c54 <pqcrystals_dilithium_asm_pointwise_montgomery+0x18>

    // final coefficient
    ldr.w pa0, [a_ptr]
 8000ca4:	f8d1 5000 	ldr.w	r5, [r1]
    ldr.w pb0, [b_ptr]
 8000ca8:	f8d2 8000 	ldr.w	r8, [r2]
    montgomery_multiplication res, pa0, pb0, q, qinv
 8000cac:	fb85 5e08 	smull	r5, lr, r5, r8
 8000cb0:	fb05 f803 	mul.w	r8, r5, r3
 8000cb4:	fbc8 5e04 	smlal	r5, lr, r8, r4
    str.w res, [c_ptr]
 8000cb8:	f8c0 e000 	str.w	lr, [r0]

    pop.w {r4-r11, pc}
 8000cbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000cc0 <pqcrystals_dilithium_asm_pointwise_acc_montgomery>:
// void asm_pointwise_acc_montgomery(int32_t c[N], const int32_t a[N], const int32_t b[N]);
.global pqcrystals_dilithium_asm_pointwise_acc_montgomery
.type pqcrystals_dilithium_asm_pointwise_acc_montgomery,%function
.align 2
pqcrystals_dilithium_asm_pointwise_acc_montgomery:
    push.w {r4-r11, r14}
 8000cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pb2   .req r10
    tmp0  .req r11
    ctr   .req r12
    res   .req r14

    movw qinv, #:lower16:0xfc7fdfff
 8000cc4:	f64d 73ff 	movw	r3, #57343	@ 0xdfff
    movt qinv, #:upper16:0xfc7fdfff
 8000cc8:	f6cf 437f 	movt	r3, #64639	@ 0xfc7f
    movw q, #0xE001
 8000ccc:	f24e 0401 	movw	r4, #57345	@ 0xe001
    movt q, #0x7F
 8000cd0:	f2c0 047f 	movt	r4, #127	@ 0x7f


    // 85x3 = 255 coefficients
    movw ctr, #85
 8000cd4:	f240 0c55 	movw	ip, #85	@ 0x55
    1:
        ldr.w pa1, [a_ptr, #4]
 8000cd8:	f8d1 6004 	ldr.w	r6, [r1, #4]
        ldr.w pa2, [a_ptr, #8]
 8000cdc:	f8d1 7008 	ldr.w	r7, [r1, #8]
        ldr pa0, [a_ptr], #12
 8000ce0:	f851 5b0c 	ldr.w	r5, [r1], #12
        ldr.w pb1, [b_ptr, #4]
 8000ce4:	f8d2 9004 	ldr.w	r9, [r2, #4]
        ldr.w pb2, [b_ptr, #8]
 8000ce8:	f8d2 a008 	ldr.w	sl, [r2, #8]
        ldr pb0, [b_ptr], #12
 8000cec:	f852 8b0c 	ldr.w	r8, [r2], #12

        montgomery_multiplication res, pa0, pb0, q, qinv
 8000cf0:	fb85 5e08 	smull	r5, lr, r5, r8
 8000cf4:	fb05 f803 	mul.w	r8, r5, r3
 8000cf8:	fbc8 5e04 	smlal	r5, lr, r8, r4
        montgomery_multiplication pa0, pa1, pb1, q, qinv
 8000cfc:	fb86 6509 	smull	r6, r5, r6, r9
 8000d00:	fb06 f903 	mul.w	r9, r6, r3
 8000d04:	fbc9 6504 	smlal	r6, r5, r9, r4
        montgomery_multiplication pa1, pa2, pb2, q, qinv
 8000d08:	fb87 760a 	smull	r7, r6, r7, sl
 8000d0c:	fb07 fa03 	mul.w	sl, r7, r3
 8000d10:	fbca 7604 	smlal	r7, r6, sl, r4

        ldr.w pb0, [c_ptr]
 8000d14:	f8d0 8000 	ldr.w	r8, [r0]
        ldr.w pb1, [c_ptr, #4]
 8000d18:	f8d0 9004 	ldr.w	r9, [r0, #4]
        ldr.w pb2, [c_ptr, #8]
 8000d1c:	f8d0 a008 	ldr.w	sl, [r0, #8]
        add.w res, res, pb0
 8000d20:	eb0e 0e08 	add.w	lr, lr, r8
        str res, [c_ptr], #12
 8000d24:	f840 eb0c 	str.w	lr, [r0], #12
        add.w pa0, pa0, pb1
 8000d28:	eb05 0509 	add.w	r5, r5, r9
        str pa0, [c_ptr, #-8]
 8000d2c:	f840 5c08 	str.w	r5, [r0, #-8]
        add.w pa1, pa1, pb2
 8000d30:	eb06 060a 	add.w	r6, r6, sl
        str pa1, [c_ptr, #-4]
 8000d34:	f840 6c04 	str.w	r6, [r0, #-4]
    subs ctr, #1
 8000d38:	f1bc 0c01 	subs.w	ip, ip, #1
    bne.w 1b
 8000d3c:	f47f afcc 	bne.w	8000cd8 <pqcrystals_dilithium_asm_pointwise_acc_montgomery+0x18>

    // final coefficient
    ldr.w pa0, [a_ptr]
 8000d40:	f8d1 5000 	ldr.w	r5, [r1]
    ldr.w pb0, [b_ptr]
 8000d44:	f8d2 8000 	ldr.w	r8, [r2]
    ldr.w pa1, [c_ptr]
 8000d48:	f8d0 6000 	ldr.w	r6, [r0]
    montgomery_multiplication res, pa0, pb0, q, qinv
 8000d4c:	fb85 5e08 	smull	r5, lr, r5, r8
 8000d50:	fb05 f803 	mul.w	r8, r5, r3
 8000d54:	fbc8 5e04 	smlal	r5, lr, r8, r4
    add.w res, res, pa1
 8000d58:	eb0e 0e06 	add.w	lr, lr, r6
    str.w res, [c_ptr]
 8000d5c:	f8c0 e000 	str.w	lr, [r0]

    pop.w {r4-r11, pc}
 8000d60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d64 <pqcrystals_dilithium_asm_reduce32>:
 8000d64:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
.type pqcrystals_dilithium_asm_reduce32, %function
.align 2
pqcrystals_dilithium_asm_reduce32:
    push {r4-r10}

    movw r12,#:lower16:8380417
 8000d68:	f24e 0c01 	movw	ip, #57345	@ 0xe001
    movt r12,#:upper16:8380417
 8000d6c:	f2c0 0c7f 	movt	ip, #127	@ 0x7f
    movw r10, #32
 8000d70:	f240 0a20 	movw	sl, #32
    1:
        ldr.w r1, [r0]
 8000d74:	f8d0 1000 	ldr.w	r1, [r0]
        ldr.w r2, [r0, #1*4]
 8000d78:	f8d0 2004 	ldr.w	r2, [r0, #4]
        ldr.w r3, [r0, #2*4]
 8000d7c:	f8d0 3008 	ldr.w	r3, [r0, #8]
        ldr.w r4, [r0, #3*4]
 8000d80:	f8d0 400c 	ldr.w	r4, [r0, #12]
        ldr.w r5, [r0, #4*4]
 8000d84:	f8d0 5010 	ldr.w	r5, [r0, #16]
        ldr.w r6, [r0, #5*4]
 8000d88:	f8d0 6014 	ldr.w	r6, [r0, #20]
        ldr.w r7, [r0, #6*4]
 8000d8c:	f8d0 7018 	ldr.w	r7, [r0, #24]
        ldr.w r8, [r0, #7*4]
 8000d90:	f8d0 801c 	ldr.w	r8, [r0, #28]

        redq r1, r9, r12
 8000d94:	f501 0980 	add.w	r9, r1, #4194304	@ 0x400000
 8000d98:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000d9c:	fb09 111c 	mls	r1, r9, ip, r1
        redq r2, r9, r12
 8000da0:	f502 0980 	add.w	r9, r2, #4194304	@ 0x400000
 8000da4:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000da8:	fb09 221c 	mls	r2, r9, ip, r2
        redq r3, r9, r12
 8000dac:	f503 0980 	add.w	r9, r3, #4194304	@ 0x400000
 8000db0:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000db4:	fb09 331c 	mls	r3, r9, ip, r3
        redq r4, r9, r12
 8000db8:	f504 0980 	add.w	r9, r4, #4194304	@ 0x400000
 8000dbc:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000dc0:	fb09 441c 	mls	r4, r9, ip, r4
        redq r5, r9, r12
 8000dc4:	f505 0980 	add.w	r9, r5, #4194304	@ 0x400000
 8000dc8:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000dcc:	fb09 551c 	mls	r5, r9, ip, r5
        redq r6, r9, r12
 8000dd0:	f506 0980 	add.w	r9, r6, #4194304	@ 0x400000
 8000dd4:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000dd8:	fb09 661c 	mls	r6, r9, ip, r6
        redq r7, r9, r12
 8000ddc:	f507 0980 	add.w	r9, r7, #4194304	@ 0x400000
 8000de0:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000de4:	fb09 771c 	mls	r7, r9, ip, r7
        redq r8, r9, r12
 8000de8:	f508 0980 	add.w	r9, r8, #4194304	@ 0x400000
 8000dec:	ea5f 59e9 	movs.w	r9, r9, asr #23
 8000df0:	fb09 881c 	mls	r8, r9, ip, r8

        str.w r2, [r0, #1*4]
 8000df4:	f8c0 2004 	str.w	r2, [r0, #4]
        str.w r3, [r0, #2*4]
 8000df8:	f8c0 3008 	str.w	r3, [r0, #8]
        str.w r4, [r0, #3*4]
 8000dfc:	f8c0 400c 	str.w	r4, [r0, #12]
        str.w r5, [r0, #4*4]
 8000e00:	f8c0 5010 	str.w	r5, [r0, #16]
        str.w r6, [r0, #5*4]
 8000e04:	f8c0 6014 	str.w	r6, [r0, #20]
        str.w r7, [r0, #6*4]
 8000e08:	f8c0 7018 	str.w	r7, [r0, #24]
        str.w r8, [r0, #7*4]
 8000e0c:	f8c0 801c 	str.w	r8, [r0, #28]
        str r1, [r0], #8*4
 8000e10:	f840 1b20 	str.w	r1, [r0], #32
        subs r10, #1
 8000e14:	f1ba 0a01 	subs.w	sl, sl, #1
        bne.w 1b
 8000e18:	f47f afac 	bne.w	8000d74 <pqcrystals_dilithium_asm_reduce32+0x10>

    pop {r4-r10}
 8000e1c:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    bx lr
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop

08000e24 <pqcrystals_dilithium_asm_caddq>:
// void asm_caddq(int32_t a[N]);
.global pqcrystals_dilithium_asm_caddq
.type pqcrystals_dilithium_asm_caddq, %function
.align 2
pqcrystals_dilithium_asm_caddq:
    push {r4-r10}
 8000e24:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}

    movw r12,#:lower16:8380417
 8000e28:	f24e 0c01 	movw	ip, #57345	@ 0xe001
    movt r12,#:upper16:8380417
 8000e2c:	f2c0 0c7f 	movt	ip, #127	@ 0x7f

    movw r10, #32
 8000e30:	f240 0a20 	movw	sl, #32
    1:
        ldr.w r1, [r0]
 8000e34:	f8d0 1000 	ldr.w	r1, [r0]
        ldr.w r2, [r0, #1*4]
 8000e38:	f8d0 2004 	ldr.w	r2, [r0, #4]
        ldr.w r3, [r0, #2*4]
 8000e3c:	f8d0 3008 	ldr.w	r3, [r0, #8]
        ldr.w r4, [r0, #3*4]
 8000e40:	f8d0 400c 	ldr.w	r4, [r0, #12]
        ldr.w r5, [r0, #4*4]
 8000e44:	f8d0 5010 	ldr.w	r5, [r0, #16]
        ldr.w r6, [r0, #5*4]
 8000e48:	f8d0 6014 	ldr.w	r6, [r0, #20]
        ldr.w r7, [r0, #6*4]
 8000e4c:	f8d0 7018 	ldr.w	r7, [r0, #24]
        ldr.w r8, [r0, #7*4]
 8000e50:	f8d0 801c 	ldr.w	r8, [r0, #28]

        caddq r1, r9, r12
 8000e54:	ea0c 79e1 	and.w	r9, ip, r1, asr #31
 8000e58:	4449      	add	r1, r9
        caddq r2, r9, r12
 8000e5a:	ea0c 79e2 	and.w	r9, ip, r2, asr #31
 8000e5e:	444a      	add	r2, r9
        caddq r3, r9, r12
 8000e60:	ea0c 79e3 	and.w	r9, ip, r3, asr #31
 8000e64:	444b      	add	r3, r9
        caddq r4, r9, r12
 8000e66:	ea0c 79e4 	and.w	r9, ip, r4, asr #31
 8000e6a:	444c      	add	r4, r9
        caddq r5, r9, r12
 8000e6c:	ea0c 79e5 	and.w	r9, ip, r5, asr #31
 8000e70:	444d      	add	r5, r9
        caddq r6, r9, r12
 8000e72:	ea0c 79e6 	and.w	r9, ip, r6, asr #31
 8000e76:	444e      	add	r6, r9
        caddq r7, r9, r12
 8000e78:	ea0c 79e7 	and.w	r9, ip, r7, asr #31
 8000e7c:	444f      	add	r7, r9
        caddq r8, r9, r12
 8000e7e:	ea0c 79e8 	and.w	r9, ip, r8, asr #31
 8000e82:	44c8      	add	r8, r9

        str.w r2, [r0, #1*4]
 8000e84:	f8c0 2004 	str.w	r2, [r0, #4]
        str.w r3, [r0, #2*4]
 8000e88:	f8c0 3008 	str.w	r3, [r0, #8]
        str.w r4, [r0, #3*4]
 8000e8c:	f8c0 400c 	str.w	r4, [r0, #12]
        str.w r5, [r0, #4*4]
 8000e90:	f8c0 5010 	str.w	r5, [r0, #16]
        str.w r6, [r0, #5*4]
 8000e94:	f8c0 6014 	str.w	r6, [r0, #20]
        str.w r7, [r0, #6*4]
 8000e98:	f8c0 7018 	str.w	r7, [r0, #24]
        str.w r8, [r0, #7*4]
 8000e9c:	f8c0 801c 	str.w	r8, [r0, #28]
        str r1, [r0], #8*4
 8000ea0:	f840 1b20 	str.w	r1, [r0], #32
        subs r10, #1
 8000ea4:	f1ba 0a01 	subs.w	sl, sl, #1
        bne.w 1b
 8000ea8:	f47f afc4 	bne.w	8000e34 <pqcrystals_dilithium_asm_caddq+0x10>

    pop {r4-r10}
 8000eac:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
    bx lr
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <pqcrystals_dilithium_asm_rej_uniform>:
// asm_rej_uniform(int32_t *a,unsigned int len,const unsigned char *buf, unsigned int buflen);
.global pqcrystals_dilithium_asm_rej_uniform
.type pqcrystals_dilithium_asm_rej_uniform, %function
.align 2
pqcrystals_dilithium_asm_rej_uniform:
    push.w {r4-r6}
 8000eb4:	e92d 0070 	stmdb	sp!, {r4, r5, r6}
    push.w {r1}
 8000eb8:	f84d 1d04 	str.w	r1, [sp, #-4]!
    // Store Q-1 in r12.
    movw r12,#:lower16:8380416
 8000ebc:	f24e 0c00 	movw	ip, #57344	@ 0xe000
    movt r12,#:upper16:8380416
 8000ec0:	f2c0 0c7f 	movt	ip, #127	@ 0x7f

    add.w r6, r0, r1, lsl #2
 8000ec4:	eb00 0681 	add.w	r6, r0, r1, lsl #2
    add.w r3, r2, r3
 8000ec8:	eb02 0303 	add.w	r3, r2, r3
    sub.w r3, r3, #2
 8000ecc:	f1a3 0302 	sub.w	r3, r3, #2

1:
    // If there are less than 3 bytes available, return.
    cmp.w r3, r2
 8000ed0:	ebb3 0f02 	cmp.w	r3, r2
    ble.w end
 8000ed4:	f340 800a 	ble.w	8000eec <end>

    ldr r5, [r2], #3
 8000ed8:	f852 5b03 	ldr.w	r5, [r2], #3
    ubfx r5, r5, #0, #23
 8000edc:	f3c5 0516 	ubfx	r5, r5, #0, #23

    cmp.n r5, r12
 8000ee0:	4565      	cmp	r5, ip
    it le
 8000ee2:	bfd8      	it	le
    strle r5, [r0], #4
 8000ee4:	f840 5b04 	strle.w	r5, [r0], #4

    cmp.n r0, r6
 8000ee8:	42b0      	cmp	r0, r6
    bne.n 1b
 8000eea:	d1f1      	bne.n	8000ed0 <pqcrystals_dilithium_asm_rej_uniform+0x1c>

08000eec <end>:

end:
    pop.w {r5}
 8000eec:	f85d 5b04 	ldr.w	r5, [sp], #4

    sub.w r0, r6, r0
 8000ef0:	eba6 0000 	sub.w	r0, r6, r0
    sub.w r0, r5, r0, lsr #2
 8000ef4:	eba5 0090 	sub.w	r0, r5, r0, lsr #2
    pop.w {r4-r6}
 8000ef8:	e8bd 0070 	ldmia.w	sp!, {r4, r5, r6}
    bx lr
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop

08000f00 <strlen>:
 8000f00:	4603      	mov	r3, r0
 8000f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000f06:	2a00      	cmp	r2, #0
 8000f08:	d1fb      	bne.n	8000f02 <strlen+0x2>
 8000f0a:	1a18      	subs	r0, r3, r0
 8000f0c:	3801      	subs	r0, #1
 8000f0e:	4770      	bx	lr

08000f10 <__aeabi_uldivmod>:
 8000f10:	b953      	cbnz	r3, 8000f28 <__aeabi_uldivmod+0x18>
 8000f12:	b94a      	cbnz	r2, 8000f28 <__aeabi_uldivmod+0x18>
 8000f14:	2900      	cmp	r1, #0
 8000f16:	bf08      	it	eq
 8000f18:	2800      	cmpeq	r0, #0
 8000f1a:	bf1c      	itt	ne
 8000f1c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000f20:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000f24:	f000 b988 	b.w	8001238 <__aeabi_idiv0>
 8000f28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f30:	f000 f806 	bl	8000f40 <__udivmoddi4>
 8000f34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f3c:	b004      	add	sp, #16
 8000f3e:	4770      	bx	lr

08000f40 <__udivmoddi4>:
 8000f40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f44:	9d08      	ldr	r5, [sp, #32]
 8000f46:	468e      	mov	lr, r1
 8000f48:	4604      	mov	r4, r0
 8000f4a:	4688      	mov	r8, r1
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d14a      	bne.n	8000fe6 <__udivmoddi4+0xa6>
 8000f50:	428a      	cmp	r2, r1
 8000f52:	4617      	mov	r7, r2
 8000f54:	d962      	bls.n	800101c <__udivmoddi4+0xdc>
 8000f56:	fab2 f682 	clz	r6, r2
 8000f5a:	b14e      	cbz	r6, 8000f70 <__udivmoddi4+0x30>
 8000f5c:	f1c6 0320 	rsb	r3, r6, #32
 8000f60:	fa01 f806 	lsl.w	r8, r1, r6
 8000f64:	fa20 f303 	lsr.w	r3, r0, r3
 8000f68:	40b7      	lsls	r7, r6
 8000f6a:	ea43 0808 	orr.w	r8, r3, r8
 8000f6e:	40b4      	lsls	r4, r6
 8000f70:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f74:	fa1f fc87 	uxth.w	ip, r7
 8000f78:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f7c:	0c23      	lsrs	r3, r4, #16
 8000f7e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f82:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f86:	fb01 f20c 	mul.w	r2, r1, ip
 8000f8a:	429a      	cmp	r2, r3
 8000f8c:	d909      	bls.n	8000fa2 <__udivmoddi4+0x62>
 8000f8e:	18fb      	adds	r3, r7, r3
 8000f90:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000f94:	f080 80ea 	bcs.w	800116c <__udivmoddi4+0x22c>
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	f240 80e7 	bls.w	800116c <__udivmoddi4+0x22c>
 8000f9e:	3902      	subs	r1, #2
 8000fa0:	443b      	add	r3, r7
 8000fa2:	1a9a      	subs	r2, r3, r2
 8000fa4:	b2a3      	uxth	r3, r4
 8000fa6:	fbb2 f0fe 	udiv	r0, r2, lr
 8000faa:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fb2:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fb6:	459c      	cmp	ip, r3
 8000fb8:	d909      	bls.n	8000fce <__udivmoddi4+0x8e>
 8000fba:	18fb      	adds	r3, r7, r3
 8000fbc:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000fc0:	f080 80d6 	bcs.w	8001170 <__udivmoddi4+0x230>
 8000fc4:	459c      	cmp	ip, r3
 8000fc6:	f240 80d3 	bls.w	8001170 <__udivmoddi4+0x230>
 8000fca:	443b      	add	r3, r7
 8000fcc:	3802      	subs	r0, #2
 8000fce:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fd2:	eba3 030c 	sub.w	r3, r3, ip
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	b11d      	cbz	r5, 8000fe2 <__udivmoddi4+0xa2>
 8000fda:	40f3      	lsrs	r3, r6
 8000fdc:	2200      	movs	r2, #0
 8000fde:	e9c5 3200 	strd	r3, r2, [r5]
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	428b      	cmp	r3, r1
 8000fe8:	d905      	bls.n	8000ff6 <__udivmoddi4+0xb6>
 8000fea:	b10d      	cbz	r5, 8000ff0 <__udivmoddi4+0xb0>
 8000fec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4608      	mov	r0, r1
 8000ff4:	e7f5      	b.n	8000fe2 <__udivmoddi4+0xa2>
 8000ff6:	fab3 f183 	clz	r1, r3
 8000ffa:	2900      	cmp	r1, #0
 8000ffc:	d146      	bne.n	800108c <__udivmoddi4+0x14c>
 8000ffe:	4573      	cmp	r3, lr
 8001000:	d302      	bcc.n	8001008 <__udivmoddi4+0xc8>
 8001002:	4282      	cmp	r2, r0
 8001004:	f200 8105 	bhi.w	8001212 <__udivmoddi4+0x2d2>
 8001008:	1a84      	subs	r4, r0, r2
 800100a:	eb6e 0203 	sbc.w	r2, lr, r3
 800100e:	2001      	movs	r0, #1
 8001010:	4690      	mov	r8, r2
 8001012:	2d00      	cmp	r5, #0
 8001014:	d0e5      	beq.n	8000fe2 <__udivmoddi4+0xa2>
 8001016:	e9c5 4800 	strd	r4, r8, [r5]
 800101a:	e7e2      	b.n	8000fe2 <__udivmoddi4+0xa2>
 800101c:	2a00      	cmp	r2, #0
 800101e:	f000 8090 	beq.w	8001142 <__udivmoddi4+0x202>
 8001022:	fab2 f682 	clz	r6, r2
 8001026:	2e00      	cmp	r6, #0
 8001028:	f040 80a4 	bne.w	8001174 <__udivmoddi4+0x234>
 800102c:	1a8a      	subs	r2, r1, r2
 800102e:	0c03      	lsrs	r3, r0, #16
 8001030:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001034:	b280      	uxth	r0, r0
 8001036:	b2bc      	uxth	r4, r7
 8001038:	2101      	movs	r1, #1
 800103a:	fbb2 fcfe 	udiv	ip, r2, lr
 800103e:	fb0e 221c 	mls	r2, lr, ip, r2
 8001042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8001046:	fb04 f20c 	mul.w	r2, r4, ip
 800104a:	429a      	cmp	r2, r3
 800104c:	d907      	bls.n	800105e <__udivmoddi4+0x11e>
 800104e:	18fb      	adds	r3, r7, r3
 8001050:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8001054:	d202      	bcs.n	800105c <__udivmoddi4+0x11c>
 8001056:	429a      	cmp	r2, r3
 8001058:	f200 80e0 	bhi.w	800121c <__udivmoddi4+0x2dc>
 800105c:	46c4      	mov	ip, r8
 800105e:	1a9b      	subs	r3, r3, r2
 8001060:	fbb3 f2fe 	udiv	r2, r3, lr
 8001064:	fb0e 3312 	mls	r3, lr, r2, r3
 8001068:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800106c:	fb02 f404 	mul.w	r4, r2, r4
 8001070:	429c      	cmp	r4, r3
 8001072:	d907      	bls.n	8001084 <__udivmoddi4+0x144>
 8001074:	18fb      	adds	r3, r7, r3
 8001076:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800107a:	d202      	bcs.n	8001082 <__udivmoddi4+0x142>
 800107c:	429c      	cmp	r4, r3
 800107e:	f200 80ca 	bhi.w	8001216 <__udivmoddi4+0x2d6>
 8001082:	4602      	mov	r2, r0
 8001084:	1b1b      	subs	r3, r3, r4
 8001086:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800108a:	e7a5      	b.n	8000fd8 <__udivmoddi4+0x98>
 800108c:	f1c1 0620 	rsb	r6, r1, #32
 8001090:	408b      	lsls	r3, r1
 8001092:	fa22 f706 	lsr.w	r7, r2, r6
 8001096:	431f      	orrs	r7, r3
 8001098:	fa0e f401 	lsl.w	r4, lr, r1
 800109c:	fa20 f306 	lsr.w	r3, r0, r6
 80010a0:	fa2e fe06 	lsr.w	lr, lr, r6
 80010a4:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010a8:	4323      	orrs	r3, r4
 80010aa:	fa00 f801 	lsl.w	r8, r0, r1
 80010ae:	fa1f fc87 	uxth.w	ip, r7
 80010b2:	fbbe f0f9 	udiv	r0, lr, r9
 80010b6:	0c1c      	lsrs	r4, r3, #16
 80010b8:	fb09 ee10 	mls	lr, r9, r0, lr
 80010bc:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010c0:	fb00 fe0c 	mul.w	lr, r0, ip
 80010c4:	45a6      	cmp	lr, r4
 80010c6:	fa02 f201 	lsl.w	r2, r2, r1
 80010ca:	d909      	bls.n	80010e0 <__udivmoddi4+0x1a0>
 80010cc:	193c      	adds	r4, r7, r4
 80010ce:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80010d2:	f080 809c 	bcs.w	800120e <__udivmoddi4+0x2ce>
 80010d6:	45a6      	cmp	lr, r4
 80010d8:	f240 8099 	bls.w	800120e <__udivmoddi4+0x2ce>
 80010dc:	3802      	subs	r0, #2
 80010de:	443c      	add	r4, r7
 80010e0:	eba4 040e 	sub.w	r4, r4, lr
 80010e4:	fa1f fe83 	uxth.w	lr, r3
 80010e8:	fbb4 f3f9 	udiv	r3, r4, r9
 80010ec:	fb09 4413 	mls	r4, r9, r3, r4
 80010f0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010f4:	fb03 fc0c 	mul.w	ip, r3, ip
 80010f8:	45a4      	cmp	ip, r4
 80010fa:	d908      	bls.n	800110e <__udivmoddi4+0x1ce>
 80010fc:	193c      	adds	r4, r7, r4
 80010fe:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8001102:	f080 8082 	bcs.w	800120a <__udivmoddi4+0x2ca>
 8001106:	45a4      	cmp	ip, r4
 8001108:	d97f      	bls.n	800120a <__udivmoddi4+0x2ca>
 800110a:	3b02      	subs	r3, #2
 800110c:	443c      	add	r4, r7
 800110e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001112:	eba4 040c 	sub.w	r4, r4, ip
 8001116:	fba0 ec02 	umull	lr, ip, r0, r2
 800111a:	4564      	cmp	r4, ip
 800111c:	4673      	mov	r3, lr
 800111e:	46e1      	mov	r9, ip
 8001120:	d362      	bcc.n	80011e8 <__udivmoddi4+0x2a8>
 8001122:	d05f      	beq.n	80011e4 <__udivmoddi4+0x2a4>
 8001124:	b15d      	cbz	r5, 800113e <__udivmoddi4+0x1fe>
 8001126:	ebb8 0203 	subs.w	r2, r8, r3
 800112a:	eb64 0409 	sbc.w	r4, r4, r9
 800112e:	fa04 f606 	lsl.w	r6, r4, r6
 8001132:	fa22 f301 	lsr.w	r3, r2, r1
 8001136:	431e      	orrs	r6, r3
 8001138:	40cc      	lsrs	r4, r1
 800113a:	e9c5 6400 	strd	r6, r4, [r5]
 800113e:	2100      	movs	r1, #0
 8001140:	e74f      	b.n	8000fe2 <__udivmoddi4+0xa2>
 8001142:	fbb1 fcf2 	udiv	ip, r1, r2
 8001146:	0c01      	lsrs	r1, r0, #16
 8001148:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800114c:	b280      	uxth	r0, r0
 800114e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001152:	463b      	mov	r3, r7
 8001154:	4638      	mov	r0, r7
 8001156:	463c      	mov	r4, r7
 8001158:	46b8      	mov	r8, r7
 800115a:	46be      	mov	lr, r7
 800115c:	2620      	movs	r6, #32
 800115e:	fbb1 f1f7 	udiv	r1, r1, r7
 8001162:	eba2 0208 	sub.w	r2, r2, r8
 8001166:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800116a:	e766      	b.n	800103a <__udivmoddi4+0xfa>
 800116c:	4601      	mov	r1, r0
 800116e:	e718      	b.n	8000fa2 <__udivmoddi4+0x62>
 8001170:	4610      	mov	r0, r2
 8001172:	e72c      	b.n	8000fce <__udivmoddi4+0x8e>
 8001174:	f1c6 0220 	rsb	r2, r6, #32
 8001178:	fa2e f302 	lsr.w	r3, lr, r2
 800117c:	40b7      	lsls	r7, r6
 800117e:	40b1      	lsls	r1, r6
 8001180:	fa20 f202 	lsr.w	r2, r0, r2
 8001184:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001188:	430a      	orrs	r2, r1
 800118a:	fbb3 f8fe 	udiv	r8, r3, lr
 800118e:	b2bc      	uxth	r4, r7
 8001190:	fb0e 3318 	mls	r3, lr, r8, r3
 8001194:	0c11      	lsrs	r1, r2, #16
 8001196:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119a:	fb08 f904 	mul.w	r9, r8, r4
 800119e:	40b0      	lsls	r0, r6
 80011a0:	4589      	cmp	r9, r1
 80011a2:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011a6:	b280      	uxth	r0, r0
 80011a8:	d93e      	bls.n	8001228 <__udivmoddi4+0x2e8>
 80011aa:	1879      	adds	r1, r7, r1
 80011ac:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80011b0:	d201      	bcs.n	80011b6 <__udivmoddi4+0x276>
 80011b2:	4589      	cmp	r9, r1
 80011b4:	d81f      	bhi.n	80011f6 <__udivmoddi4+0x2b6>
 80011b6:	eba1 0109 	sub.w	r1, r1, r9
 80011ba:	fbb1 f9fe 	udiv	r9, r1, lr
 80011be:	fb09 f804 	mul.w	r8, r9, r4
 80011c2:	fb0e 1119 	mls	r1, lr, r9, r1
 80011c6:	b292      	uxth	r2, r2
 80011c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011cc:	4542      	cmp	r2, r8
 80011ce:	d229      	bcs.n	8001224 <__udivmoddi4+0x2e4>
 80011d0:	18ba      	adds	r2, r7, r2
 80011d2:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80011d6:	d2c4      	bcs.n	8001162 <__udivmoddi4+0x222>
 80011d8:	4542      	cmp	r2, r8
 80011da:	d2c2      	bcs.n	8001162 <__udivmoddi4+0x222>
 80011dc:	f1a9 0102 	sub.w	r1, r9, #2
 80011e0:	443a      	add	r2, r7
 80011e2:	e7be      	b.n	8001162 <__udivmoddi4+0x222>
 80011e4:	45f0      	cmp	r8, lr
 80011e6:	d29d      	bcs.n	8001124 <__udivmoddi4+0x1e4>
 80011e8:	ebbe 0302 	subs.w	r3, lr, r2
 80011ec:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011f0:	3801      	subs	r0, #1
 80011f2:	46e1      	mov	r9, ip
 80011f4:	e796      	b.n	8001124 <__udivmoddi4+0x1e4>
 80011f6:	eba7 0909 	sub.w	r9, r7, r9
 80011fa:	4449      	add	r1, r9
 80011fc:	f1a8 0c02 	sub.w	ip, r8, #2
 8001200:	fbb1 f9fe 	udiv	r9, r1, lr
 8001204:	fb09 f804 	mul.w	r8, r9, r4
 8001208:	e7db      	b.n	80011c2 <__udivmoddi4+0x282>
 800120a:	4673      	mov	r3, lr
 800120c:	e77f      	b.n	800110e <__udivmoddi4+0x1ce>
 800120e:	4650      	mov	r0, sl
 8001210:	e766      	b.n	80010e0 <__udivmoddi4+0x1a0>
 8001212:	4608      	mov	r0, r1
 8001214:	e6fd      	b.n	8001012 <__udivmoddi4+0xd2>
 8001216:	443b      	add	r3, r7
 8001218:	3a02      	subs	r2, #2
 800121a:	e733      	b.n	8001084 <__udivmoddi4+0x144>
 800121c:	f1ac 0c02 	sub.w	ip, ip, #2
 8001220:	443b      	add	r3, r7
 8001222:	e71c      	b.n	800105e <__udivmoddi4+0x11e>
 8001224:	4649      	mov	r1, r9
 8001226:	e79c      	b.n	8001162 <__udivmoddi4+0x222>
 8001228:	eba1 0109 	sub.w	r1, r1, r9
 800122c:	46c4      	mov	ip, r8
 800122e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001232:	fb09 f804 	mul.w	r8, r9, r4
 8001236:	e7c4      	b.n	80011c2 <__udivmoddi4+0x282>

08001238 <__aeabi_idiv0>:
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop

0800123c <shake128_inc_init>:
        outlen -= len;
        s_inc[25] = r - len;
    }
}

void shake128_inc_init(shake128incctx *state) {
 800123c:	b510      	push	{r4, lr}
        s_inc[i] = 0;
 800123e:	22c8      	movs	r2, #200	@ 0xc8
 8001240:	2100      	movs	r1, #0
void shake128_inc_init(shake128incctx *state) {
 8001242:	4604      	mov	r4, r0
        s_inc[i] = 0;
 8001244:	f004 fb58 	bl	80058f8 <memset>
    s_inc[25] = 0;
 8001248:	2200      	movs	r2, #0
 800124a:	2300      	movs	r3, #0
 800124c:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_init(state->ctx);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8001250:	bd10      	pop	{r4, pc}
 8001252:	bf00      	nop

08001254 <shake128_inc_absorb>:

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 8001254:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8001258:	4615      	mov	r5, r2
 800125a:	4604      	mov	r4, r0
    while (mlen + s_inc[25] >= r) {
 800125c:	e9d0 2032 	ldrd	r2, r0, [r0, #200]	@ 0xc8
 8001260:	18ab      	adds	r3, r5, r2
 8001262:	f140 0000 	adc.w	r0, r0, #0
 8001266:	2ba8      	cmp	r3, #168	@ 0xa8
 8001268:	f170 0000 	sbcs.w	r0, r0, #0
void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 800126c:	460e      	mov	r6, r1
    while (mlen + s_inc[25] >= r) {
 800126e:	d31f      	bcc.n	80012b0 <shake128_inc_absorb+0x5c>
        s_inc[25] = 0;
 8001270:	f04f 0800 	mov.w	r8, #0
 8001274:	f04f 0900 	mov.w	r9, #0
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8001278:	f1c2 03a8 	rsb	r3, r2, #168	@ 0xa8
 800127c:	4631      	mov	r1, r6
 800127e:	4620      	mov	r0, r4
 8001280:	f000 fa3a 	bl	80016f8 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 8001284:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
        KeccakF1600_StatePermute(s_inc);
 8001288:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 800128a:	f1a3 02a8 	sub.w	r2, r3, #168	@ 0xa8
        s_inc[25] = 0;
 800128e:	e9c4 8932 	strd	r8, r9, [r4, #200]	@ 0xc8
        m += r - s_inc[25];
 8001292:	f1c3 03a8 	rsb	r3, r3, #168	@ 0xa8
        mlen -= (size_t)(r - s_inc[25]);
 8001296:	4415      	add	r5, r2
        m += r - s_inc[25];
 8001298:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 800129a:	f000 fa57 	bl	800174c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 800129e:	e9d4 2032 	ldrd	r2, r0, [r4, #200]	@ 0xc8
 80012a2:	1953      	adds	r3, r2, r5
 80012a4:	f140 0000 	adc.w	r0, r0, #0
 80012a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80012aa:	f170 0000 	sbcs.w	r0, r0, #0
 80012ae:	d2e3      	bcs.n	8001278 <shake128_inc_absorb+0x24>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 80012b0:	462b      	mov	r3, r5
 80012b2:	4631      	mov	r1, r6
 80012b4:	4620      	mov	r0, r4
 80012b6:	f000 fa1f 	bl	80016f8 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 80012ba:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	@ 0xc8
 80012be:	195b      	adds	r3, r3, r5
 80012c0:	f142 0200 	adc.w	r2, r2, #0
 80012c4:	e9c4 3232 	strd	r3, r2, [r4, #200]	@ 0xc8
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80012c8:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

080012cc <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
 80012cc:	b510      	push	{r4, lr}
    if(s_inc[25] == r-1){
 80012ce:	e9d0 2132 	ldrd	r2, r1, [r0, #200]	@ 0xc8
void shake128_inc_finalize(shake128incctx *state) {
 80012d2:	b082      	sub	sp, #8
 80012d4:	231f      	movs	r3, #31
 80012d6:	f88d 3007 	strb.w	r3, [sp, #7]
    if(s_inc[25] == r-1){
 80012da:	f1a2 03a7 	sub.w	r3, r2, #167	@ 0xa7
 80012de:	430b      	orrs	r3, r1
void shake128_inc_finalize(shake128incctx *state) {
 80012e0:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 80012e2:	d014      	beq.n	800130e <shake128_inc_finalize+0x42>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80012e4:	2301      	movs	r3, #1
 80012e6:	f10d 0107 	add.w	r1, sp, #7
 80012ea:	f000 fa05 	bl	80016f8 <KeccakF1600_StateXORBytes>
      p = 128;
 80012ee:	2080      	movs	r0, #128	@ 0x80
 80012f0:	f88d 0007 	strb.w	r0, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 80012f4:	2301      	movs	r3, #1
 80012f6:	22a7      	movs	r2, #167	@ 0xa7
 80012f8:	f10d 0107 	add.w	r1, sp, #7
 80012fc:	4620      	mov	r0, r4
 80012fe:	f000 f9fb 	bl	80016f8 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 8001302:	2200      	movs	r2, #0
 8001304:	2300      	movs	r3, #0
 8001306:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800130a:	b002      	add	sp, #8
 800130c:	bd10      	pop	{r4, pc}
      p |= 128;
 800130e:	219f      	movs	r1, #159	@ 0x9f
 8001310:	f88d 1007 	strb.w	r1, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8001314:	2301      	movs	r3, #1
 8001316:	22a7      	movs	r2, #167	@ 0xa7
 8001318:	f10d 0107 	add.w	r1, sp, #7
 800131c:	f000 f9ec 	bl	80016f8 <KeccakF1600_StateXORBytes>
 8001320:	e7ef      	b.n	8001302 <shake128_inc_finalize+0x36>
 8001322:	bf00      	nop

08001324 <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 8001324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(outlen < s_inc[25])
 8001328:	e9d2 6932 	ldrd	r6, r9, [r2, #200]	@ 0xc8
 800132c:	f04f 0800 	mov.w	r8, #0
 8001330:	42b1      	cmp	r1, r6
 8001332:	eb78 0309 	sbcs.w	r3, r8, r9
void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 8001336:	4615      	mov	r5, r2
 8001338:	460c      	mov	r4, r1
 800133a:	4607      	mov	r7, r0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800133c:	f1c6 02a8 	rsb	r2, r6, #168	@ 0xa8
    if(outlen < s_inc[25])
 8001340:	d20d      	bcs.n	800135e <shake128_inc_squeeze+0x3a>
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8001342:	460b      	mov	r3, r1
 8001344:	4601      	mov	r1, r0
 8001346:	4628      	mov	r0, r5
 8001348:	f000 f9ae 	bl	80016a8 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 800134c:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	@ 0xc8
 8001350:	1b1b      	subs	r3, r3, r4
 8001352:	f162 0200 	sbc.w	r2, r2, #0
 8001356:	e9c5 3232 	strd	r3, r2, [r5, #200]	@ 0xc8
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800135a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800135e:	4633      	mov	r3, r6
 8001360:	4601      	mov	r1, r0
 8001362:	4628      	mov	r0, r5
 8001364:	f000 f9a0 	bl	80016a8 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 8001368:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 800136c:	1b9b      	subs	r3, r3, r6
 800136e:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
 8001372:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
    h += len;
 8001376:	4437      	add	r7, r6
    s_inc[25] -= len;
 8001378:	eb63 0309 	sbc.w	r3, r3, r9
    while (outlen > 0) {
 800137c:	1ba6      	subs	r6, r4, r6
    s_inc[25] -= len;
 800137e:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    while (outlen > 0) {
 8001382:	d0ea      	beq.n	800135a <shake128_inc_squeeze+0x36>
        KeccakF1600_StatePermute(s_inc);
 8001384:	4628      	mov	r0, r5
 8001386:	f000 f9e1 	bl	800174c <KeccakF1600_StatePermute>
        if(outlen < r)
 800138a:	2ea8      	cmp	r6, #168	@ 0xa8
 800138c:	4634      	mov	r4, r6
 800138e:	bf28      	it	cs
 8001390:	24a8      	movcs	r4, #168	@ 0xa8
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8001392:	4623      	mov	r3, r4
 8001394:	4639      	mov	r1, r7
 8001396:	2200      	movs	r2, #0
 8001398:	4628      	mov	r0, r5
 800139a:	f000 f985 	bl	80016a8 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 800139e:	f1c4 03a8 	rsb	r3, r4, #168	@ 0xa8
    while (outlen > 0) {
 80013a2:	1b36      	subs	r6, r6, r4
        s_inc[25] = r - len;
 80013a4:	e9c5 3832 	strd	r3, r8, [r5, #200]	@ 0xc8
        h += len;
 80013a8:	4427      	add	r7, r4
    while (outlen > 0) {
 80013aa:	d1eb      	bne.n	8001384 <shake128_inc_squeeze+0x60>
}
 80013ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080013b0 <shake256_inc_init>:

void shake128_inc_ctx_release(shake128incctx *state) {
    (void) state;
}

void shake256_inc_init(shake256incctx *state) {
 80013b0:	b510      	push	{r4, lr}
 80013b2:	22c8      	movs	r2, #200	@ 0xc8
 80013b4:	2100      	movs	r1, #0
 80013b6:	4604      	mov	r4, r0
 80013b8:	f004 fa9e 	bl	80058f8 <memset>
 80013bc:	2200      	movs	r2, #0
 80013be:	2300      	movs	r3, #0
 80013c0:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
 80013c4:	bd10      	pop	{r4, pc}
 80013c6:	bf00      	nop

080013c8 <shake256_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 80013c8:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 80013cc:	4615      	mov	r5, r2
 80013ce:	4604      	mov	r4, r0
    while (mlen + s_inc[25] >= r) {
 80013d0:	e9d0 2032 	ldrd	r2, r0, [r0, #200]	@ 0xc8
 80013d4:	18ab      	adds	r3, r5, r2
 80013d6:	f140 0000 	adc.w	r0, r0, #0
 80013da:	2b88      	cmp	r3, #136	@ 0x88
 80013dc:	f170 0000 	sbcs.w	r0, r0, #0
void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 80013e0:	460e      	mov	r6, r1
    while (mlen + s_inc[25] >= r) {
 80013e2:	d31f      	bcc.n	8001424 <shake256_inc_absorb+0x5c>
        s_inc[25] = 0;
 80013e4:	f04f 0800 	mov.w	r8, #0
 80013e8:	f04f 0900 	mov.w	r9, #0
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 80013ec:	f1c2 0388 	rsb	r3, r2, #136	@ 0x88
 80013f0:	4631      	mov	r1, r6
 80013f2:	4620      	mov	r0, r4
 80013f4:	f000 f980 	bl	80016f8 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 80013f8:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
        KeccakF1600_StatePermute(s_inc);
 80013fc:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 80013fe:	f1a3 0288 	sub.w	r2, r3, #136	@ 0x88
        s_inc[25] = 0;
 8001402:	e9c4 8932 	strd	r8, r9, [r4, #200]	@ 0xc8
        m += r - s_inc[25];
 8001406:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
        mlen -= (size_t)(r - s_inc[25]);
 800140a:	4415      	add	r5, r2
        m += r - s_inc[25];
 800140c:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 800140e:	f000 f99d 	bl	800174c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8001412:	e9d4 2032 	ldrd	r2, r0, [r4, #200]	@ 0xc8
 8001416:	1953      	adds	r3, r2, r5
 8001418:	f140 0000 	adc.w	r0, r0, #0
 800141c:	2b88      	cmp	r3, #136	@ 0x88
 800141e:	f170 0000 	sbcs.w	r0, r0, #0
 8001422:	d2e3      	bcs.n	80013ec <shake256_inc_absorb+0x24>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8001424:	462b      	mov	r3, r5
 8001426:	4631      	mov	r1, r6
 8001428:	4620      	mov	r0, r4
 800142a:	f000 f965 	bl	80016f8 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 800142e:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	@ 0xc8
 8001432:	195b      	adds	r3, r3, r5
 8001434:	f142 0200 	adc.w	r2, r2, #0
 8001438:	e9c4 3232 	strd	r3, r2, [r4, #200]	@ 0xc8
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800143c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08001440 <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 8001440:	b510      	push	{r4, lr}
    if(s_inc[25] == r-1){
 8001442:	e9d0 2132 	ldrd	r2, r1, [r0, #200]	@ 0xc8
void shake256_inc_finalize(shake256incctx *state) {
 8001446:	b082      	sub	sp, #8
 8001448:	231f      	movs	r3, #31
 800144a:	f88d 3007 	strb.w	r3, [sp, #7]
    if(s_inc[25] == r-1){
 800144e:	f1a2 0387 	sub.w	r3, r2, #135	@ 0x87
 8001452:	430b      	orrs	r3, r1
void shake256_inc_finalize(shake256incctx *state) {
 8001454:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 8001456:	d014      	beq.n	8001482 <shake256_inc_finalize+0x42>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8001458:	2301      	movs	r3, #1
 800145a:	f10d 0107 	add.w	r1, sp, #7
 800145e:	f000 f94b 	bl	80016f8 <KeccakF1600_StateXORBytes>
      p = 128;
 8001462:	2080      	movs	r0, #128	@ 0x80
 8001464:	f88d 0007 	strb.w	r0, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8001468:	2301      	movs	r3, #1
 800146a:	2287      	movs	r2, #135	@ 0x87
 800146c:	f10d 0107 	add.w	r1, sp, #7
 8001470:	4620      	mov	r0, r4
 8001472:	f000 f941 	bl	80016f8 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 8001476:	2200      	movs	r2, #0
 8001478:	2300      	movs	r3, #0
 800147a:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800147e:	b002      	add	sp, #8
 8001480:	bd10      	pop	{r4, pc}
      p |= 128;
 8001482:	219f      	movs	r1, #159	@ 0x9f
 8001484:	f88d 1007 	strb.w	r1, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8001488:	2301      	movs	r3, #1
 800148a:	2287      	movs	r2, #135	@ 0x87
 800148c:	f10d 0107 	add.w	r1, sp, #7
 8001490:	f000 f932 	bl	80016f8 <KeccakF1600_StateXORBytes>
 8001494:	e7ef      	b.n	8001476 <shake256_inc_finalize+0x36>
 8001496:	bf00      	nop

08001498 <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8001498:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(outlen < s_inc[25])
 800149c:	e9d2 6932 	ldrd	r6, r9, [r2, #200]	@ 0xc8
 80014a0:	f04f 0800 	mov.w	r8, #0
 80014a4:	42b1      	cmp	r1, r6
 80014a6:	eb78 0309 	sbcs.w	r3, r8, r9
void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 80014aa:	4615      	mov	r5, r2
 80014ac:	460c      	mov	r4, r1
 80014ae:	4607      	mov	r7, r0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80014b0:	f1c6 0288 	rsb	r2, r6, #136	@ 0x88
    if(outlen < s_inc[25])
 80014b4:	d20d      	bcs.n	80014d2 <shake256_inc_squeeze+0x3a>
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80014b6:	460b      	mov	r3, r1
 80014b8:	4601      	mov	r1, r0
 80014ba:	4628      	mov	r0, r5
 80014bc:	f000 f8f4 	bl	80016a8 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 80014c0:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	@ 0xc8
 80014c4:	1b1b      	subs	r3, r3, r4
 80014c6:	f162 0200 	sbc.w	r2, r2, #0
 80014ca:	e9c5 3232 	strd	r3, r2, [r5, #200]	@ 0xc8
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80014ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80014d2:	4633      	mov	r3, r6
 80014d4:	4601      	mov	r1, r0
 80014d6:	4628      	mov	r0, r5
 80014d8:	f000 f8e6 	bl	80016a8 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 80014dc:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 80014e0:	1b9b      	subs	r3, r3, r6
 80014e2:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
 80014e6:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
    h += len;
 80014ea:	4437      	add	r7, r6
    s_inc[25] -= len;
 80014ec:	eb63 0309 	sbc.w	r3, r3, r9
    while (outlen > 0) {
 80014f0:	1ba6      	subs	r6, r4, r6
    s_inc[25] -= len;
 80014f2:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    while (outlen > 0) {
 80014f6:	d0ea      	beq.n	80014ce <shake256_inc_squeeze+0x36>
        KeccakF1600_StatePermute(s_inc);
 80014f8:	4628      	mov	r0, r5
 80014fa:	f000 f927 	bl	800174c <KeccakF1600_StatePermute>
        if(outlen < r)
 80014fe:	2e88      	cmp	r6, #136	@ 0x88
 8001500:	4634      	mov	r4, r6
 8001502:	bf28      	it	cs
 8001504:	2488      	movcs	r4, #136	@ 0x88
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 8001506:	4623      	mov	r3, r4
 8001508:	4639      	mov	r1, r7
 800150a:	2200      	movs	r2, #0
 800150c:	4628      	mov	r0, r5
 800150e:	f000 f8cb 	bl	80016a8 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8001512:	f1c4 0388 	rsb	r3, r4, #136	@ 0x88
    while (outlen > 0) {
 8001516:	1b36      	subs	r6, r6, r4
        s_inc[25] = r - len;
 8001518:	e9c5 3832 	strd	r3, r8, [r5, #200]	@ 0xc8
        h += len;
 800151c:	4427      	add	r7, r4
    while (outlen > 0) {
 800151e:	d1eb      	bne.n	80014f8 <shake256_inc_squeeze+0x60>
}
 8001520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08001524 <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 8001524:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001528:	b0b7      	sub	sp, #220	@ 0xdc
 800152a:	461c      	mov	r4, r3
 800152c:	4606      	mov	r6, r0
 800152e:	460d      	mov	r5, r1
 8001530:	4617      	mov	r7, r2
        s_inc[i] = 0;
 8001532:	2100      	movs	r1, #0
 8001534:	22c8      	movs	r2, #200	@ 0xc8
 8001536:	a802      	add	r0, sp, #8
 8001538:	f004 f9de 	bl	80058f8 <memset>
    s_inc[25] = 0;
 800153c:	f04f 0800 	mov.w	r8, #0
 8001540:	f04f 0900 	mov.w	r9, #0
    while (mlen + s_inc[25] >= r) {
 8001544:	2c87      	cmp	r4, #135	@ 0x87
    s_inc[25] = 0;
 8001546:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
    while (mlen + s_inc[25] >= r) {
 800154a:	f04f 0200 	mov.w	r2, #0
 800154e:	d91a      	bls.n	8001586 <shake256+0x62>
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8001550:	4639      	mov	r1, r7
 8001552:	f1c2 0388 	rsb	r3, r2, #136	@ 0x88
 8001556:	a802      	add	r0, sp, #8
 8001558:	f000 f8ce 	bl	80016f8 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 800155c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
        KeccakF1600_StatePermute(s_inc);
 800155e:	a802      	add	r0, sp, #8
        mlen -= (size_t)(r - s_inc[25]);
 8001560:	f1a3 0288 	sub.w	r2, r3, #136	@ 0x88
        m += r - s_inc[25];
 8001564:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
        mlen -= (size_t)(r - s_inc[25]);
 8001568:	4414      	add	r4, r2
        m += r - s_inc[25];
 800156a:	441f      	add	r7, r3
        s_inc[25] = 0;
 800156c:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
        KeccakF1600_StatePermute(s_inc);
 8001570:	f000 f8ec 	bl	800174c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8001574:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	@ 0xd0
 8001578:	1911      	adds	r1, r2, r4
 800157a:	f143 0300 	adc.w	r3, r3, #0
 800157e:	2988      	cmp	r1, #136	@ 0x88
 8001580:	f173 0300 	sbcs.w	r3, r3, #0
 8001584:	d2e4      	bcs.n	8001550 <shake256+0x2c>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8001586:	4639      	mov	r1, r7
 8001588:	4623      	mov	r3, r4
 800158a:	a802      	add	r0, sp, #8
 800158c:	f000 f8b4 	bl	80016f8 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8001590:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8001592:	18e2      	adds	r2, r4, r3
 8001594:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8001596:	9234      	str	r2, [sp, #208]	@ 0xd0
 8001598:	f04f 011f 	mov.w	r1, #31
 800159c:	f143 0300 	adc.w	r3, r3, #0
 80015a0:	f88d 1007 	strb.w	r1, [sp, #7]
    if(s_inc[25] == r-1){
 80015a4:	f1a2 0187 	sub.w	r1, r2, #135	@ 0x87
 80015a8:	4319      	orrs	r1, r3
    s_inc[25] += mlen;
 80015aa:	9335      	str	r3, [sp, #212]	@ 0xd4
    if(s_inc[25] == r-1){
 80015ac:	d032      	beq.n	8001614 <shake256+0xf0>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80015ae:	2301      	movs	r3, #1
 80015b0:	f10d 0107 	add.w	r1, sp, #7
 80015b4:	a802      	add	r0, sp, #8
 80015b6:	f000 f89f 	bl	80016f8 <KeccakF1600_StateXORBytes>
      p = 128;
 80015ba:	2380      	movs	r3, #128	@ 0x80
 80015bc:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 80015c0:	f10d 0107 	add.w	r1, sp, #7
 80015c4:	2301      	movs	r3, #1
 80015c6:	2287      	movs	r2, #135	@ 0x87
 80015c8:	a802      	add	r0, sp, #8
 80015ca:	f000 f895 	bl	80016f8 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 80015ce:	2200      	movs	r2, #0
 80015d0:	2300      	movs	r3, #0
 80015d2:	e9cd 2334 	strd	r2, r3, [sp, #208]	@ 0xd0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80015d6:	4631      	mov	r1, r6
 80015d8:	2300      	movs	r3, #0
 80015da:	2288      	movs	r2, #136	@ 0x88
 80015dc:	a802      	add	r0, sp, #8
 80015de:	f000 f863 	bl	80016a8 <KeccakF1600_StateExtractBytes>
    while (outlen > 0) {
 80015e2:	b1a5      	cbz	r5, 800160e <shake256+0xea>
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 80015e4:	2700      	movs	r7, #0
        KeccakF1600_StatePermute(s_inc);
 80015e6:	a802      	add	r0, sp, #8
 80015e8:	f000 f8b0 	bl	800174c <KeccakF1600_StatePermute>
        if(outlen < r)
 80015ec:	2d88      	cmp	r5, #136	@ 0x88
 80015ee:	462c      	mov	r4, r5
 80015f0:	bf28      	it	cs
 80015f2:	2488      	movcs	r4, #136	@ 0x88
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 80015f4:	4623      	mov	r3, r4
 80015f6:	4631      	mov	r1, r6
 80015f8:	2200      	movs	r2, #0
 80015fa:	a802      	add	r0, sp, #8
 80015fc:	f000 f854 	bl	80016a8 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8001600:	f1c4 0388 	rsb	r3, r4, #136	@ 0x88
    while (outlen > 0) {
 8001604:	1b2d      	subs	r5, r5, r4
        s_inc[25] = r - len;
 8001606:	e9cd 3734 	strd	r3, r7, [sp, #208]	@ 0xd0
        h += len;
 800160a:	4426      	add	r6, r4
    while (outlen > 0) {
 800160c:	d1eb      	bne.n	80015e6 <shake256+0xc2>
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800160e:	b037      	add	sp, #220	@ 0xdc
 8001610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p |= 128;
 8001614:	229f      	movs	r2, #159	@ 0x9f
 8001616:	f88d 2007 	strb.w	r2, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 800161a:	2301      	movs	r3, #1
 800161c:	2287      	movs	r2, #135	@ 0x87
 800161e:	f10d 0107 	add.w	r1, sp, #7
 8001622:	a802      	add	r0, sp, #8
 8001624:	f000 f868 	bl	80016f8 <KeccakF1600_StateXORBytes>
 8001628:	e7d1      	b.n	80015ce <shake256+0xaa>
 800162a:	bf00      	nop

0800162c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800162c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162e:	2200      	movs	r2, #0
{
 8001630:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001632:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8001636:	e9cd 2206 	strd	r2, r2, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800163a:	4b19      	ldr	r3, [pc, #100]	@ (80016a0 <MX_GPIO_Init+0x74>)
 800163c:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163e:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001640:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001642:	4c18      	ldr	r4, [pc, #96]	@ (80016a4 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001644:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8001648:	6319      	str	r1, [r3, #48]	@ 0x30
 800164a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800164c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8001650:	9101      	str	r1, [sp, #4]
 8001652:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001654:	9202      	str	r2, [sp, #8]
 8001656:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001658:	f041 0104 	orr.w	r1, r1, #4
 800165c:	6319      	str	r1, [r3, #48]	@ 0x30
 800165e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001660:	f001 0104 	and.w	r1, r1, #4
 8001664:	9102      	str	r1, [sp, #8]
 8001666:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001668:	9203      	str	r2, [sp, #12]
 800166a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800166c:	f041 0101 	orr.w	r1, r1, #1
 8001670:	6319      	str	r1, [r3, #48]	@ 0x30
 8001672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001674:	f003 0301 	and.w	r3, r3, #1
 8001678:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800167a:	4620      	mov	r0, r4
 800167c:	210f      	movs	r1, #15
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800167e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8001680:	f003 fc6e 	bl	8004f60 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001684:	220f      	movs	r2, #15
 8001686:	2301      	movs	r3, #1
 8001688:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800168c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800168e:	2200      	movs	r2, #0
 8001690:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001692:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001694:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001698:	f003 fa78 	bl	8004b8c <HAL_GPIO_Init>

}
 800169c:	b00a      	add	sp, #40	@ 0x28
 800169e:	bd10      	pop	{r4, pc}
 80016a0:	40023800 	.word	0x40023800
 80016a4:	40020800 	.word	0x40020800

080016a8 <KeccakF1600_StateExtractBytes>:
};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset, unsigned int length)
{
    unsigned int i;
    for(i=0;i<length;i++)
 80016a8:	b323      	cbz	r3, 80016f4 <KeccakF1600_StateExtractBytes+0x4c>
 80016aa:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 80016ae:	1a52      	subs	r2, r2, r1
{
 80016b0:	b570      	push	{r4, r5, r6, lr}
 80016b2:	eb0c 0603 	add.w	r6, ip, r3
    {
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
 80016b6:	1c55      	adds	r5, r2, #1
 80016b8:	eb05 030c 	add.w	r3, r5, ip
 80016bc:	f023 0207 	bic.w	r2, r3, #7
 80016c0:	08d9      	lsrs	r1, r3, #3
 80016c2:	4402      	add	r2, r0
 80016c4:	f003 0307 	and.w	r3, r3, #7
 80016c8:	6854      	ldr	r4, [r2, #4]
 80016ca:	f850 2031 	ldr.w	r2, [r0, r1, lsl #3]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	f1c3 0e20 	rsb	lr, r3, #32
 80016d4:	f1a3 0120 	sub.w	r1, r3, #32
 80016d8:	fa04 fe0e 	lsl.w	lr, r4, lr
 80016dc:	fa22 f303 	lsr.w	r3, r2, r3
 80016e0:	ea43 030e 	orr.w	r3, r3, lr
 80016e4:	fa24 f101 	lsr.w	r1, r4, r1
 80016e8:	430b      	orrs	r3, r1
 80016ea:	f80c 3f01 	strb.w	r3, [ip, #1]!
    for(i=0;i<length;i++)
 80016ee:	4566      	cmp	r6, ip
 80016f0:	d1e2      	bne.n	80016b8 <KeccakF1600_StateExtractBytes+0x10>
    }
}
 80016f2:	bd70      	pop	{r4, r5, r6, pc}
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop

080016f8 <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
    unsigned int i;
    for(i = 0; i < length; i++)
 80016f8:	b33b      	cbz	r3, 800174a <KeccakF1600_StateXORBytes+0x52>
{
 80016fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016fc:	1a52      	subs	r2, r2, r1
 80016fe:	1e4c      	subs	r4, r1, #1
 8001700:	18e6      	adds	r6, r4, r3
    {
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 8001702:	1c55      	adds	r5, r2, #1
 8001704:	192b      	adds	r3, r5, r4
 8001706:	f003 0c07 	and.w	ip, r3, #7
 800170a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 800170e:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 8001712:	f023 0e07 	bic.w	lr, r3, #7
 8001716:	f1ac 0220 	sub.w	r2, ip, #32
 800171a:	08db      	lsrs	r3, r3, #3
 800171c:	f1cc 0720 	rsb	r7, ip, #32
 8001720:	fa21 f707 	lsr.w	r7, r1, r7
 8001724:	fa01 f202 	lsl.w	r2, r1, r2
 8001728:	4486      	add	lr, r0
 800172a:	433a      	orrs	r2, r7
 800172c:	f850 7033 	ldr.w	r7, [r0, r3, lsl #3]
 8001730:	fa01 f10c 	lsl.w	r1, r1, ip
 8001734:	4079      	eors	r1, r7
 8001736:	f8de 7004 	ldr.w	r7, [lr, #4]
 800173a:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
 800173e:	407a      	eors	r2, r7
    for(i = 0; i < length; i++)
 8001740:	42a6      	cmp	r6, r4
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 8001742:	f8ce 2004 	str.w	r2, [lr, #4]
    for(i = 0; i < length; i++)
 8001746:	d1dd      	bne.n	8001704 <KeccakF1600_StateXORBytes+0xc>
    }
}
 8001748:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800174a:	4770      	bx	lr

0800174c <KeccakF1600_StatePermute>:

void KeccakF1600_StatePermute(uint64_t * state)
{
 800174c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001750:	b0bf      	sub	sp, #252	@ 0xfc
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 8001752:	6803      	ldr	r3, [r0, #0]
 8001754:	9306      	str	r3, [sp, #24]
 8001756:	6843      	ldr	r3, [r0, #4]
 8001758:	9307      	str	r3, [sp, #28]
        Abe = state[ 1];
 800175a:	6883      	ldr	r3, [r0, #8]
 800175c:	9308      	str	r3, [sp, #32]
 800175e:	68c3      	ldr	r3, [r0, #12]
 8001760:	9309      	str	r3, [sp, #36]	@ 0x24
        Abi = state[ 2];
 8001762:	4b35      	ldr	r3, [pc, #212]	@ (8001838 <KeccakF1600_StatePermute+0xec>)
 8001764:	9300      	str	r3, [sp, #0]
 8001766:	6903      	ldr	r3, [r0, #16]
 8001768:	930a      	str	r3, [sp, #40]	@ 0x28
 800176a:	6943      	ldr	r3, [r0, #20]
 800176c:	9302      	str	r3, [sp, #8]
        Abo = state[ 3];
 800176e:	6983      	ldr	r3, [r0, #24]
 8001770:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001772:	69c3      	ldr	r3, [r0, #28]
 8001774:	930c      	str	r3, [sp, #48]	@ 0x30
        Abu = state[ 4];
 8001776:	6a03      	ldr	r3, [r0, #32]
 8001778:	930d      	str	r3, [sp, #52]	@ 0x34
 800177a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800177c:	9303      	str	r3, [sp, #12]
        Aga = state[ 5];
 800177e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8001780:	930e      	str	r3, [sp, #56]	@ 0x38
 8001782:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8001784:	930f      	str	r3, [sp, #60]	@ 0x3c
        Age = state[ 6];
 8001786:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8001788:	9310      	str	r3, [sp, #64]	@ 0x40
        Agi = state[ 7];
 800178a:	e9d0 320d 	ldrd	r3, r2, [r0, #52]	@ 0x34
 800178e:	9204      	str	r2, [sp, #16]
 8001790:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8001792:	9211      	str	r2, [sp, #68]	@ 0x44
        Ago = state[ 8];
 8001794:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8001796:	9212      	str	r2, [sp, #72]	@ 0x48
 8001798:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800179a:	9213      	str	r2, [sp, #76]	@ 0x4c
        Agu = state[ 9];
 800179c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800179e:	9214      	str	r2, [sp, #80]	@ 0x50
 80017a0:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 80017a2:	9215      	str	r2, [sp, #84]	@ 0x54
        Aka = state[10];
 80017a4:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 80017a6:	9216      	str	r2, [sp, #88]	@ 0x58
 80017a8:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 80017aa:	9217      	str	r2, [sp, #92]	@ 0x5c
        Ake = state[11];
 80017ac:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 80017ae:	9218      	str	r2, [sp, #96]	@ 0x60
 80017b0:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 80017b2:	9205      	str	r2, [sp, #20]
        Aki = state[12];
 80017b4:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80017b6:	9219      	str	r2, [sp, #100]	@ 0x64
 80017b8:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 80017ba:	921a      	str	r2, [sp, #104]	@ 0x68
        Ako = state[13];
 80017bc:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 80017be:	921b      	str	r2, [sp, #108]	@ 0x6c
 80017c0:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 80017c2:	921c      	str	r2, [sp, #112]	@ 0x70
        Aku = state[14];
 80017c4:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 80017c6:	921d      	str	r2, [sp, #116]	@ 0x74
 80017c8:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 80017ca:	921e      	str	r2, [sp, #120]	@ 0x78
        Ama = state[15];
 80017cc:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 80017ce:	921f      	str	r2, [sp, #124]	@ 0x7c
        Ame = state[16];
 80017d0:	e9d0 a21f 	ldrd	sl, r2, [r0, #124]	@ 0x7c
 80017d4:	9220      	str	r2, [sp, #128]	@ 0x80
 80017d6:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 80017da:	9221      	str	r2, [sp, #132]	@ 0x84
        Ami = state[17];
 80017dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 80017e0:	9222      	str	r2, [sp, #136]	@ 0x88
 80017e2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 80017e6:	9223      	str	r2, [sp, #140]	@ 0x8c
        Amo = state[18];
 80017e8:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 80017ec:	9224      	str	r2, [sp, #144]	@ 0x90
 80017ee:	f8d0 2094 	ldr.w	r2, [r0, #148]	@ 0x94
 80017f2:	9225      	str	r2, [sp, #148]	@ 0x94
        Amu = state[19];
 80017f4:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
 80017f8:	9226      	str	r2, [sp, #152]	@ 0x98
 80017fa:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 80017fe:	9227      	str	r2, [sp, #156]	@ 0x9c
        Asa = state[20];
        Ase = state[21];
 8001800:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 8001804:	9228      	str	r2, [sp, #160]	@ 0xa0
 8001806:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 800180a:	9229      	str	r2, [sp, #164]	@ 0xa4
        Asi = state[22];
 800180c:	e9d0 212c 	ldrd	r2, r1, [r0, #176]	@ 0xb0
 8001810:	912a      	str	r1, [sp, #168]	@ 0xa8
        Aso = state[23];
 8001812:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8001816:	912b      	str	r1, [sp, #172]	@ 0xac
 8001818:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 800181c:	912c      	str	r1, [sp, #176]	@ 0xb0
        Asu = state[24];
 800181e:	f8d0 10c0 	ldr.w	r1, [r0, #192]	@ 0xc0
 8001822:	912d      	str	r1, [sp, #180]	@ 0xb4
        Asa = state[20];
 8001824:	e9d0 9728 	ldrd	r9, r7, [r0, #160]	@ 0xa0
        Asu = state[24];
 8001828:	f8d0 10c4 	ldr.w	r1, [r0, #196]	@ 0xc4
 800182c:	912e      	str	r1, [sp, #184]	@ 0xb8

        for( round = 0; round < NROUNDS; round += 2 )
 800182e:	903d      	str	r0, [sp, #244]	@ 0xf4
 8001830:	469b      	mov	fp, r3
 8001832:	4690      	mov	r8, r2
 8001834:	e002      	b.n	800183c <KeccakF1600_StatePermute+0xf0>
 8001836:	bf00      	nop
 8001838:	08005d88 	.word	0x08005d88
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 800183c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800183e:	9b06      	ldr	r3, [sp, #24]
 8001840:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8001842:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8001844:	9d07      	ldr	r5, [sp, #28]
 8001846:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8001848:	4053      	eors	r3, r2
 800184a:	4043      	eors	r3, r0
 800184c:	4063      	eors	r3, r4
 800184e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
            BCe = Abe^Age^Ake^Ame^Ase;
 8001850:	9808      	ldr	r0, [sp, #32]
 8001852:	9c10      	ldr	r4, [sp, #64]	@ 0x40
            BCa = Aba^Aga^Aka^Ama^Asa;
 8001854:	ea83 0309 	eor.w	r3, r3, r9
 8001858:	932f      	str	r3, [sp, #188]	@ 0xbc
 800185a:	ea85 0306 	eor.w	r3, r5, r6
 800185e:	4053      	eors	r3, r2
 8001860:	ea83 030a 	eor.w	r3, r3, sl
 8001864:	ea83 0607 	eor.w	r6, r3, r7
            BCe = Abe^Age^Ake^Ame^Ase;
 8001868:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 800186a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
            BCa = Aba^Aga^Aka^Ama^Asa;
 800186c:	9630      	str	r6, [sp, #192]	@ 0xc0
            BCe = Abe^Age^Ake^Ame^Ase;
 800186e:	ea80 0604 	eor.w	r6, r0, r4
 8001872:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8001874:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8001876:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8001878:	406e      	eors	r6, r5
 800187a:	9d05      	ldr	r5, [sp, #20]
 800187c:	ea84 0c0b 	eor.w	ip, r4, fp
 8001880:	4056      	eors	r6, r2
 8001882:	4046      	eors	r6, r0
 8001884:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
            BCi = Abi^Agi^Aki^Ami^Asi;
 8001886:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8001888:	9c04      	ldr	r4, [sp, #16]
            BCe = Abe^Age^Ake^Ame^Ase;
 800188a:	ea8c 0c05 	eor.w	ip, ip, r5
 800188e:	ea8c 0c03 	eor.w	ip, ip, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 8001892:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8001894:	9b22      	ldr	r3, [sp, #136]	@ 0x88
            BCe = Abe^Age^Ake^Ame^Ase;
 8001896:	ea8c 0c02 	eor.w	ip, ip, r2
            BCi = Abi^Agi^Aki^Ami^Asi;
 800189a:	ea80 0104 	eor.w	r1, r0, r4
 800189e:	9a02      	ldr	r2, [sp, #8]
 80018a0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80018a2:	4069      	eors	r1, r5
 80018a4:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 80018a6:	ea82 0400 	eor.w	r4, r2, r0
 80018aa:	4059      	eors	r1, r3
 80018ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80018ae:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
            BCo = Abo^Ago^Ako^Amo^Aso;
 80018b0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
            BCi = Abi^Agi^Aki^Ami^Asi;
 80018b2:	406c      	eors	r4, r5
            BCo = Abo^Ago^Ako^Amo^Aso;
 80018b4:	9d12      	ldr	r5, [sp, #72]	@ 0x48
            BCi = Abi^Agi^Aki^Ami^Asi;
 80018b6:	405c      	eors	r4, r3
            BCo = Abo^Ago^Ako^Amo^Aso;
 80018b8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
            BCi = Abi^Agi^Aki^Ami^Asi;
 80018ba:	4054      	eors	r4, r2
 80018bc:	ea81 0108 	eor.w	r1, r1, r8
            BCo = Abo^Ago^Ako^Amo^Aso;
 80018c0:	ea80 0205 	eor.w	r2, r0, r5
 80018c4:	9824      	ldr	r0, [sp, #144]	@ 0x90
            BCi = Abi^Agi^Aki^Ami^Asi;
 80018c6:	9101      	str	r1, [sp, #4]
            BCo = Abo^Ago^Ako^Amo^Aso;
 80018c8:	405a      	eors	r2, r3
 80018ca:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 80018cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            BCu = Abu^Agu^Aku^Amu^Asu;
 80018ce:	9915      	ldr	r1, [sp, #84]	@ 0x54
            BCo = Abo^Ago^Ako^Amo^Aso;
 80018d0:	4042      	eors	r2, r0
 80018d2:	406a      	eors	r2, r5
 80018d4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80018d6:	9825      	ldr	r0, [sp, #148]	@ 0x94
 80018d8:	405d      	eors	r5, r3
 80018da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80018dc:	405d      	eors	r5, r3
 80018de:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80018e0:	4045      	eors	r5, r0
 80018e2:	405d      	eors	r5, r3
            BCu = Abu^Agu^Aku^Amu^Asu;
 80018e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80018e6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80018e8:	4043      	eors	r3, r0
 80018ea:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80018ec:	4043      	eors	r3, r0
 80018ee:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80018f0:	4043      	eors	r3, r0
 80018f2:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 80018f4:	4043      	eors	r3, r0
 80018f6:	9803      	ldr	r0, [sp, #12]
 80018f8:	4048      	eors	r0, r1
 80018fa:	991e      	ldr	r1, [sp, #120]	@ 0x78
 80018fc:	4048      	eors	r0, r1
 80018fe:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8001900:	4048      	eors	r0, r1
 8001902:	992e      	ldr	r1, [sp, #184]	@ 0xb8

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8001904:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 8001908:	4048      	eors	r0, r1
            Da = BCu^ROL(BCe, 1);
 800190a:	ea4e 7ed6 	orr.w	lr, lr, r6, lsr #31
 800190e:	ea8e 0e00 	eor.w	lr, lr, r0
            BCe = ROL(Agi,  6);
            Ako ^= Do;
            BCi = ROL(Ako, 25);
            Amu ^= Du;
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 8001912:	ea8e 0707 	eor.w	r7, lr, r7
 8001916:	9731      	str	r7, [sp, #196]	@ 0xc4
            Aba ^= Da;
 8001918:	9f07      	ldr	r7, [sp, #28]
            Aka ^= Da;
 800191a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
            Aba ^= Da;
 800191c:	ea8e 0707 	eor.w	r7, lr, r7
 8001920:	9707      	str	r7, [sp, #28]
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
 8001922:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8001924:	ea8e 0707 	eor.w	r7, lr, r7
            Aka ^= Da;
 8001928:	ea8e 0101 	eor.w	r1, lr, r1
            Aga ^= Da;
 800192c:	9733      	str	r7, [sp, #204]	@ 0xcc
            Da = BCu^ROL(BCe, 1);
 800192e:	0077      	lsls	r7, r6, #1
            Aka ^= Da;
 8001930:	9117      	str	r1, [sp, #92]	@ 0x5c
            Da = BCu^ROL(BCe, 1);
 8001932:	ea47 77dc 	orr.w	r7, r7, ip, lsr #31
            Aka ^= Da;
 8001936:	9916      	ldr	r1, [sp, #88]	@ 0x58
            Da = BCu^ROL(BCe, 1);
 8001938:	405f      	eors	r7, r3
            BCa = ROL(Abi, 62);
            Ago ^= Do;
            BCe = ROL(Ago, 55);
            Aku ^= Du;
            BCi = ROL(Aku, 39);
            Ama ^= Da;
 800193a:	ea8e 0e0a 	eor.w	lr, lr, sl
 800193e:	f8cd e0e4 	str.w	lr, [sp, #228]	@ 0xe4
            Aka ^= Da;
 8001942:	ea87 0e01 	eor.w	lr, r7, r1
            Aba ^= Da;
 8001946:	9906      	ldr	r1, [sp, #24]
            Aka ^= Da;
 8001948:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
            Asa ^= Da;
 800194c:	ea87 0e09 	eor.w	lr, r7, r9
 8001950:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
            Aba ^= Da;
 8001954:	ea87 0e01 	eor.w	lr, r7, r1
            Aga ^= Da;
 8001958:	990e      	ldr	r1, [sp, #56]	@ 0x38
            Aba ^= Da;
 800195a:	f8cd e018 	str.w	lr, [sp, #24]
            Aga ^= Da;
 800195e:	ea87 0e01 	eor.w	lr, r7, r1
            Ama ^= Da;
 8001962:	991f      	ldr	r1, [sp, #124]	@ 0x7c
            Aga ^= Da;
 8001964:	f8cd e0c8 	str.w	lr, [sp, #200]	@ 0xc8
            Ama ^= Da;
 8001968:	ea87 0e01 	eor.w	lr, r7, r1
 800196c:	f8cd e0e0 	str.w	lr, [sp, #224]	@ 0xe0
            De = BCa^ROL(BCi, 1);
 8001970:	9901      	ldr	r1, [sp, #4]
 8001972:	0067      	lsls	r7, r4, #1
 8001974:	ea47 77d1 	orr.w	r7, r7, r1, lsr #31
 8001978:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 800197a:	404f      	eors	r7, r1
            Ame ^= De;
 800197c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800197e:	ea87 0e01 	eor.w	lr, r7, r1
            Abe ^= De;
 8001982:	9909      	ldr	r1, [sp, #36]	@ 0x24
            Ame ^= De;
 8001984:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
            Abe ^= De;
 8001988:	ea87 0e01 	eor.w	lr, r7, r1
            Ake ^= De;
 800198c:	9905      	ldr	r1, [sp, #20]
            Abe ^= De;
 800198e:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
            Ake ^= De;
 8001992:	ea87 0e01 	eor.w	lr, r7, r1
            BCo = ROL(Ama, 41);
            Ase ^= De;
 8001996:	9929      	ldr	r1, [sp, #164]	@ 0xa4
            Ake ^= De;
 8001998:	f8cd e0d0 	str.w	lr, [sp, #208]	@ 0xd0
            Ase ^= De;
 800199c:	ea87 0e01 	eor.w	lr, r7, r1
            De = BCa^ROL(BCi, 1);
 80019a0:	9901      	ldr	r1, [sp, #4]
            Ase ^= De;
 80019a2:	f8cd e0ec 	str.w	lr, [sp, #236]	@ 0xec
            Age ^= De;
 80019a6:	ea87 0b0b 	eor.w	fp, r7, fp
            De = BCa^ROL(BCi, 1);
 80019aa:	004f      	lsls	r7, r1, #1
 80019ac:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 80019ae:	ea47 77d4 	orr.w	r7, r7, r4, lsr #31
 80019b2:	404f      	eors	r7, r1
            Age ^= De;
 80019b4:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80019b6:	ea87 0a01 	eor.w	sl, r7, r1
            Ame ^= De;
 80019ba:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80019bc:	ea87 0e01 	eor.w	lr, r7, r1
            Abe ^= De;
 80019c0:	9908      	ldr	r1, [sp, #32]
            Ame ^= De;
 80019c2:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
            Abe ^= De;
 80019c6:	ea87 0e01 	eor.w	lr, r7, r1
            Ake ^= De;
 80019ca:	9918      	ldr	r1, [sp, #96]	@ 0x60
            Abe ^= De;
 80019cc:	f8cd e014 	str.w	lr, [sp, #20]
            Ake ^= De;
 80019d0:	ea87 0e01 	eor.w	lr, r7, r1
            Ase ^= De;
 80019d4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
            Ake ^= De;
 80019d6:	f8cd e0a4 	str.w	lr, [sp, #164]	@ 0xa4
            Ase ^= De;
 80019da:	ea87 0e01 	eor.w	lr, r7, r1
            Di = BCe^ROL(BCo, 1);
 80019de:	006f      	lsls	r7, r5, #1
            Aki ^= Di;
 80019e0:	991a      	ldr	r1, [sp, #104]	@ 0x68
            Ase ^= De;
 80019e2:	f8cd e0e8 	str.w	lr, [sp, #232]	@ 0xe8
            Di = BCe^ROL(BCo, 1);
 80019e6:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 80019ea:	ea87 070c 	eor.w	r7, r7, ip
            Aki ^= Di;
 80019ee:	ea87 0901 	eor.w	r9, r7, r1
            Asi ^= Di;
 80019f2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80019f4:	ea87 0c01 	eor.w	ip, r7, r1
            Agi ^= Di;
 80019f8:	9911      	ldr	r1, [sp, #68]	@ 0x44
            Asi ^= Di;
 80019fa:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
            Agi ^= Di;
 80019fe:	ea87 0c01 	eor.w	ip, r7, r1
            Ami ^= Di;
 8001a02:	9923      	ldr	r1, [sp, #140]	@ 0x8c
            Agi ^= Di;
 8001a04:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
            Ami ^= Di;
 8001a08:	ea87 0c01 	eor.w	ip, r7, r1
            Abi ^= Di;
 8001a0c:	9902      	ldr	r1, [sp, #8]
            Ami ^= Di;
 8001a0e:	f8cd c0a8 	str.w	ip, [sp, #168]	@ 0xa8
            Abi ^= Di;
 8001a12:	ea87 0c01 	eor.w	ip, r7, r1
            Di = BCe^ROL(BCo, 1);
 8001a16:	0057      	lsls	r7, r2, #1
 8001a18:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 8001a1c:	407e      	eors	r6, r7
            Aki ^= Di;
 8001a1e:	9f19      	ldr	r7, [sp, #100]	@ 0x64
            Abi ^= Di;
 8001a20:	f8cd c0d8 	str.w	ip, [sp, #216]	@ 0xd8
            Asi ^= Di;
 8001a24:	ea86 0e08 	eor.w	lr, r6, r8
            Aki ^= Di;
 8001a28:	ea86 0c07 	eor.w	ip, r6, r7
            Asi ^= Di;
 8001a2c:	f8cd e008 	str.w	lr, [sp, #8]
            Agi ^= Di;
 8001a30:	9f04      	ldr	r7, [sp, #16]
            Do = BCi^ROL(BCu, 1);
 8001a32:	9901      	ldr	r1, [sp, #4]
            Agi ^= Di;
 8001a34:	ea86 0e07 	eor.w	lr, r6, r7
            Ami ^= Di;
 8001a38:	9f22      	ldr	r7, [sp, #136]	@ 0x88
            Agi ^= Di;
 8001a3a:	f8cd e020 	str.w	lr, [sp, #32]
            Ami ^= Di;
 8001a3e:	ea86 0e07 	eor.w	lr, r6, r7
            Abi ^= Di;
 8001a42:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
            Ami ^= Di;
 8001a44:	f8cd e0a0 	str.w	lr, [sp, #160]	@ 0xa0
            Abi ^= Di;
 8001a48:	ea86 0e07 	eor.w	lr, r6, r7
            Do = BCi^ROL(BCu, 1);
 8001a4c:	0046      	lsls	r6, r0, #1
 8001a4e:	ea46 76d3 	orr.w	r6, r6, r3, lsr #31
 8001a52:	4066      	eors	r6, r4
            Amo ^= Do;
 8001a54:	9c25      	ldr	r4, [sp, #148]	@ 0x94
            Ako ^= Do;
 8001a56:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
            Abi ^= Di;
 8001a58:	f8cd e0d4 	str.w	lr, [sp, #212]	@ 0xd4
            Do = BCi^ROL(BCu, 1);
 8001a5c:	005b      	lsls	r3, r3, #1
            Amo ^= Do;
 8001a5e:	ea86 0804 	eor.w	r8, r6, r4
            Do = BCi^ROL(BCu, 1);
 8001a62:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
            Abo ^= Do;
 8001a66:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
            Amo ^= Do;
 8001a68:	9824      	ldr	r0, [sp, #144]	@ 0x90
            Do = BCi^ROL(BCu, 1);
 8001a6a:	404b      	eors	r3, r1
            Abo ^= Do;
 8001a6c:	ea83 0104 	eor.w	r1, r3, r4
 8001a70:	9101      	str	r1, [sp, #4]
            Ako ^= Do;
 8001a72:	991c      	ldr	r1, [sp, #112]	@ 0x70
            Abo ^= Do;
 8001a74:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
            Ako ^= Do;
 8001a76:	ea83 0e07 	eor.w	lr, r3, r7
            Aso ^= Do;
 8001a7a:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
            Ako ^= Do;
 8001a7c:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 8001a80:	ea86 0e01 	eor.w	lr, r6, r1
 8001a84:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
            Aso ^= Do;
 8001a88:	ea83 0e07 	eor.w	lr, r3, r7
            Ago ^= Do;
 8001a8c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
            Aso ^= Do;
 8001a8e:	f8cd e094 	str.w	lr, [sp, #148]	@ 0x94
            Amo ^= Do;
 8001a92:	4058      	eors	r0, r3
            Ago ^= Do;
 8001a94:	ea83 0e07 	eor.w	lr, r3, r7
            Aso ^= Do;
 8001a98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
            Ago ^= Do;
 8001a9a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8001a9c:	f8cd e0dc 	str.w	lr, [sp, #220]	@ 0xdc
            Aso ^= Do;
 8001aa0:	ea86 0e03 	eor.w	lr, r6, r3
            Abo ^= Do;
 8001aa4:	4074      	eors	r4, r6
            Du = BCo^ROL(BCa, 1);
 8001aa6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
            Aso ^= Do;
 8001aa8:	f8cd e0ac 	str.w	lr, [sp, #172]	@ 0xac
            Ago ^= Do;
 8001aac:	ea86 0e07 	eor.w	lr, r6, r7
            Du = BCo^ROL(BCa, 1);
 8001ab0:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
            Ago ^= Do;
 8001ab2:	f8cd e0b0 	str.w	lr, [sp, #176]	@ 0xb0
            Du = BCo^ROL(BCa, 1);
 8001ab6:	005f      	lsls	r7, r3, #1
 8001ab8:	ea4f 0e46 	mov.w	lr, r6, lsl #1
            Amu ^= Du;
 8001abc:	9926      	ldr	r1, [sp, #152]	@ 0x98
            Du = BCo^ROL(BCa, 1);
 8001abe:	ea4e 7ed3 	orr.w	lr, lr, r3, lsr #31
 8001ac2:	ea47 77d6 	orr.w	r7, r7, r6, lsr #31
 8001ac6:	ea8e 0e05 	eor.w	lr, lr, r5
 8001aca:	4057      	eors	r7, r2
            Asu ^= Du;
 8001acc:	9d2d      	ldr	r5, [sp, #180]	@ 0xb4
            Agu ^= Du;
 8001ace:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            Amu ^= Du;
 8001ad0:	4079      	eors	r1, r7
            Asu ^= Du;
 8001ad2:	ea87 0605 	eor.w	r6, r7, r5
            Agu ^= Du;
 8001ad6:	ea87 0203 	eor.w	r2, r7, r3
            Asu ^= Du;
 8001ada:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
            Agu ^= Du;
 8001adc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
            Amu ^= Du;
 8001ade:	9113      	str	r1, [sp, #76]	@ 0x4c
 8001ae0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8001ae2:	ea8e 0101 	eor.w	r1, lr, r1
 8001ae6:	910a      	str	r1, [sp, #40]	@ 0x28
            Abu ^= Du;
 8001ae8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8001aea:	4079      	eors	r1, r7
 8001aec:	9123      	str	r1, [sp, #140]	@ 0x8c
            Aku ^= Du;
 8001aee:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8001af0:	404f      	eors	r7, r1
 8001af2:	9726      	str	r7, [sp, #152]	@ 0x98
            Abu ^= Du;
 8001af4:	9f03      	ldr	r7, [sp, #12]
            Aku ^= Du;
 8001af6:	991e      	ldr	r1, [sp, #120]	@ 0x78
            Abu ^= Du;
 8001af8:	ea8e 0707 	eor.w	r7, lr, r7
 8001afc:	9724      	str	r7, [sp, #144]	@ 0x90
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001afe:	9f00      	ldr	r7, [sp, #0]
            Asu ^= Du;
 8001b00:	ea8e 0505 	eor.w	r5, lr, r5
            Agu ^= Du;
 8001b04:	ea8e 0303 	eor.w	r3, lr, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001b08:	683f      	ldr	r7, [r7, #0]
            Aku ^= Du;
 8001b0a:	ea8e 0e01 	eor.w	lr, lr, r1
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001b0e:	9906      	ldr	r1, [sp, #24]
            Aku ^= Du;
 8001b10:	f8cd e09c 	str.w	lr, [sp, #156]	@ 0x9c
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001b14:	ea81 0e07 	eor.w	lr, r1, r7
 8001b18:	9f00      	ldr	r7, [sp, #0]
 8001b1a:	9907      	ldr	r1, [sp, #28]
 8001b1c:	687f      	ldr	r7, [r7, #4]
 8001b1e:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8001b22:	ea81 0e07 	eor.w	lr, r1, r7
            BCe = ROL(Age, 44);
 8001b26:	ea4f 571b 	mov.w	r7, fp, lsr #20
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001b2a:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
            BCe = ROL(Age, 44);
 8001b2e:	ea4f 5e1a 	mov.w	lr, sl, lsr #20
 8001b32:	ea47 3a0a 	orr.w	sl, r7, sl, lsl #12
 8001b36:	f8cd a00c 	str.w	sl, [sp, #12]
            BCi = ROL(Aki, 43);
 8001b3a:	ea4f 5a5c 	mov.w	sl, ip, lsr #21
 8001b3e:	ea4a 2ac9 	orr.w	sl, sl, r9, lsl #11
 8001b42:	ea4f 5959 	mov.w	r9, r9, lsr #21
 8001b46:	ea49 2ccc 	orr.w	ip, r9, ip, lsl #11
            BCu = ROL(Asu, 14);
 8001b4a:	ea4f 3985 	mov.w	r9, r5, lsl #14
 8001b4e:	ea49 4996 	orr.w	r9, r9, r6, lsr #18
            BCa = ROL(Abo, 28);
 8001b52:	9901      	ldr	r1, [sp, #4]
            BCi = ROL(Aki, 43);
 8001b54:	f8cd c010 	str.w	ip, [sp, #16]
            BCu = ROL(Asu, 14);
 8001b58:	03b6      	lsls	r6, r6, #14
            BCo = ROL(Amo, 21);
 8001b5a:	ea4f 5c48 	mov.w	ip, r8, lsl #21
            BCu = ROL(Asu, 14);
 8001b5e:	ea46 4695 	orr.w	r6, r6, r5, lsr #18
            BCo = ROL(Amo, 21);
 8001b62:	ea4c 2cd0 	orr.w	ip, ip, r0, lsr #11
            BCa = ROL(Abo, 28);
 8001b66:	0725      	lsls	r5, r4, #28
            BCo = ROL(Amo, 21);
 8001b68:	0540      	lsls	r0, r0, #21
 8001b6a:	ea40 20d8 	orr.w	r0, r0, r8, lsr #11
            BCa = ROL(Abo, 28);
 8001b6e:	ea45 1811 	orr.w	r8, r5, r1, lsr #4
 8001b72:	0709      	lsls	r1, r1, #28
 8001b74:	ea41 1114 	orr.w	r1, r1, r4, lsr #4
            BCe = ROL(Agu, 20);
 8001b78:	051c      	lsls	r4, r3, #20
            BCa = ROL(Abo, 28);
 8001b7a:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
            BCe = ROL(Agu, 20);
 8001b7e:	ea44 3812 	orr.w	r8, r4, r2, lsr #12
 8001b82:	0512      	lsls	r2, r2, #20
 8001b84:	ea42 3213 	orr.w	r2, r2, r3, lsr #12
 8001b88:	9210      	str	r2, [sp, #64]	@ 0x40
            BCi = ROL(Aka,  3);
 8001b8a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8001b8c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
            BCe = ROL(Agu, 20);
 8001b8e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
            BCi = ROL(Aka,  3);
 8001b92:	00d3      	lsls	r3, r2, #3
 8001b94:	ea43 7855 	orr.w	r8, r3, r5, lsr #29
 8001b98:	00ed      	lsls	r5, r5, #3
 8001b9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
            BCo = ROL(Ame, 45);
 8001b9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001ba0:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
            BCi = ROL(Aka,  3);
 8001ba2:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
            BCo = ROL(Ame, 45);
 8001ba6:	0cd7      	lsrs	r7, r2, #19
 8001ba8:	ea47 3743 	orr.w	r7, r7, r3, lsl #13
 8001bac:	0cdb      	lsrs	r3, r3, #19
 8001bae:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
            BCu = ROL(Asi, 61);
 8001bb2:	9a02      	ldr	r2, [sp, #8]
 8001bb4:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 8001bb8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8001bba:	ea48 7842 	orr.w	r8, r8, r2, lsl #29
 8001bbe:	08d4      	lsrs	r4, r2, #3
 8001bc0:	9a02      	ldr	r2, [sp, #8]
 8001bc2:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
 8001bc6:	9414      	str	r4, [sp, #80]	@ 0x50
            BCa = ROL(Abe,  1);
 8001bc8:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8001bca:	9a05      	ldr	r2, [sp, #20]
            BCe = ROL(Age, 44);
 8001bcc:	ea4e 3e0b 	orr.w	lr, lr, fp, lsl #12
            BCa = ROL(Abe,  1);
 8001bd0:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8001bd4:	ea4b 7bd2 	orr.w	fp, fp, r2, lsr #31
 8001bd8:	9a05      	ldr	r2, [sp, #20]
 8001bda:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8001bde:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8001be2:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
            BCe = ROL(Agi,  6);
 8001be6:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8001be8:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Abe,  1);
 8001bea:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
            BCe = ROL(Agi,  6);
 8001bee:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8001bf2:	ea4b 6b92 	orr.w	fp, fp, r2, lsr #26
 8001bf6:	9a08      	ldr	r2, [sp, #32]
 8001bf8:	f8cd b008 	str.w	fp, [sp, #8]
 8001bfc:	ea4f 1b82 	mov.w	fp, r2, lsl #6
            BCi = ROL(Ako, 25);
 8001c00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            BCe = ROL(Agi,  6);
 8001c02:	ea4b 6b94 	orr.w	fp, fp, r4, lsr #26
            BCi = ROL(Ako, 25);
 8001c06:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            BCe = ROL(Agi,  6);
 8001c08:	f8cd b004 	str.w	fp, [sp, #4]
            BCi = ROL(Ako, 25);
 8001c0c:	ea4f 6b42 	mov.w	fp, r2, lsl #25
 8001c10:	ea4b 1bd4 	orr.w	fp, fp, r4, lsr #7
 8001c14:	f8cd b078 	str.w	fp, [sp, #120]	@ 0x78
 8001c18:	ea4f 6b44 	mov.w	fp, r4, lsl #25
 8001c1c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
            BCo = ROL(Amu,  8);
 8001c1e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            BCi = ROL(Ako, 25);
 8001c20:	ea4b 1bd4 	orr.w	fp, fp, r4, lsr #7
            BCo = ROL(Amu,  8);
 8001c24:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
            BCi = ROL(Ako, 25);
 8001c26:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
            BCo = ROL(Amu,  8);
 8001c2a:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8001c2e:	ea4b 6b14 	orr.w	fp, fp, r4, lsr #24
 8001c32:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8001c34:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
 8001c38:	ea4f 2b04 	mov.w	fp, r4, lsl #8
            BCu = ROL(Asa, 18);
 8001c3c:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
            BCo = ROL(Amu,  8);
 8001c3e:	ea4b 6b12 	orr.w	fp, fp, r2, lsr #24
            BCu = ROL(Asa, 18);
 8001c42:	9a16      	ldr	r2, [sp, #88]	@ 0x58
            BCo = ROL(Amu,  8);
 8001c44:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
            BCu = ROL(Asa, 18);
 8001c48:	ea4f 4b84 	mov.w	fp, r4, lsl #18
 8001c4c:	ea4b 3b92 	orr.w	fp, fp, r2, lsr #14
 8001c50:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8001c52:	f8cd b068 	str.w	fp, [sp, #104]	@ 0x68
 8001c56:	ea4f 4b82 	mov.w	fp, r2, lsl #18
 8001c5a:	ea4b 3b94 	orr.w	fp, fp, r4, lsr #14
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001c5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            BCu = ROL(Asa, 18);
 8001c60:	f8cd b064 	str.w	fp, [sp, #100]	@ 0x64
            Eba =   BCa ^((~BCe)&  BCi );
 8001c64:	ea2a 0b0e 	bic.w	fp, sl, lr
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001c68:	ea82 0b0b 	eor.w	fp, r2, fp
            Eba =   BCa ^((~BCe)&  BCi );
 8001c6c:	e9dd 2403 	ldrd	r2, r4, [sp, #12]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001c70:	f8cd b014 	str.w	fp, [sp, #20]
            Eba =   BCa ^((~BCe)&  BCi );
 8001c74:	ea24 0b02 	bic.w	fp, r4, r2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8001c78:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8001c7a:	ea84 0b0b 	eor.w	fp, r4, fp
 8001c7e:	f8cd b020 	str.w	fp, [sp, #32]
            Ebe =   BCe ^((~BCi)&  BCo );
 8001c82:	ea20 0b0a 	bic.w	fp, r0, sl
 8001c86:	ea8b 0b0e 	eor.w	fp, fp, lr
 8001c8a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
            Ebu =   BCu ^((~BCa)&  BCe );
 8001c8e:	9a06      	ldr	r2, [sp, #24]
            Ebe =   BCe ^((~BCi)&  BCo );
 8001c90:	9c04      	ldr	r4, [sp, #16]
            Ebo =   BCo ^((~BCu)&  BCa );
 8001c92:	ea22 0b06 	bic.w	fp, r2, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 8001c96:	ea2e 0e02 	bic.w	lr, lr, r2
            Ebo =   BCo ^((~BCu)&  BCa );
 8001c9a:	ea8b 0b00 	eor.w	fp, fp, r0
            Ebe =   BCe ^((~BCi)&  BCo );
 8001c9e:	9a03      	ldr	r2, [sp, #12]
            Ebo =   BCo ^((~BCu)&  BCa );
 8001ca0:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
            Ebi =   BCi ^((~BCo)&  BCu );
 8001ca4:	ea26 0000 	bic.w	r0, r6, r0
            Ebu =   BCu ^((~BCa)&  BCe );
 8001ca8:	ea8e 0e06 	eor.w	lr, lr, r6
 8001cac:	9e07      	ldr	r6, [sp, #28]
 8001cae:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
            Ebi =   BCi ^((~BCo)&  BCu );
 8001cb2:	ea80 0a0a 	eor.w	sl, r0, sl
            Ebe =   BCe ^((~BCi)&  BCo );
 8001cb6:	ea2c 0004 	bic.w	r0, ip, r4
 8001cba:	ea80 0e02 	eor.w	lr, r0, r2
            Ebu =   BCu ^((~BCa)&  BCe );
 8001cbe:	ea22 0006 	bic.w	r0, r2, r6
            Ebo =   BCo ^((~BCu)&  BCa );
 8001cc2:	ea26 0609 	bic.w	r6, r6, r9
            Ega =   BCa ^((~BCe)&  BCi );
 8001cc6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            Ebe =   BCe ^((~BCi)&  BCo );
 8001cc8:	f8cd e018 	str.w	lr, [sp, #24]
            Ebo =   BCo ^((~BCu)&  BCa );
 8001ccc:	ea86 0e0c 	eor.w	lr, r6, ip
            Ebi =   BCi ^((~BCo)&  BCu );
 8001cd0:	ea29 0c0c 	bic.w	ip, r9, ip
 8001cd4:	ea8c 0c04 	eor.w	ip, ip, r4
 8001cd8:	f8cd c01c 	str.w	ip, [sp, #28]
            Ebu =   BCu ^((~BCa)&  BCe );
 8001cdc:	ea80 0c09 	eor.w	ip, r0, r9
            Ega =   BCa ^((~BCe)&  BCi );
 8001ce0:	ea25 0002 	bic.w	r0, r5, r2
 8001ce4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
            Ebu =   BCu ^((~BCa)&  BCe );
 8001ce6:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
            Ega =   BCa ^((~BCe)&  BCi );
 8001cea:	ea80 0c01 	eor.w	ip, r0, r1
 8001cee:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8001cf0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8001cf2:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8001cf6:	ea20 0006 	bic.w	r0, r0, r6
 8001cfa:	ea80 0c04 	eor.w	ip, r0, r4
            Ege =   BCe ^((~BCi)&  BCo );
 8001cfe:	ea27 0005 	bic.w	r0, r7, r5
            Ega =   BCa ^((~BCe)&  BCi );
 8001d02:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
            Ege =   BCe ^((~BCi)&  BCo );
 8001d06:	ea80 0c02 	eor.w	ip, r0, r2
            Egu =   BCu ^((~BCa)&  BCe );
 8001d0a:	ea22 0201 	bic.w	r2, r2, r1
            Ego =   BCo ^((~BCu)&  BCa );
 8001d0e:	ea21 0108 	bic.w	r1, r1, r8
            Ege =   BCe ^((~BCi)&  BCo );
 8001d12:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8001d14:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
            Ego =   BCo ^((~BCu)&  BCa );
 8001d18:	ea81 0c07 	eor.w	ip, r1, r7
            Egi =   BCi ^((~BCo)&  BCu );
 8001d1c:	ea28 0707 	bic.w	r7, r8, r7
            Ego =   BCo ^((~BCu)&  BCa );
 8001d20:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
            Egi =   BCi ^((~BCo)&  BCu );
 8001d24:	ea87 0c05 	eor.w	ip, r7, r5
            Ego =   BCo ^((~BCu)&  BCa );
 8001d28:	9d14      	ldr	r5, [sp, #80]	@ 0x50
            Egi =   BCi ^((~BCo)&  BCu );
 8001d2a:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
            Egu =   BCu ^((~BCa)&  BCe );
 8001d2e:	ea82 0c08 	eor.w	ip, r2, r8
            Ege =   BCe ^((~BCi)&  BCo );
 8001d32:	ea23 0200 	bic.w	r2, r3, r0
            Ego =   BCo ^((~BCu)&  BCa );
 8001d36:	ea24 0105 	bic.w	r1, r4, r5
            Egu =   BCu ^((~BCa)&  BCe );
 8001d3a:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
            Ege =   BCe ^((~BCi)&  BCo );
 8001d3e:	ea82 0c06 	eor.w	ip, r2, r6
 8001d42:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
            Ego =   BCo ^((~BCu)&  BCa );
 8001d46:	ea81 0c03 	eor.w	ip, r1, r3
            Egi =   BCi ^((~BCo)&  BCu );
 8001d4a:	ea25 0303 	bic.w	r3, r5, r3
            Egu =   BCu ^((~BCa)&  BCe );
 8001d4e:	ea26 0204 	bic.w	r2, r6, r4
            Ego =   BCo ^((~BCu)&  BCa );
 8001d52:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
            Eku =   BCu ^((~BCa)&  BCe );
 8001d56:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8001d58:	9919      	ldr	r1, [sp, #100]	@ 0x64
            Ebi =   BCi ^((~BCo)&  BCu );
 8001d5a:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
            Egi =   BCi ^((~BCo)&  BCu );
 8001d5e:	ea83 0c00 	eor.w	ip, r3, r0
            Eku =   BCu ^((~BCa)&  BCe );
 8001d62:	9801      	ldr	r0, [sp, #4]
            Egi =   BCi ^((~BCo)&  BCu );
 8001d64:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
            Eku =   BCu ^((~BCa)&  BCe );
 8001d68:	ea20 0306 	bic.w	r3, r0, r6
            Egu =   BCu ^((~BCa)&  BCe );
 8001d6c:	ea82 0c05 	eor.w	ip, r2, r5
 8001d70:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
            Eku =   BCu ^((~BCa)&  BCe );
 8001d74:	ea83 0c01 	eor.w	ip, r3, r1
            Ebo =   BCo ^((~BCu)&  BCa );
 8001d78:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
            Eku =   BCu ^((~BCa)&  BCe );
 8001d7c:	9902      	ldr	r1, [sp, #8]
 8001d7e:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8001d82:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
            BCa = ROL(Abu, 27);
 8001d84:	9a24      	ldr	r2, [sp, #144]	@ 0x90
            BCe = ROL(Aga, 36);
 8001d86:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
            BCu = ROL(Aso, 56);
 8001d88:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
            Eku =   BCu ^((~BCa)&  BCe );
 8001d8a:	ea21 0307 	bic.w	r3, r1, r7
 8001d8e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8001d90:	ea83 0c01 	eor.w	ip, r3, r1
            BCa = ROL(Abu, 27);
 8001d94:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
            Eku =   BCu ^((~BCa)&  BCe );
 8001d96:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
            BCa = ROL(Abu, 27);
 8001d9a:	ea4f 6ec2 	mov.w	lr, r2, lsl #27
 8001d9e:	ea4e 1e53 	orr.w	lr, lr, r3, lsr #5
 8001da2:	06d9      	lsls	r1, r3, #27
            BCe = ROL(Aga, 36);
 8001da4:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8001da6:	ea4f 7815 	mov.w	r8, r5, lsr #28
            BCa = ROL(Abu, 27);
 8001daa:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
            BCe = ROL(Aga, 36);
 8001dae:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
            BCi = ROL(Ake, 10);
 8001db2:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
            BCe = ROL(Aga, 36);
 8001db4:	0f1b      	lsrs	r3, r3, #28
 8001db6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
            BCi = ROL(Ake, 10);
 8001dba:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 8001dbc:	ea4f 2982 	mov.w	r9, r2, lsl #10
 8001dc0:	ea49 5995 	orr.w	r9, r9, r5, lsr #22
 8001dc4:	02ad      	lsls	r5, r5, #10
 8001dc6:	ea45 5292 	orr.w	r2, r5, r2, lsr #22
            BCo = ROL(Ami, 15);
 8001dca:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
            BCi = ROL(Ake, 10);
 8001dcc:	9203      	str	r2, [sp, #12]
            BCo = ROL(Ami, 15);
 8001dce:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 8001dd0:	ea4f 3cc5 	mov.w	ip, r5, lsl #15
 8001dd4:	ea4c 4c52 	orr.w	ip, ip, r2, lsr #17
 8001dd8:	03d2      	lsls	r2, r2, #15
 8001dda:	ea42 4255 	orr.w	r2, r2, r5, lsr #17
            BCu = ROL(Aso, 56);
 8001dde:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 8001de0:	ea4f 2a15 	mov.w	sl, r5, lsr #8
 8001de4:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
 8001de8:	0a24      	lsrs	r4, r4, #8
 8001dea:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
            Eka =   BCa ^((~BCe)&  BCi );
 8001dee:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
            BCu = ROL(Aso, 56);
 8001df0:	9424      	str	r4, [sp, #144]	@ 0x90
            Eko =   BCo ^((~BCu)&  BCa );
 8001df2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            Eka =   BCa ^((~BCe)&  BCi );
 8001df4:	ea25 0000 	bic.w	r0, r5, r0
 8001df8:	ea80 0b06 	eor.w	fp, r0, r6
            Eko =   BCo ^((~BCu)&  BCa );
 8001dfc:	ea26 0004 	bic.w	r0, r6, r4
            Eki =   BCi ^((~BCo)&  BCu );
 8001e00:	4626      	mov	r6, r4
 8001e02:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
            Eka =   BCa ^((~BCe)&  BCi );
 8001e04:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
            Eki =   BCi ^((~BCo)&  BCu );
 8001e08:	ea26 0604 	bic.w	r6, r6, r4
 8001e0c:	ea86 0b05 	eor.w	fp, r6, r5
            Eke =   BCe ^((~BCi)&  BCo );
 8001e10:	ea24 0605 	bic.w	r6, r4, r5
 8001e14:	9d01      	ldr	r5, [sp, #4]
            Eki =   BCi ^((~BCo)&  BCu );
 8001e16:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
            Eke =   BCe ^((~BCi)&  BCo );
 8001e1a:	ea86 0b05 	eor.w	fp, r6, r5
 8001e1e:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
            Eka =   BCa ^((~BCe)&  BCi );
 8001e22:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
            Eko =   BCo ^((~BCu)&  BCa );
 8001e24:	ea80 0b04 	eor.w	fp, r0, r4
            Eka =   BCa ^((~BCe)&  BCi );
 8001e28:	9802      	ldr	r0, [sp, #8]
            Eko =   BCo ^((~BCu)&  BCa );
 8001e2a:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8001e2c:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
            Eka =   BCa ^((~BCe)&  BCi );
 8001e30:	ea25 0000 	bic.w	r0, r5, r0
 8001e34:	ea80 0b07 	eor.w	fp, r0, r7
            Eko =   BCo ^((~BCu)&  BCa );
 8001e38:	ea27 0004 	bic.w	r0, r7, r4
            Eki =   BCi ^((~BCo)&  BCu );
 8001e3c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
            Eka =   BCa ^((~BCe)&  BCi );
 8001e3e:	f8cd b064 	str.w	fp, [sp, #100]	@ 0x64
            Eki =   BCi ^((~BCo)&  BCu );
 8001e42:	ea24 0607 	bic.w	r6, r4, r7
 8001e46:	ea86 0b05 	eor.w	fp, r6, r5
            Eke =   BCe ^((~BCi)&  BCo );
 8001e4a:	463c      	mov	r4, r7
 8001e4c:	ea27 0605 	bic.w	r6, r7, r5
 8001e50:	9f02      	ldr	r7, [sp, #8]
            Eki =   BCi ^((~BCo)&  BCu );
 8001e52:	f8cd b078 	str.w	fp, [sp, #120]	@ 0x78
            Eke =   BCe ^((~BCi)&  BCo );
 8001e56:	ea86 0b07 	eor.w	fp, r6, r7
 8001e5a:	f8cd b068 	str.w	fp, [sp, #104]	@ 0x68
            Eko =   BCo ^((~BCu)&  BCa );
 8001e5e:	ea80 0b04 	eor.w	fp, r0, r4
 8001e62:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
            BCa = ROL(Abi, 62);
 8001e66:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8001e68:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
            BCe = ROL(Ago, 55);
 8001e6a:	9d37      	ldr	r5, [sp, #220]	@ 0xdc
            BCi = ROL(Aku, 39);
 8001e6c:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
            BCa = ROL(Abi, 62);
 8001e6e:	08a0      	lsrs	r0, r4, #2
 8001e70:	ea40 7b86 	orr.w	fp, r0, r6, lsl #30
 8001e74:	08b0      	lsrs	r0, r6, #2
 8001e76:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
 8001e7a:	ea40 7b84 	orr.w	fp, r0, r4, lsl #30
            BCe = ROL(Ago, 55);
 8001e7e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
            BCa = ROL(Abi, 62);
 8001e80:	f8cd b0a4 	str.w	fp, [sp, #164]	@ 0xa4
            BCe = ROL(Ago, 55);
 8001e84:	0a6e      	lsrs	r6, r5, #9
 8001e86:	ea46 56c0 	orr.w	r6, r6, r0, lsl #23
 8001e8a:	0a40      	lsrs	r0, r0, #9
 8001e8c:	ea40 5bc5 	orr.w	fp, r0, r5, lsl #23
            BCi = ROL(Aku, 39);
 8001e90:	9d26      	ldr	r5, [sp, #152]	@ 0x98
            BCe = ROL(Ago, 55);
 8001e92:	f8cd b0a8 	str.w	fp, [sp, #168]	@ 0xa8
            BCi = ROL(Aku, 39);
 8001e96:	0e68      	lsrs	r0, r5, #25
 8001e98:	ea40 1bc7 	orr.w	fp, r0, r7, lsl #7
 8001e9c:	0e78      	lsrs	r0, r7, #25
 8001e9e:	f8cd b004 	str.w	fp, [sp, #4]
 8001ea2:	ea40 1bc5 	orr.w	fp, r0, r5, lsl #7
            BCo = ROL(Ama, 41);
 8001ea6:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 8001ea8:	9839      	ldr	r0, [sp, #228]	@ 0xe4
            BCi = ROL(Aku, 39);
 8001eaa:	f8cd b008 	str.w	fp, [sp, #8]
            BCo = ROL(Ama, 41);
 8001eae:	0def      	lsrs	r7, r5, #23
 8001eb0:	ea47 2440 	orr.w	r4, r7, r0, lsl #9
 8001eb4:	9430      	str	r4, [sp, #192]	@ 0xc0
            BCu = ROL(Ase,  2);
 8001eb6:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
 8001eb8:	9f3a      	ldr	r7, [sp, #232]	@ 0xe8
            BCo = ROL(Ama, 41);
 8001eba:	0dc0      	lsrs	r0, r0, #23
 8001ebc:	ea40 2b45 	orr.w	fp, r0, r5, lsl #9
            BCu = ROL(Ase,  2);
 8001ec0:	00a0      	lsls	r0, r4, #2
            BCo = ROL(Ama, 41);
 8001ec2:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
            BCu = ROL(Ase,  2);
 8001ec6:	ea40 7b97 	orr.w	fp, r0, r7, lsr #30
 8001eca:	00b8      	lsls	r0, r7, #2
            Ema =   BCa ^((~BCe)&  BCi );
 8001ecc:	9f03      	ldr	r7, [sp, #12]
            BCu = ROL(Ase,  2);
 8001ece:	f8cd b010 	str.w	fp, [sp, #16]
            Ema =   BCa ^((~BCe)&  BCi );
 8001ed2:	ea27 0b08 	bic.w	fp, r7, r8
 8001ed6:	ea8b 0b01 	eor.w	fp, fp, r1
            BCu = ROL(Ase,  2);
 8001eda:	ea40 7094 	orr.w	r0, r0, r4, lsr #30
            Ema =   BCa ^((~BCe)&  BCi );
 8001ede:	465c      	mov	r4, fp
 8001ee0:	ea29 0b03 	bic.w	fp, r9, r3
 8001ee4:	ea8b 0b0e 	eor.w	fp, fp, lr
 8001ee8:	465d      	mov	r5, fp
            Eme =   BCe ^((~BCi)&  BCo );
 8001eea:	ea22 0b07 	bic.w	fp, r2, r7
 8001eee:	ea8b 0b08 	eor.w	fp, fp, r8
            Emi =   BCi ^((~BCo)&  BCu );
 8001ef2:	9f03      	ldr	r7, [sp, #12]
            Eme =   BCe ^((~BCi)&  BCo );
 8001ef4:	f8cd b08c 	str.w	fp, [sp, #140]	@ 0x8c
            Emu =   BCu ^((~BCa)&  BCe );
 8001ef8:	ea28 0801 	bic.w	r8, r8, r1
            Emo =   BCo ^((~BCu)&  BCa );
 8001efc:	ea21 010a 	bic.w	r1, r1, sl
 8001f00:	ea81 0b02 	eor.w	fp, r1, r2
 8001f04:	9924      	ldr	r1, [sp, #144]	@ 0x90
 8001f06:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
            Emi =   BCi ^((~BCo)&  BCu );
 8001f0a:	ea2a 0202 	bic.w	r2, sl, r2
 8001f0e:	ea82 0b07 	eor.w	fp, r2, r7
            Emu =   BCu ^((~BCa)&  BCe );
 8001f12:	ea88 080a 	eor.w	r8, r8, sl
            Eme =   BCe ^((~BCi)&  BCo );
 8001f16:	ea2c 0209 	bic.w	r2, ip, r9
            Emu =   BCu ^((~BCa)&  BCe );
 8001f1a:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
            Eme =   BCe ^((~BCi)&  BCo );
 8001f1e:	ea82 0803 	eor.w	r8, r2, r3
            Emu =   BCu ^((~BCa)&  BCe );
 8001f22:	ea23 030e 	bic.w	r3, r3, lr
            Emo =   BCo ^((~BCu)&  BCa );
 8001f26:	ea2e 0e01 	bic.w	lr, lr, r1
 8001f2a:	ea8e 0e0c 	eor.w	lr, lr, ip
            Emi =   BCi ^((~BCo)&  BCu );
 8001f2e:	ea21 0c0c 	bic.w	ip, r1, ip
 8001f32:	ea8c 0c09 	eor.w	ip, ip, r9
 8001f36:	f8cd c090 	str.w	ip, [sp, #144]	@ 0x90
            Emu =   BCu ^((~BCa)&  BCe );
 8001f3a:	ea83 0c01 	eor.w	ip, r3, r1
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001f3e:	9905      	ldr	r1, [sp, #20]
 8001f40:	9b10      	ldr	r3, [sp, #64]	@ 0x40
            Emi =   BCi ^((~BCo)&  BCu );
 8001f42:	f8cd b00c 	str.w	fp, [sp, #12]
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001f46:	ea81 0903 	eor.w	r9, r1, r3
 8001f4a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
            Emo =   BCo ^((~BCu)&  BCa );
 8001f4c:	f8cd e098 	str.w	lr, [sp, #152]	@ 0x98
            Emu =   BCu ^((~BCa)&  BCe );
 8001f50:	f8cd c0a0 	str.w	ip, [sp, #160]	@ 0xa0
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001f54:	ea89 0901 	eor.w	r9, r9, r1
 8001f58:	942d      	str	r4, [sp, #180]	@ 0xb4
 8001f5a:	9b08      	ldr	r3, [sp, #32]
 8001f5c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8001f5e:	952e      	str	r5, [sp, #184]	@ 0xb8
 8001f60:	ea89 0904 	eor.w	r9, r9, r4
 8001f64:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f66:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001f68:	9a14      	ldr	r2, [sp, #80]	@ 0x50
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f6a:	f8cd 80bc 	str.w	r8, [sp, #188]	@ 0xbc
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001f6e:	ea83 0e01 	eor.w	lr, r3, r1
 8001f72:	ea8e 0e04 	eor.w	lr, lr, r4
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f76:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001f78:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8001f7a:	9b06      	ldr	r3, [sp, #24]
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001f7c:	ea8e 0e05 	eor.w	lr, lr, r5
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f80:	ea81 0504 	eor.w	r5, r1, r4
 8001f84:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8001f86:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8001f88:	4065      	eors	r5, r4
 8001f8a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8001f8c:	4063      	eors	r3, r4
 8001f8e:	404b      	eors	r3, r1
 8001f90:	ea83 0c08 	eor.w	ip, r3, r8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001f94:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8001f96:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8001f98:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001f9a:	f8cd c0d0 	str.w	ip, [sp, #208]	@ 0xd0
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001f9e:	4059      	eors	r1, r3
 8001fa0:	9b07      	ldr	r3, [sp, #28]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001fa2:	407d      	eors	r5, r7
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001fa4:	4061      	eors	r1, r4
 8001fa6:	465f      	mov	r7, fp
 8001fa8:	4053      	eors	r3, r2
 8001faa:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001fac:	9c16      	ldr	r4, [sp, #88]	@ 0x58
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001fae:	4079      	eors	r1, r7
 8001fb0:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 8001fb2:	4053      	eors	r3, r2
 8001fb4:	ea83 0b07 	eor.w	fp, r3, r7
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001fb8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8001fba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001fbc:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8001fbe:	ea83 0c02 	eor.w	ip, r3, r2
 8001fc2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8001fc4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8001fc6:	ea8c 0c02 	eor.w	ip, ip, r2
 8001fca:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001fcc:	ea8c 0c07 	eor.w	ip, ip, r7
 8001fd0:	4062      	eors	r2, r4
 8001fd2:	9f26      	ldr	r7, [sp, #152]	@ 0x98
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8001fd4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001fd6:	405a      	eors	r2, r3
 8001fd8:	ea82 0307 	eor.w	r3, r2, r7
 8001fdc:	9335      	str	r3, [sp, #212]	@ 0xd4
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8001fde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8001fe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8001fe2:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 8001fe4:	4063      	eors	r3, r4
 8001fe6:	4053      	eors	r3, r2
 8001fe8:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 8001fea:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8001fec:	4054      	eors	r4, r2
 8001fee:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001ff0:	407b      	eors	r3, r7
 8001ff2:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8001ff4:	4054      	eors	r4, r2
 8001ff6:	ea84 0207 	eor.w	r2, r4, r7
 8001ffa:	9236      	str	r2, [sp, #216]	@ 0xd8
            Esa =   BCa ^((~BCe)&  BCi );
 8001ffc:	9a01      	ldr	r2, [sp, #4]
 8001ffe:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 8002000:	9c02      	ldr	r4, [sp, #8]
 8002002:	ea22 0806 	bic.w	r8, r2, r6
 8002006:	ea88 0807 	eor.w	r8, r8, r7
 800200a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
            BCa = Eba^Ega^Eka^Ema^Esa;
 800200c:	ea89 0908 	eor.w	r9, r9, r8
 8002010:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
            Esa =   BCa ^((~BCe)&  BCi );
 8002014:	ea24 0902 	bic.w	r9, r4, r2
 8002018:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
            Ese =   BCe ^((~BCi)&  BCo );
 800201a:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
            Esa =   BCa ^((~BCe)&  BCi );
 800201c:	ea89 0902 	eor.w	r9, r9, r2
            Ese =   BCe ^((~BCi)&  BCo );
 8002020:	9a01      	ldr	r2, [sp, #4]
            BCa = Eba^Ega^Eka^Ema^Esa;
 8002022:	ea8e 0e09 	eor.w	lr, lr, r9
 8002026:	f8cd e0b0 	str.w	lr, [sp, #176]	@ 0xb0
            Ese =   BCe ^((~BCi)&  BCo );
 800202a:	ea24 0e02 	bic.w	lr, r4, r2
            Eso =   BCo ^((~BCu)&  BCa );
 800202e:	4622      	mov	r2, r4
            Ese =   BCe ^((~BCi)&  BCo );
 8002030:	ea8e 0e06 	eor.w	lr, lr, r6
            Eso =   BCo ^((~BCu)&  BCa );
 8002034:	ea27 0a00 	bic.w	sl, r7, r0
            Esu =   BCu ^((~BCa)&  BCe );
 8002038:	ea26 0607 	bic.w	r6, r6, r7
            Esi =   BCi ^((~BCo)&  BCu );
 800203c:	ea20 0702 	bic.w	r7, r0, r2
 8002040:	9a01      	ldr	r2, [sp, #4]
            Eso =   BCo ^((~BCu)&  BCa );
 8002042:	ea8a 0a04 	eor.w	sl, sl, r4
 8002046:	4654      	mov	r4, sl
            Esi =   BCi ^((~BCo)&  BCu );
 8002048:	ea87 0a02 	eor.w	sl, r7, r2
 800204c:	4657      	mov	r7, sl
            Esu =   BCu ^((~BCa)&  BCe );
 800204e:	ea86 0a00 	eor.w	sl, r6, r0
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8002052:	ea85 060e 	eor.w	r6, r5, lr
            Esu =   BCu ^((~BCa)&  BCe );
 8002056:	4650      	mov	r0, sl
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8002058:	9601      	str	r6, [sp, #4]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800205a:	ea8c 0a04 	eor.w	sl, ip, r4
            Ese =   BCe ^((~BCi)&  BCo );
 800205e:	9e02      	ldr	r6, [sp, #8]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002060:	9432      	str	r4, [sp, #200]	@ 0xc8
            Ese =   BCe ^((~BCi)&  BCo );
 8002062:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
            Esu =   BCu ^((~BCa)&  BCe );
 8002064:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8002066:	9033      	str	r0, [sp, #204]	@ 0xcc
 8002068:	4043      	eors	r3, r0
            Ese =   BCe ^((~BCi)&  BCo );
 800206a:	982a      	ldr	r0, [sp, #168]	@ 0xa8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800206c:	9730      	str	r7, [sp, #192]	@ 0xc0
            Ese =   BCe ^((~BCi)&  BCo );
 800206e:	ea24 0606 	bic.w	r6, r4, r6
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8002072:	4079      	eors	r1, r7
            Ese =   BCe ^((~BCi)&  BCo );
 8002074:	4046      	eors	r6, r0
            Esu =   BCu ^((~BCa)&  BCe );
 8002076:	ea20 0702 	bic.w	r7, r0, r2
            Eso =   BCo ^((~BCu)&  BCa );
 800207a:	9804      	ldr	r0, [sp, #16]
 800207c:	ea22 0000 	bic.w	r0, r2, r0
 8002080:	ea80 0c04 	eor.w	ip, r0, r4
            Esu =   BCu ^((~BCa)&  BCe );
 8002084:	9a04      	ldr	r2, [sp, #16]
            Esi =   BCi ^((~BCo)&  BCu );
 8002086:	9804      	ldr	r0, [sp, #16]
            Eso =   BCo ^((~BCu)&  BCa );
 8002088:	4665      	mov	r5, ip
            Esi =   BCi ^((~BCo)&  BCu );
 800208a:	ea20 0004 	bic.w	r0, r0, r4
            Esu =   BCu ^((~BCa)&  BCe );
 800208e:	ea87 0c02 	eor.w	ip, r7, r2
            Esi =   BCi ^((~BCo)&  BCu );
 8002092:	9c02      	ldr	r4, [sp, #8]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8002094:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8002096:	9502      	str	r5, [sp, #8]
            Esi =   BCi ^((~BCo)&  BCu );
 8002098:	4060      	eors	r0, r4
            Esu =   BCu ^((~BCa)&  BCe );
 800209a:	4664      	mov	r4, ip
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800209c:	ea82 0c06 	eor.w	ip, r2, r6
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80020a0:	462a      	mov	r2, r5
 80020a2:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80020a4:	9404      	str	r4, [sp, #16]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80020a6:	4055      	eors	r5, r2
 80020a8:	462a      	mov	r2, r5
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80020aa:	9d36      	ldr	r5, [sp, #216]	@ 0xd8
 80020ac:	4065      	eors	r5, r4
 80020ae:	462c      	mov	r4, r5

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 80020b0:	9d01      	ldr	r5, [sp, #4]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 80020b2:	ea8b 0700 	eor.w	r7, fp, r0
            Da = BCu^ROL(BCe, 1);
 80020b6:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 80020ba:	ea4b 7bd5 	orr.w	fp, fp, r5, lsr #31

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
            BCe = ROL(Egu, 20);
            Eka ^= Da;
 80020be:	9d19      	ldr	r5, [sp, #100]	@ 0x64
            Da = BCu^ROL(BCe, 1);
 80020c0:	ea8b 0b04 	eor.w	fp, fp, r4
            Eka ^= Da;
 80020c4:	ea85 050b 	eor.w	r5, r5, fp
 80020c8:	9529      	str	r5, [sp, #164]	@ 0xa4
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
 80020ca:	9d11      	ldr	r5, [sp, #68]	@ 0x44
            Esa ^= Da;
 80020cc:	ea89 090b 	eor.w	r9, r9, fp
 80020d0:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
            Ega ^= Da;
 80020d4:	ea85 090b 	eor.w	r9, r5, fp
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
            Eku ^= Du;
            BCi = ROL(Eku, 39);
            Ema ^= Da;
 80020d8:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
            Ega ^= Da;
 80020da:	f8cd 90d4 	str.w	r9, [sp, #212]	@ 0xd4
            Ema ^= Da;
 80020de:	ea85 090b 	eor.w	r9, r5, fp
            Eba ^= Da;
 80020e2:	9d08      	ldr	r5, [sp, #32]
            Ema ^= Da;
 80020e4:	f8cd 90ec 	str.w	r9, [sp, #236]	@ 0xec
            Eba ^= Da;
 80020e8:	ea85 090b 	eor.w	r9, r5, fp
            Da = BCu^ROL(BCe, 1);
 80020ec:	9d01      	ldr	r5, [sp, #4]
            Eba ^= Da;
 80020ee:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
            Da = BCu^ROL(BCe, 1);
 80020f2:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80020f6:	ea49 79dc 	orr.w	r9, r9, ip, lsr #31
            Eka ^= Da;
 80020fa:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
            Da = BCu^ROL(BCe, 1);
 80020fc:	ea89 0903 	eor.w	r9, r9, r3
            Eka ^= Da;
 8002100:	ea85 0b09 	eor.w	fp, r5, r9
            Ega ^= Da;
 8002104:	9d10      	ldr	r5, [sp, #64]	@ 0x40
            Eka ^= Da;
 8002106:	f8cd b064 	str.w	fp, [sp, #100]	@ 0x64
            Esa ^= Da;
 800210a:	ea88 0809 	eor.w	r8, r8, r9
 800210e:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
            Ega ^= Da;
 8002112:	ea85 0809 	eor.w	r8, r5, r9
            Ema ^= Da;
 8002116:	9d2d      	ldr	r5, [sp, #180]	@ 0xb4
            Ega ^= Da;
 8002118:	f8cd 80d0 	str.w	r8, [sp, #208]	@ 0xd0
            Ema ^= Da;
 800211c:	ea85 0809 	eor.w	r8, r5, r9
            Eba ^= Da;
 8002120:	9d05      	ldr	r5, [sp, #20]
            Ema ^= Da;
 8002122:	f8cd 80e8 	str.w	r8, [sp, #232]	@ 0xe8
            Eba ^= Da;
 8002126:	ea85 0809 	eor.w	r8, r5, r9
 800212a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
            De = BCa^ROL(BCi, 1);
 800212e:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 8002130:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8002134:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 8002138:	ea88 0805 	eor.w	r8, r8, r5
            Ege ^= De;
 800213c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800213e:	ea85 0908 	eor.w	r9, r5, r8
            Eme ^= De;
 8002142:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
            Ege ^= De;
 8002144:	f8cd 9014 	str.w	r9, [sp, #20]
            Eme ^= De;
 8002148:	ea85 0908 	eor.w	r9, r5, r8
            Ebe ^= De;
 800214c:	9d06      	ldr	r5, [sp, #24]
            Eme ^= De;
 800214e:	f8cd 906c 	str.w	r9, [sp, #108]	@ 0x6c
            Ebe ^= De;
 8002152:	ea85 0908 	eor.w	r9, r5, r8
            Eke ^= De;
 8002156:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
            Ebe ^= De;
 8002158:	f8cd 90a8 	str.w	r9, [sp, #168]	@ 0xa8
            Eke ^= De;
 800215c:	ea85 0908 	eor.w	r9, r5, r8
            BCo = ROL(Ema, 41);
            Ese ^= De;
 8002160:	ea86 0808 	eor.w	r8, r6, r8
 8002164:	f8cd 80f0 	str.w	r8, [sp, #240]	@ 0xf0
            De = BCa^ROL(BCi, 1);
 8002168:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
            Eke ^= De;
 800216a:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
            De = BCa^ROL(BCi, 1);
 800216e:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8002172:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 8002176:	ea88 0806 	eor.w	r8, r8, r6
            Ege ^= De;
 800217a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
            Eme ^= De;
 800217c:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
            Ese ^= De;
 800217e:	ea8e 0e08 	eor.w	lr, lr, r8
            Eme ^= De;
 8002182:	ea85 0908 	eor.w	r9, r5, r8
            Ebe ^= De;
 8002186:	9d09      	ldr	r5, [sp, #36]	@ 0x24
            Ese ^= De;
 8002188:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
            Di = BCe^ROL(BCo, 1);
 800218c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
            Eme ^= De;
 8002190:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
            Di = BCe^ROL(BCo, 1);
 8002194:	ea4e 7eda 	orr.w	lr, lr, sl, lsr #31
            Ebe ^= De;
 8002198:	ea85 0908 	eor.w	r9, r5, r8
            Eke ^= De;
 800219c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
            Ebe ^= De;
 800219e:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
            Di = BCe^ROL(BCo, 1);
 80021a2:	ea8e 0e0c 	eor.w	lr, lr, ip
            Eke ^= De;
 80021a6:	ea85 0908 	eor.w	r9, r5, r8
            Ege ^= De;
 80021aa:	ea86 0608 	eor.w	r6, r6, r8
            Esi ^= Di;
 80021ae:	ea80 080e 	eor.w	r8, r0, lr
            Egi ^= Di;
 80021b2:	9814      	ldr	r0, [sp, #80]	@ 0x50
            Eki ^= Di;
 80021b4:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
            Esi ^= Di;
 80021b6:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
            Egi ^= Di;
 80021ba:	ea80 080e 	eor.w	r8, r0, lr
            Emi ^= Di;
 80021be:	9824      	ldr	r0, [sp, #144]	@ 0x90
            Egi ^= Di;
 80021c0:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
            Emi ^= Di;
 80021c4:	ea80 080e 	eor.w	r8, r0, lr
            Ebi ^= Di;
 80021c8:	9807      	ldr	r0, [sp, #28]
            Emi ^= Di;
 80021ca:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
            Eki ^= Di;
 80021ce:	ea85 0c0e 	eor.w	ip, r5, lr
            Di = BCe^ROL(BCo, 1);
 80021d2:	9d01      	ldr	r5, [sp, #4]
            Eke ^= De;
 80021d4:	f8cd 90bc 	str.w	r9, [sp, #188]	@ 0xbc
            Ebi ^= Di;
 80021d8:	ea80 0e0e 	eor.w	lr, r0, lr
            Di = BCe^ROL(BCo, 1);
 80021dc:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80021e0:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 80021e4:	4068      	eors	r0, r5
            Eki ^= Di;
 80021e6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
            Ebi ^= Di;
 80021e8:	f8cd e0e0 	str.w	lr, [sp, #224]	@ 0xe0
            Eki ^= Di;
 80021ec:	ea85 0e00 	eor.w	lr, r5, r0
            Esi ^= Di;
 80021f0:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
 80021f2:	ea85 0800 	eor.w	r8, r5, r0
            Egi ^= Di;
 80021f6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
            Esi ^= Di;
 80021f8:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
            Egi ^= Di;
 80021fc:	ea85 0800 	eor.w	r8, r5, r0
            Emi ^= Di;
 8002200:	9d03      	ldr	r5, [sp, #12]
            Egi ^= Di;
 8002202:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
            Emi ^= Di;
 8002206:	ea85 0800 	eor.w	r8, r5, r0
            Ebi ^= Di;
 800220a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
            Emi ^= Di;
 800220c:	f8cd 8018 	str.w	r8, [sp, #24]
            Ebi ^= Di;
 8002210:	ea85 0800 	eor.w	r8, r5, r0
            Do = BCi^ROL(BCu, 1);
 8002214:	0060      	lsls	r0, r4, #1
 8002216:	ea40 70d3 	orr.w	r0, r0, r3, lsr #31
 800221a:	005b      	lsls	r3, r3, #1
 800221c:	4078      	eors	r0, r7
 800221e:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
            Emo ^= Do;
 8002222:	9f25      	ldr	r7, [sp, #148]	@ 0x94
            Eko ^= Do;
 8002224:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
            Ebi ^= Di;
 8002226:	f8cd 801c 	str.w	r8, [sp, #28]
            Do = BCi^ROL(BCu, 1);
 800222a:	404b      	eors	r3, r1
            Emo ^= Do;
 800222c:	ea87 0403 	eor.w	r4, r7, r3
            Ebo ^= Do;
 8002230:	990b      	ldr	r1, [sp, #44]	@ 0x2c
            Emo ^= Do;
 8002232:	9f26      	ldr	r7, [sp, #152]	@ 0x98
            Eko ^= Do;
 8002234:	ea85 0b03 	eor.w	fp, r5, r3
            Emo ^= Do;
 8002238:	ea87 0900 	eor.w	r9, r7, r0
            Eko ^= Do;
 800223c:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
            Ebo ^= Do;
 8002240:	ea81 0703 	eor.w	r7, r1, r3
 8002244:	990c      	ldr	r1, [sp, #48]	@ 0x30
            Eko ^= Do;
 8002246:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8002248:	ea85 0b00 	eor.w	fp, r5, r0
            Eso ^= Do;
 800224c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
            Eko ^= Do;
 800224e:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
            Eso ^= Do;
 8002252:	ea85 0b03 	eor.w	fp, r5, r3
            Ego ^= Do;
 8002256:	9d15      	ldr	r5, [sp, #84]	@ 0x54
            Eso ^= Do;
 8002258:	f8cd b0c0 	str.w	fp, [sp, #192]	@ 0xc0
            Ego ^= Do;
 800225c:	ea85 0b03 	eor.w	fp, r5, r3
            Eso ^= Do;
 8002260:	9d02      	ldr	r5, [sp, #8]
            Ego ^= Do;
 8002262:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002264:	f8cd b0e4 	str.w	fp, [sp, #228]	@ 0xe4
            Eso ^= Do;
 8002268:	ea85 0b00 	eor.w	fp, r5, r0
            Ebo ^= Do;
 800226c:	ea81 0800 	eor.w	r8, r1, r0
            Eso ^= Do;
 8002270:	f8cd b0c8 	str.w	fp, [sp, #200]	@ 0xc8
            Du = BCo^ROL(BCa, 1);
 8002274:	992b      	ldr	r1, [sp, #172]	@ 0xac
            Ego ^= Do;
 8002276:	ea83 0b00 	eor.w	fp, r3, r0
            Du = BCo^ROL(BCa, 1);
 800227a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
            Ego ^= Do;
 800227c:	f8cd b020 	str.w	fp, [sp, #32]
            Du = BCo^ROL(BCa, 1);
 8002280:	004b      	lsls	r3, r1, #1
 8002282:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8002286:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 800228a:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
            Emu ^= Du;
 800228e:	9927      	ldr	r1, [sp, #156]	@ 0x9c
            Esu ^= Du;
 8002290:	9833      	ldr	r0, [sp, #204]	@ 0xcc
            Du = BCo^ROL(BCa, 1);
 8002292:	ea83 030a 	eor.w	r3, r3, sl
            Emu ^= Du;
 8002296:	4059      	eors	r1, r3
 8002298:	9124      	str	r1, [sp, #144]	@ 0x90
 800229a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
            Du = BCo^ROL(BCa, 1);
 800229c:	ea8b 0b02 	eor.w	fp, fp, r2
            Emu ^= Du;
 80022a0:	ea81 010b 	eor.w	r1, r1, fp
 80022a4:	9125      	str	r1, [sp, #148]	@ 0x94
            Ebu ^= Du;
 80022a6:	990d      	ldr	r1, [sp, #52]	@ 0x34
            Egu ^= Du;
 80022a8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
            Esu ^= Du;
 80022aa:	ea80 0503 	eor.w	r5, r0, r3
 80022ae:	9804      	ldr	r0, [sp, #16]
            Ebu ^= Du;
 80022b0:	4059      	eors	r1, r3
            Esu ^= Du;
 80022b2:	ea80 0a0b 	eor.w	sl, r0, fp
            Ebu ^= Du;
 80022b6:	9126      	str	r1, [sp, #152]	@ 0x98
            Egu ^= Du;
 80022b8:	9817      	ldr	r0, [sp, #92]	@ 0x5c
            Eku ^= Du;
 80022ba:	9921      	ldr	r1, [sp, #132]	@ 0x84
            Egu ^= Du;
 80022bc:	4058      	eors	r0, r3
            Eku ^= Du;
 80022be:	404b      	eors	r3, r1
            Ebu ^= Du;
 80022c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
            Eku ^= Du;
 80022c2:	9333      	str	r3, [sp, #204]	@ 0xcc
            Ebu ^= Du;
 80022c4:	ea81 030b 	eor.w	r3, r1, fp
 80022c8:	9321      	str	r3, [sp, #132]	@ 0x84
            Eku ^= Du;
 80022ca:	9b22      	ldr	r3, [sp, #136]	@ 0x88
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80022cc:	9910      	ldr	r1, [sp, #64]	@ 0x40
            Egu ^= Du;
 80022ce:	ea82 020b 	eor.w	r2, r2, fp
            Eku ^= Du;
 80022d2:	ea83 0b0b 	eor.w	fp, r3, fp
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80022d6:	9b00      	ldr	r3, [sp, #0]
            Eku ^= Du;
 80022d8:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	ea81 0b03 	eor.w	fp, r1, r3
 80022e2:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80022e6:	9900      	ldr	r1, [sp, #0]
 80022e8:	68cb      	ldr	r3, [r1, #12]
        for( round = 0; round < NROUNDS; round += 2 )
 80022ea:	f101 0b10 	add.w	fp, r1, #16
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80022ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
        for( round = 0; round < NROUNDS; round += 2 )
 80022f0:	f8cd b000 	str.w	fp, [sp]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80022f4:	ea81 0b03 	eor.w	fp, r1, r3
            BCe = ROL(Ege, 44);
 80022f8:	9905      	ldr	r1, [sp, #20]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80022fa:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
            BCe = ROL(Ege, 44);
 80022fe:	0d33      	lsrs	r3, r6, #20
 8002300:	ea43 3b01 	orr.w	fp, r3, r1, lsl #12
 8002304:	0d0b      	lsrs	r3, r1, #20
 8002306:	ea43 3606 	orr.w	r6, r3, r6, lsl #12
            BCi = ROL(Eki, 43);
 800230a:	ea4f 535e 	mov.w	r3, lr, lsr #21
            BCe = ROL(Ege, 44);
 800230e:	9609      	str	r6, [sp, #36]	@ 0x24
            BCi = ROL(Eki, 43);
 8002310:	ea43 26cc 	orr.w	r6, r3, ip, lsl #11
 8002314:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 8002318:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
            BCo = ROL(Emo, 21);
 800231c:	ea4f 5349 	mov.w	r3, r9, lsl #21
            BCi = ROL(Eki, 43);
 8002320:	f8cd c008 	str.w	ip, [sp, #8]
            BCo = ROL(Emo, 21);
 8002324:	ea43 2cd4 	orr.w	ip, r3, r4, lsr #11
            BCu = ROL(Esu, 14);
 8002328:	ea4f 338a 	mov.w	r3, sl, lsl #14
            BCo = ROL(Emo, 21);
 800232c:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
            BCu = ROL(Esu, 14);
 8002330:	ea43 4c95 	orr.w	ip, r3, r5, lsr #18
            BCa = ROL(Ebo, 28);
 8002334:	ea4f 7308 	mov.w	r3, r8, lsl #28
            BCu = ROL(Esu, 14);
 8002338:	f8cd c00c 	str.w	ip, [sp, #12]
            BCa = ROL(Ebo, 28);
 800233c:	ea43 1c17 	orr.w	ip, r3, r7, lsr #4
 8002340:	073f      	lsls	r7, r7, #28
            BCe = ROL(Egu, 20);
 8002342:	0513      	lsls	r3, r2, #20
            BCa = ROL(Ebo, 28);
 8002344:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 8002348:	ea47 1c18 	orr.w	ip, r7, r8, lsr #4
 800234c:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
            BCe = ROL(Egu, 20);
 8002350:	ea43 3c10 	orr.w	ip, r3, r0, lsr #12
 8002354:	0500      	lsls	r0, r0, #20
 8002356:	ea40 3012 	orr.w	r0, r0, r2, lsr #12
 800235a:	9012      	str	r0, [sp, #72]	@ 0x48
            BCi = ROL(Eka, 3);
 800235c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800235e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
            BCo = ROL(Eme, 45);
 8002360:	991a      	ldr	r1, [sp, #104]	@ 0x68
            BCe = ROL(Egu, 20);
 8002362:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
            BCi = ROL(Eka, 3);
 8002366:	00c2      	lsls	r2, r0, #3
 8002368:	00fb      	lsls	r3, r7, #3
 800236a:	ea42 7257 	orr.w	r2, r2, r7, lsr #29
            BCo = ROL(Eme, 45);
 800236e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
            BCi = ROL(Eki, 43);
 8002370:	9601      	str	r6, [sp, #4]
            BCi = ROL(Eka, 3);
 8002372:	ea43 7c50 	orr.w	ip, r3, r0, lsr #29
            BCo = ROL(Eme, 45);
 8002376:	0cfb      	lsrs	r3, r7, #19
            BCi = ROL(Eka, 3);
 8002378:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
            BCo = ROL(Eme, 45);
 800237c:	0cce      	lsrs	r6, r1, #19
 800237e:	ea43 3c41 	orr.w	ip, r3, r1, lsl #13
            BCu = ROL(Esi, 61);
 8002382:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8002384:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
            BCo = ROL(Eme, 45);
 8002386:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 800238a:	ea46 3647 	orr.w	r6, r6, r7, lsl #13
            BCu = ROL(Esi, 61);
 800238e:	08cf      	lsrs	r7, r1, #3
 8002390:	ea47 7743 	orr.w	r7, r7, r3, lsl #29
 8002394:	08db      	lsrs	r3, r3, #3
 8002396:	ea43 7c41 	orr.w	ip, r3, r1, lsl #29
            BCa = ROL(Ebe, 1);
 800239a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
            BCi = ROL(Eka, 3);
 800239c:	9204      	str	r2, [sp, #16]
            BCa = ROL(Ebe, 1);
 800239e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
            BCu = ROL(Esi, 61);
 80023a0:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
            BCa = ROL(Ebe, 1);
 80023a4:	004b      	lsls	r3, r1, #1
 80023a6:	ea43 7cd2 	orr.w	ip, r3, r2, lsr #31
 80023aa:	0053      	lsls	r3, r2, #1
 80023ac:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
 80023b0:	ea43 7cd1 	orr.w	ip, r3, r1, lsr #31
            BCe = ROL(Egi, 6);
 80023b4:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 80023b6:	981d      	ldr	r0, [sp, #116]	@ 0x74
            BCa = ROL(Ebe, 1);
 80023b8:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
            BCe = ROL(Egi, 6);
 80023bc:	018b      	lsls	r3, r1, #6
 80023be:	ea43 6c90 	orr.w	ip, r3, r0, lsr #26
 80023c2:	0183      	lsls	r3, r0, #6
 80023c4:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
 80023c8:	ea43 6c91 	orr.w	ip, r3, r1, lsr #26
 80023cc:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
            BCi = ROL(Eko, 25);
 80023d0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80023d2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
            BCo = ROL(Emu, 8);
 80023d4:	9924      	ldr	r1, [sp, #144]	@ 0x90
            BCi = ROL(Eko, 25);
 80023d6:	0643      	lsls	r3, r0, #25
 80023d8:	ea43 1cd2 	orr.w	ip, r3, r2, lsr #7
 80023dc:	0653      	lsls	r3, r2, #25
            BCo = ROL(Emu, 8);
 80023de:	9a25      	ldr	r2, [sp, #148]	@ 0x94
            BCi = ROL(Eko, 25);
 80023e0:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
 80023e4:	ea43 1cd0 	orr.w	ip, r3, r0, lsr #7
            BCo = ROL(Emu, 8);
 80023e8:	0213      	lsls	r3, r2, #8
            BCi = ROL(Eko, 25);
 80023ea:	f8cd c014 	str.w	ip, [sp, #20]
            BCo = ROL(Emu, 8);
 80023ee:	ea43 6c11 	orr.w	ip, r3, r1, lsr #24
 80023f2:	0209      	lsls	r1, r1, #8
 80023f4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
            BCu = ROL(Esa, 18);
 80023f8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80023fa:	982e      	ldr	r0, [sp, #184]	@ 0xb8
            BCo = ROL(Emu, 8);
 80023fc:	f8cd c078 	str.w	ip, [sp, #120]	@ 0x78
            BCu = ROL(Esa, 18);
 8002400:	0493      	lsls	r3, r2, #18
 8002402:	ea43 3c90 	orr.w	ip, r3, r0, lsr #14
 8002406:	ea4f 4e80 	mov.w	lr, r0, lsl #18
            BCa = ROL(Ebu, 27);
 800240a:	9821      	ldr	r0, [sp, #132]	@ 0x84
            BCu = ROL(Esa, 18);
 800240c:	f8cd c07c 	str.w	ip, [sp, #124]	@ 0x7c
 8002410:	ea4e 3e92 	orr.w	lr, lr, r2, lsr #14
            BCa = ROL(Ebu, 27);
 8002414:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8002416:	06c3      	lsls	r3, r0, #27
 8002418:	ea43 1c52 	orr.w	ip, r3, r2, lsr #5
 800241c:	06d3      	lsls	r3, r2, #27
 800241e:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8002422:	ea43 1c50 	orr.w	ip, r3, r0, lsr #5
            BCe = ROL(Ega, 36);
 8002426:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 8002428:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
            BCa = ROL(Ebu, 27);
 800242a:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
            BCe = ROL(Ega, 36);
 800242e:	0f03      	lsrs	r3, r0, #28
 8002430:	ea43 1c02 	orr.w	ip, r3, r2, lsl #4
 8002434:	0f13      	lsrs	r3, r2, #28
            BCi = ROL(Eke, 10);
 8002436:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
            BCe = ROL(Ega, 36);
 8002438:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
 800243c:	ea43 1c00 	orr.w	ip, r3, r0, lsl #4
            BCi = ROL(Eke, 10);
 8002440:	982f      	ldr	r0, [sp, #188]	@ 0xbc
            BCe = ROL(Ega, 36);
 8002442:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
            BCi = ROL(Eke, 10);
 8002446:	0293      	lsls	r3, r2, #10
 8002448:	ea43 5c90 	orr.w	ip, r3, r0, lsr #22
 800244c:	0283      	lsls	r3, r0, #10
 800244e:	f8cd c094 	str.w	ip, [sp, #148]	@ 0x94
 8002452:	ea43 5c92 	orr.w	ip, r3, r2, lsr #22
            BCo = ROL(Emi, 15);
 8002456:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8002458:	9806      	ldr	r0, [sp, #24]
            BCi = ROL(Eke, 10);
 800245a:	f8cd c090 	str.w	ip, [sp, #144]	@ 0x90
            BCo = ROL(Emi, 15);
 800245e:	03d3      	lsls	r3, r2, #15
 8002460:	ea43 4c50 	orr.w	ip, r3, r0, lsr #17
 8002464:	9b06      	ldr	r3, [sp, #24]
            BCu = ROL(Eso, 56);
 8002466:	9832      	ldr	r0, [sp, #200]	@ 0xc8
            BCo = ROL(Emi, 15);
 8002468:	f8cd c09c 	str.w	ip, [sp, #156]	@ 0x9c
 800246c:	03db      	lsls	r3, r3, #15
 800246e:	ea43 4352 	orr.w	r3, r3, r2, lsr #17
            BCu = ROL(Eso, 56);
 8002472:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8002474:	ea4f 2c10 	mov.w	ip, r0, lsr #8
            BCo = ROL(Emo, 21);
 8002478:	0564      	lsls	r4, r4, #21
 800247a:	ea44 24d9 	orr.w	r4, r4, r9, lsr #11
            BCu = ROL(Eso, 56);
 800247e:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
 8002482:	ea4f 2912 	mov.w	r9, r2, lsr #8
            BCa = ROL(Ebi, 62);
 8002486:	9a07      	ldr	r2, [sp, #28]
            BCu = ROL(Eso, 56);
 8002488:	f8cd c0a0 	str.w	ip, [sp, #160]	@ 0xa0
 800248c:	ea49 6900 	orr.w	r9, r9, r0, lsl #24
            BCa = ROL(Ebi, 62);
 8002490:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8002492:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8002496:	ea4c 7c80 	orr.w	ip, ip, r0, lsl #30
 800249a:	f8cd c0a4 	str.w	ip, [sp, #164]	@ 0xa4
 800249e:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 80024a2:	9807      	ldr	r0, [sp, #28]
            BCe = ROL(Ego, 55);
 80024a4:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Ebi, 62);
 80024a6:	ea4c 7c80 	orr.w	ip, ip, r0, lsl #30
            BCe = ROL(Ego, 55);
 80024aa:	9839      	ldr	r0, [sp, #228]	@ 0xe4
            BCa = ROL(Ebi, 62);
 80024ac:	f8cd c0a8 	str.w	ip, [sp, #168]	@ 0xa8
            BCe = ROL(Ego, 55);
 80024b0:	ea4f 2c50 	mov.w	ip, r0, lsr #9
 80024b4:	ea4c 5cc2 	orr.w	ip, ip, r2, lsl #23
 80024b8:	9a08      	ldr	r2, [sp, #32]
 80024ba:	f8cd c0ac 	str.w	ip, [sp, #172]	@ 0xac
 80024be:	ea4f 2c52 	mov.w	ip, r2, lsr #9
 80024c2:	ea4c 5cc0 	orr.w	ip, ip, r0, lsl #23
            BCi = ROL(Eku, 39);
 80024c6:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 80024c8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            BCe = ROL(Ego, 55);
 80024ca:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
            BCi = ROL(Eku, 39);
 80024ce:	ea4f 6c50 	mov.w	ip, r0, lsr #25
 80024d2:	ea4c 1cc2 	orr.w	ip, ip, r2, lsl #7
 80024d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80024d8:	f8cd c0b4 	str.w	ip, [sp, #180]	@ 0xb4
 80024dc:	ea4f 6c52 	mov.w	ip, r2, lsr #25
            BCo = ROL(Ema, 41);
 80024e0:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
            BCi = ROL(Eku, 39);
 80024e2:	ea4c 1cc0 	orr.w	ip, ip, r0, lsl #7
            BCo = ROL(Ema, 41);
 80024e6:	983a      	ldr	r0, [sp, #232]	@ 0xe8
            BCi = ROL(Eku, 39);
 80024e8:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
            BCo = ROL(Ema, 41);
 80024ec:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80024f0:	ea4c 2c40 	orr.w	ip, ip, r0, lsl #9
 80024f4:	ea4f 58d0 	mov.w	r8, r0, lsr #23
            BCu = ROL(Ese, 2);
 80024f8:	983c      	ldr	r0, [sp, #240]	@ 0xf0
            BCo = ROL(Ema, 41);
 80024fa:	f8cd c0bc 	str.w	ip, [sp, #188]	@ 0xbc
 80024fe:	ea48 2842 	orr.w	r8, r8, r2, lsl #9
            BCu = ROL(Ese, 2);
 8002502:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8002504:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8002508:	ea4c 7c92 	orr.w	ip, ip, r2, lsr #30
 800250c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800250e:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8002512:	ea4f 0c82 	mov.w	ip, r2, lsl #2
            Aba =   BCa ^((~BCe)&  BCi );
 8002516:	9a01      	ldr	r2, [sp, #4]
            BCu = ROL(Ese, 2);
 8002518:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
            BCu = ROL(Esu, 14);
 800251c:	03ad      	lsls	r5, r5, #14
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 800251e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
            BCu = ROL(Esu, 14);
 8002520:	ea45 459a 	orr.w	r5, r5, sl, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
 8002524:	ea22 0a0b 	bic.w	sl, r2, fp
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002528:	ea80 0a0a 	eor.w	sl, r0, sl
            Aba =   BCa ^((~BCe)&  BCi );
 800252c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800252e:	9802      	ldr	r0, [sp, #8]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002530:	f8cd a018 	str.w	sl, [sp, #24]
            Aba =   BCa ^((~BCe)&  BCi );
 8002534:	ea20 0a02 	bic.w	sl, r0, r2
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8002538:	980d      	ldr	r0, [sp, #52]	@ 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 800253a:	9a01      	ldr	r2, [sp, #4]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 800253c:	ea80 0a0a 	eor.w	sl, r0, sl
 8002540:	f8cd a01c 	str.w	sl, [sp, #28]
            Abu =   BCu ^((~BCa)&  BCe );
 8002544:	9810      	ldr	r0, [sp, #64]	@ 0x40
            Abe =   BCe ^((~BCi)&  BCo );
 8002546:	ea24 0a02 	bic.w	sl, r4, r2
 800254a:	ea8a 0a0b 	eor.w	sl, sl, fp
            Abi =   BCi ^((~BCo)&  BCu );
 800254e:	9a01      	ldr	r2, [sp, #4]
            Abe =   BCe ^((~BCi)&  BCo );
 8002550:	f8cd a020 	str.w	sl, [sp, #32]
            Abu =   BCu ^((~BCa)&  BCe );
 8002554:	ea2b 0a00 	bic.w	sl, fp, r0
            Abo =   BCo ^((~BCu)&  BCa );
 8002558:	ea20 0b05 	bic.w	fp, r0, r5
 800255c:	ea8b 0b04 	eor.w	fp, fp, r4
            Abi =   BCi ^((~BCo)&  BCu );
 8002560:	ea25 0404 	bic.w	r4, r5, r4
            Abu =   BCu ^((~BCa)&  BCe );
 8002564:	ea8a 0a05 	eor.w	sl, sl, r5
            Abo =   BCo ^((~BCu)&  BCa );
 8002568:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
            Abi =   BCi ^((~BCo)&  BCu );
 800256c:	ea84 0b02 	eor.w	fp, r4, r2
 8002570:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
            Abu =   BCu ^((~BCa)&  BCe );
 8002574:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 8002578:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800257a:	9802      	ldr	r0, [sp, #8]
 800257c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800257e:	ea25 0400 	bic.w	r4, r5, r0
 8002582:	ea84 0a02 	eor.w	sl, r4, r2
            Abu =   BCu ^((~BCa)&  BCe );
 8002586:	9c11      	ldr	r4, [sp, #68]	@ 0x44
            Abo =   BCo ^((~BCu)&  BCa );
 8002588:	9803      	ldr	r0, [sp, #12]
            Abe =   BCe ^((~BCi)&  BCo );
 800258a:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
            Abu =   BCu ^((~BCa)&  BCe );
 800258e:	ea22 0504 	bic.w	r5, r2, r4
            Abo =   BCo ^((~BCu)&  BCa );
 8002592:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8002594:	ea24 0400 	bic.w	r4, r4, r0
 8002598:	ea84 0a02 	eor.w	sl, r4, r2
            Abi =   BCi ^((~BCo)&  BCu );
 800259c:	ea20 0402 	bic.w	r4, r0, r2
 80025a0:	9802      	ldr	r0, [sp, #8]
            Abo =   BCo ^((~BCu)&  BCa );
 80025a2:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            Abi =   BCi ^((~BCo)&  BCu );
 80025a6:	ea84 0a00 	eor.w	sl, r4, r0
            Abu =   BCu ^((~BCa)&  BCe );
 80025aa:	9803      	ldr	r0, [sp, #12]
            Aga =   BCa ^((~BCe)&  BCi );
 80025ac:	9a04      	ldr	r2, [sp, #16]
            Abi =   BCi ^((~BCo)&  BCu );
 80025ae:	f8cd a008 	str.w	sl, [sp, #8]
            Abu =   BCu ^((~BCa)&  BCe );
 80025b2:	ea85 0a00 	eor.w	sl, r5, r0
            Aga =   BCa ^((~BCe)&  BCi );
 80025b6:	9812      	ldr	r0, [sp, #72]	@ 0x48
            Abu =   BCu ^((~BCa)&  BCe );
 80025b8:	f8cd a00c 	str.w	sl, [sp, #12]
            Aga =   BCa ^((~BCe)&  BCi );
 80025bc:	ea22 0400 	bic.w	r4, r2, r0
 80025c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80025c2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80025c4:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80025c6:	ea84 0a02 	eor.w	sl, r4, r2
 80025ca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80025cc:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 80025d0:	ea24 0400 	bic.w	r4, r4, r0
            Age =   BCe ^((~BCi)&  BCo );
 80025d4:	9804      	ldr	r0, [sp, #16]
            Aga =   BCa ^((~BCe)&  BCi );
 80025d6:	ea84 0a05 	eor.w	sl, r4, r5
            Age =   BCe ^((~BCi)&  BCo );
 80025da:	ea26 0400 	bic.w	r4, r6, r0
 80025de:	9812      	ldr	r0, [sp, #72]	@ 0x48
            Aga =   BCa ^((~BCe)&  BCi );
 80025e0:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
            Age =   BCe ^((~BCi)&  BCo );
 80025e4:	ea84 0a00 	eor.w	sl, r4, r0
            Agu =   BCu ^((~BCa)&  BCe );
 80025e8:	ea20 0002 	bic.w	r0, r0, r2
            Ago =   BCo ^((~BCu)&  BCa );
 80025ec:	ea22 0407 	bic.w	r4, r2, r7
            Agi =   BCi ^((~BCo)&  BCu );
 80025f0:	9a04      	ldr	r2, [sp, #16]
            Age =   BCe ^((~BCi)&  BCo );
 80025f2:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
            Ago =   BCo ^((~BCu)&  BCa );
 80025f6:	ea84 0a06 	eor.w	sl, r4, r6
            Agi =   BCi ^((~BCo)&  BCu );
 80025fa:	ea27 0606 	bic.w	r6, r7, r6
            Ago =   BCo ^((~BCu)&  BCa );
 80025fe:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
            Agi =   BCi ^((~BCo)&  BCu );
 8002602:	ea86 0a02 	eor.w	sl, r6, r2
 8002606:	f8cd a010 	str.w	sl, [sp, #16]
            Agu =   BCu ^((~BCa)&  BCe );
 800260a:	ea80 0a07 	eor.w	sl, r0, r7
            Age =   BCe ^((~BCi)&  BCo );
 800260e:	e9dd 4715 	ldrd	r4, r7, [sp, #84]	@ 0x54
            Ago =   BCo ^((~BCu)&  BCa );
 8002612:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
            Age =   BCe ^((~BCi)&  BCo );
 8002614:	9813      	ldr	r0, [sp, #76]	@ 0x4c
            Agu =   BCu ^((~BCa)&  BCe );
 8002616:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
            Age =   BCe ^((~BCi)&  BCo );
 800261a:	ea27 0204 	bic.w	r2, r7, r4
 800261e:	ea82 0b00 	eor.w	fp, r2, r0
            Ago =   BCo ^((~BCu)&  BCa );
 8002622:	ea25 0206 	bic.w	r2, r5, r6
 8002626:	ea82 0a07 	eor.w	sl, r2, r7
            Agi =   BCi ^((~BCo)&  BCu );
 800262a:	ea26 0207 	bic.w	r2, r6, r7
            Agu =   BCu ^((~BCa)&  BCe );
 800262e:	ea20 0005 	bic.w	r0, r0, r5
            Ago =   BCo ^((~BCu)&  BCa );
 8002632:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
            Agi =   BCi ^((~BCo)&  BCu );
 8002636:	ea82 0a04 	eor.w	sl, r2, r4
 800263a:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
            Aka =   BCa ^((~BCe)&  BCi );
 800263e:	e9dd 571b 	ldrd	r5, r7, [sp, #108]	@ 0x6c
            Agu =   BCu ^((~BCa)&  BCe );
 8002642:	ea80 0a06 	eor.w	sl, r0, r6
            Aka =   BCa ^((~BCe)&  BCi );
 8002646:	9a05      	ldr	r2, [sp, #20]
 8002648:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800264a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800264c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            Agu =   BCu ^((~BCa)&  BCe );
 800264e:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
            Aka =   BCa ^((~BCe)&  BCi );
 8002652:	ea22 0206 	bic.w	r2, r2, r6
 8002656:	ea82 0a00 	eor.w	sl, r2, r0
 800265a:	ea27 0205 	bic.w	r2, r7, r5
 800265e:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8002662:	ea82 0a04 	eor.w	sl, r2, r4
            Ake =   BCe ^((~BCi)&  BCo );
 8002666:	9a05      	ldr	r2, [sp, #20]
            Aka =   BCa ^((~BCe)&  BCi );
 8002668:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
            Ake =   BCe ^((~BCi)&  BCo );
 800266c:	ea21 0202 	bic.w	r2, r1, r2
 8002670:	ea82 0a06 	eor.w	sl, r2, r6
            Aku =   BCu ^((~BCa)&  BCe );
 8002674:	ea26 0200 	bic.w	r2, r6, r0
            Ako =   BCo ^((~BCu)&  BCa );
 8002678:	ea20 000e 	bic.w	r0, r0, lr
            Ake =   BCe ^((~BCi)&  BCo );
 800267c:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
            Ako =   BCo ^((~BCu)&  BCa );
 8002680:	ea80 0a01 	eor.w	sl, r0, r1
            Aki =   BCi ^((~BCo)&  BCu );
 8002684:	9805      	ldr	r0, [sp, #20]
            Ako =   BCo ^((~BCu)&  BCa );
 8002686:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
            Aki =   BCi ^((~BCo)&  BCu );
 800268a:	ea2e 0101 	bic.w	r1, lr, r1
 800268e:	ea81 0a00 	eor.w	sl, r1, r0
            Ake =   BCe ^((~BCi)&  BCo );
 8002692:	981e      	ldr	r0, [sp, #120]	@ 0x78
            Ama =   BCa ^((~BCe)&  BCi );
 8002694:	9e25      	ldr	r6, [sp, #148]	@ 0x94
            Aki =   BCi ^((~BCo)&  BCu );
 8002696:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
            Aku =   BCu ^((~BCa)&  BCe );
 800269a:	ea82 0e0e 	eor.w	lr, r2, lr
            Ake =   BCe ^((~BCi)&  BCo );
 800269e:	ea20 0207 	bic.w	r2, r0, r7
            Aku =   BCu ^((~BCa)&  BCe );
 80026a2:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
            Ake =   BCe ^((~BCi)&  BCo );
 80026a6:	ea82 0e05 	eor.w	lr, r2, r5
            Aku =   BCu ^((~BCa)&  BCe );
 80026aa:	ea25 0204 	bic.w	r2, r5, r4
            Ako =   BCo ^((~BCu)&  BCa );
 80026ae:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
            Ake =   BCe ^((~BCi)&  BCo );
 80026b0:	f8cd e014 	str.w	lr, [sp, #20]
            Ako =   BCo ^((~BCu)&  BCa );
 80026b4:	ea24 0105 	bic.w	r1, r4, r5
 80026b8:	ea81 0e00 	eor.w	lr, r1, r0
            Aki =   BCi ^((~BCo)&  BCu );
 80026bc:	ea25 0100 	bic.w	r1, r5, r0
            Ama =   BCa ^((~BCe)&  BCi );
 80026c0:	9c22      	ldr	r4, [sp, #136]	@ 0x88
            Ako =   BCo ^((~BCu)&  BCa );
 80026c2:	f8cd e070 	str.w	lr, [sp, #112]	@ 0x70
            Aki =   BCi ^((~BCo)&  BCu );
 80026c6:	ea81 0e07 	eor.w	lr, r1, r7
            Ama =   BCa ^((~BCe)&  BCi );
 80026ca:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 80026cc:	9920      	ldr	r1, [sp, #128]	@ 0x80
            Aki =   BCi ^((~BCo)&  BCu );
 80026ce:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
            Aku =   BCu ^((~BCa)&  BCe );
 80026d2:	ea82 0e05 	eor.w	lr, r2, r5
            Ama =   BCa ^((~BCe)&  BCi );
 80026d6:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 80026d8:	9821      	ldr	r0, [sp, #132]	@ 0x84
            Aku =   BCu ^((~BCa)&  BCe );
 80026da:	f8cd e078 	str.w	lr, [sp, #120]	@ 0x78
            Ama =   BCa ^((~BCe)&  BCi );
 80026de:	ea27 0204 	bic.w	r2, r7, r4
 80026e2:	ea82 0e01 	eor.w	lr, r2, r1
 80026e6:	ea26 0205 	bic.w	r2, r6, r5
 80026ea:	ea82 0a00 	eor.w	sl, r2, r0
            Ame =   BCe ^((~BCi)&  BCo );
 80026ee:	ea23 0207 	bic.w	r2, r3, r7
            Ama =   BCa ^((~BCe)&  BCi );
 80026f2:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
            Ame =   BCe ^((~BCi)&  BCo );
 80026f6:	ea82 0e04 	eor.w	lr, r2, r4
            Amu =   BCu ^((~BCa)&  BCe );
 80026fa:	ea24 0201 	bic.w	r2, r4, r1
            Amo =   BCo ^((~BCu)&  BCa );
 80026fe:	ea21 0109 	bic.w	r1, r1, r9
            Ame =   BCe ^((~BCi)&  BCo );
 8002702:	f8cd e080 	str.w	lr, [sp, #128]	@ 0x80
            Amo =   BCo ^((~BCu)&  BCa );
 8002706:	ea81 0e03 	eor.w	lr, r1, r3
            Ami =   BCi ^((~BCo)&  BCu );
 800270a:	ea29 0303 	bic.w	r3, r9, r3
 800270e:	405f      	eors	r7, r3
 8002710:	9722      	str	r7, [sp, #136]	@ 0x88
            Amu =   BCu ^((~BCa)&  BCe );
 8002712:	ea82 0709 	eor.w	r7, r2, r9
 8002716:	9726      	str	r7, [sp, #152]	@ 0x98
            Amo =   BCo ^((~BCu)&  BCa );
 8002718:	f8cd e090 	str.w	lr, [sp, #144]	@ 0x90
            Ame =   BCe ^((~BCi)&  BCo );
 800271c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
            Amo =   BCo ^((~BCu)&  BCa );
 800271e:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
            Ame =   BCe ^((~BCi)&  BCo );
 8002720:	ea21 0306 	bic.w	r3, r1, r6
 8002724:	ea83 0705 	eor.w	r7, r3, r5
            Amo =   BCo ^((~BCu)&  BCa );
 8002728:	ea20 0204 	bic.w	r2, r0, r4
            Ame =   BCe ^((~BCi)&  BCo );
 800272c:	9721      	str	r7, [sp, #132]	@ 0x84
            Amo =   BCo ^((~BCu)&  BCa );
 800272e:	ea82 0701 	eor.w	r7, r2, r1
            Ami =   BCi ^((~BCo)&  BCu );
 8002732:	ea24 0201 	bic.w	r2, r4, r1
            Amu =   BCu ^((~BCa)&  BCe );
 8002736:	ea25 0300 	bic.w	r3, r5, r0
            Amo =   BCo ^((~BCu)&  BCa );
 800273a:	9725      	str	r7, [sp, #148]	@ 0x94
            Asa =   BCa ^((~BCe)&  BCi );
 800273c:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 800273e:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 8002740:	992a      	ldr	r1, [sp, #168]	@ 0xa8
            Ami =   BCi ^((~BCo)&  BCu );
 8002742:	ea82 0706 	eor.w	r7, r2, r6
 8002746:	9723      	str	r7, [sp, #140]	@ 0x8c
            Amu =   BCu ^((~BCa)&  BCe );
 8002748:	ea83 0704 	eor.w	r7, r3, r4
            Asa =   BCa ^((~BCe)&  BCi );
 800274c:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 800274e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8002750:	9e2e      	ldr	r6, [sp, #184]	@ 0xb8
            Amu =   BCu ^((~BCa)&  BCe );
 8002752:	9727      	str	r7, [sp, #156]	@ 0x9c
            Ase =   BCe ^((~BCi)&  BCo );
 8002754:	ea28 0300 	bic.w	r3, r8, r0
            Asa =   BCa ^((~BCe)&  BCi );
 8002758:	ea20 0904 	bic.w	r9, r0, r4
            Ase =   BCe ^((~BCi)&  BCo );
 800275c:	4063      	eors	r3, r4
            Asa =   BCa ^((~BCe)&  BCi );
 800275e:	ea89 0902 	eor.w	r9, r9, r2
            Ase =   BCe ^((~BCi)&  BCo );
 8002762:	9328      	str	r3, [sp, #160]	@ 0xa0
            Asi =   BCi ^((~BCo)&  BCu );
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
 8002764:	ea24 0302 	bic.w	r3, r4, r2
            Aso =   BCo ^((~BCu)&  BCa );
 8002768:	ea22 020c 	bic.w	r2, r2, ip
 800276c:	ea82 0408 	eor.w	r4, r2, r8
            Asi =   BCi ^((~BCo)&  BCu );
 8002770:	ea2c 0808 	bic.w	r8, ip, r8
 8002774:	ea88 0800 	eor.w	r8, r8, r0
            Ase =   BCe ^((~BCi)&  BCo );
 8002778:	982f      	ldr	r0, [sp, #188]	@ 0xbc
            Aso =   BCo ^((~BCu)&  BCa );
 800277a:	942b      	str	r4, [sp, #172]	@ 0xac
            Asu =   BCu ^((~BCa)&  BCe );
 800277c:	ea83 030c 	eor.w	r3, r3, ip
 8002780:	932d      	str	r3, [sp, #180]	@ 0xb4
            Ase =   BCe ^((~BCi)&  BCo );
 8002782:	ea20 0306 	bic.w	r3, r0, r6
            Aso =   BCo ^((~BCu)&  BCa );
 8002786:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
            Ase =   BCe ^((~BCi)&  BCo );
 8002788:	406b      	eors	r3, r5
 800278a:	9329      	str	r3, [sp, #164]	@ 0xa4
            Asu =   BCu ^((~BCa)&  BCe );
 800278c:	ea25 0301 	bic.w	r3, r5, r1
            Aso =   BCo ^((~BCu)&  BCa );
 8002790:	ea21 0204 	bic.w	r2, r1, r4
            Asu =   BCu ^((~BCa)&  BCe );
 8002794:	4063      	eors	r3, r4
            Asa =   BCa ^((~BCe)&  BCi );
 8002796:	ea26 0705 	bic.w	r7, r6, r5
            Aso =   BCo ^((~BCu)&  BCa );
 800279a:	4042      	eors	r2, r0
            Asa =   BCa ^((~BCe)&  BCi );
 800279c:	404f      	eors	r7, r1
            Asu =   BCu ^((~BCa)&  BCe );
 800279e:	932e      	str	r3, [sp, #184]	@ 0xb8
        for( round = 0; round < NROUNDS; round += 2 )
 80027a0:	9900      	ldr	r1, [sp, #0]
 80027a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002898 <KeccakF1600_StatePermute+0x114c>)
            Aso =   BCo ^((~BCu)&  BCa );
 80027a4:	922c      	str	r2, [sp, #176]	@ 0xb0
            Asi =   BCi ^((~BCo)&  BCu );
 80027a6:	ea24 0200 	bic.w	r2, r4, r0
 80027aa:	4072      	eors	r2, r6
        for( round = 0; round < NROUNDS; round += 2 )
 80027ac:	428b      	cmp	r3, r1
            Asi =   BCi ^((~BCo)&  BCu );
 80027ae:	922a      	str	r2, [sp, #168]	@ 0xa8
        for( round = 0; round < NROUNDS; round += 2 )
 80027b0:	f47f a844 	bne.w	800183c <KeccakF1600_StatePermute+0xf0>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 80027b4:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 80027b6:	9b06      	ldr	r3, [sp, #24]
 80027b8:	6003      	str	r3, [r0, #0]
 80027ba:	9b07      	ldr	r3, [sp, #28]
 80027bc:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 80027be:	9b08      	ldr	r3, [sp, #32]
 80027c0:	6083      	str	r3, [r0, #8]
 80027c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80027c4:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 80027c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80027c8:	6103      	str	r3, [r0, #16]
 80027ca:	9b02      	ldr	r3, [sp, #8]
 80027cc:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 80027ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80027d0:	6183      	str	r3, [r0, #24]
 80027d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80027d4:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 80027d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80027d8:	6203      	str	r3, [r0, #32]
 80027da:	9b03      	ldr	r3, [sp, #12]
 80027dc:	6243      	str	r3, [r0, #36]	@ 0x24
        state[ 5] = Aga;
 80027de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80027e0:	6283      	str	r3, [r0, #40]	@ 0x28
 80027e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80027e4:	62c3      	str	r3, [r0, #44]	@ 0x2c
        state[ 6] = Age;
 80027e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80027e8:	6303      	str	r3, [r0, #48]	@ 0x30
        state[ 7] = Agi;
 80027ea:	9b04      	ldr	r3, [sp, #16]
 80027ec:	6383      	str	r3, [r0, #56]	@ 0x38
 80027ee:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        state[ 6] = Age;
 80027f0:	f8c0 b034 	str.w	fp, [r0, #52]	@ 0x34
        state[ 7] = Agi;
 80027f4:	63c3      	str	r3, [r0, #60]	@ 0x3c
        state[ 8] = Ago;
 80027f6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80027f8:	6403      	str	r3, [r0, #64]	@ 0x40
 80027fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80027fc:	6443      	str	r3, [r0, #68]	@ 0x44
        state[ 9] = Agu;
 80027fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8002800:	6483      	str	r3, [r0, #72]	@ 0x48
 8002802:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8002804:	64c3      	str	r3, [r0, #76]	@ 0x4c
        state[10] = Aka;
 8002806:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8002808:	6503      	str	r3, [r0, #80]	@ 0x50
 800280a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800280c:	6543      	str	r3, [r0, #84]	@ 0x54
        state[11] = Ake;
 800280e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8002810:	6583      	str	r3, [r0, #88]	@ 0x58
 8002812:	9b05      	ldr	r3, [sp, #20]
 8002814:	65c3      	str	r3, [r0, #92]	@ 0x5c
        state[12] = Aki;
 8002816:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8002818:	6603      	str	r3, [r0, #96]	@ 0x60
 800281a:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800281c:	6643      	str	r3, [r0, #100]	@ 0x64
        state[13] = Ako;
 800281e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8002820:	6683      	str	r3, [r0, #104]	@ 0x68
 8002822:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8002824:	66c3      	str	r3, [r0, #108]	@ 0x6c
        state[14] = Aku;
 8002826:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8002828:	6703      	str	r3, [r0, #112]	@ 0x70
 800282a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800282c:	6743      	str	r3, [r0, #116]	@ 0x74
        state[15] = Ama;
 800282e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8002830:	e9c0 3a1e 	strd	r3, sl, [r0, #120]	@ 0x78
        state[16] = Ame;
 8002834:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8002836:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 800283a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800283c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        state[17] = Ami;
 8002840:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8002842:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 8002846:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8002848:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
        state[18] = Amo;
 800284c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800284e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
        state[19] = Amu;
 8002852:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8002854:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
 8002858:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
        state[18] = Amo;
 800285a:	f8c0 e090 	str.w	lr, [r0, #144]	@ 0x90
        state[20] = Asa;
 800285e:	e9c0 3927 	strd	r3, r9, [r0, #156]	@ 0x9c
        state[21] = Ase;
 8002862:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8002864:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
 8002868:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 800286a:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
        state[22] = Asi;
        state[23] = Aso;
 800286e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8002870:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8002874:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8002876:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
        state[24] = Asu;
 800287a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 800287c:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
 8002880:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
        state[20] = Asa;
 8002882:	f8c0 70a4 	str.w	r7, [r0, #164]	@ 0xa4
        state[22] = Asi;
 8002886:	f8c0 80b0 	str.w	r8, [r0, #176]	@ 0xb0
 800288a:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
        state[24] = Asu;
 800288e:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4

        #undef    round
}
 8002892:	b03f      	add	sp, #252	@ 0xfc
 8002894:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002898:	08005e48 	.word	0x08005e48

0800289c <cal_sign_rej_num>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void cal_sign_rej_num(){
 800289c:	b570      	push	{r4, r5, r6, lr}
	randombytes_init(seed);
 800289e:	4b1a      	ldr	r3, [pc, #104]	@ (8002908 <cal_sign_rej_num+0x6c>)
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
		randombytes(tmp,4);
 80028a0:	4d1a      	ldr	r5, [pc, #104]	@ (800290c <cal_sign_rej_num+0x70>)
	randombytes_init(seed);
 80028a2:	6818      	ldr	r0, [r3, #0]
void cal_sign_rej_num(){
 80028a4:	b084      	sub	sp, #16
	randombytes_init(seed);
 80028a6:	f001 faef 	bl	8003e88 <randombytes_init>
 80028aa:	2464      	movs	r4, #100	@ 0x64
		randombytes(tmp,4);
 80028ac:	2104      	movs	r1, #4
 80028ae:	4628      	mov	r0, r5
 80028b0:	f001 faf0 	bl	8003e94 <randombytes>
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
 80028b4:	3c01      	subs	r4, #1
 80028b6:	d1f9      	bne.n	80028ac <cal_sign_rej_num+0x10>
	rej_num = 0;
	mlen = 0;
 80028b8:	4d15      	ldr	r5, [pc, #84]	@ (8002910 <cal_sign_rej_num+0x74>)
	rej_num = 0;
 80028ba:	4e16      	ldr	r6, [pc, #88]	@ (8002914 <cal_sign_rej_num+0x78>)
	mlen = 0;
 80028bc:	602c      	str	r4, [r5, #0]
	randombytes(&mlen,4);
 80028be:	4628      	mov	r0, r5
 80028c0:	2104      	movs	r1, #4
	rej_num = 0;
 80028c2:	6034      	str	r4, [r6, #0]
	randombytes(&mlen,4);
 80028c4:	f001 fae6 	bl	8003e94 <randombytes>
	mlen &= 0xff;
 80028c8:	7829      	ldrb	r1, [r5, #0]
	randombytes(m,mlen);
 80028ca:	4813      	ldr	r0, [pc, #76]	@ (8002918 <cal_sign_rej_num+0x7c>)
	mlen &= 0xff;
 80028cc:	6029      	str	r1, [r5, #0]
	randombytes(m,mlen);
 80028ce:	f001 fae1 	bl	8003e94 <randombytes>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80028d2:	4622      	mov	r2, r4
 80028d4:	4811      	ldr	r0, [pc, #68]	@ (800291c <cal_sign_rej_num+0x80>)
	crypto_sign(sm, &smlen, m, mlen, sk, -2, -2, &rej_num);
 80028d6:	4c12      	ldr	r4, [pc, #72]	@ (8002920 <cal_sign_rej_num+0x84>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 80028d8:	2101      	movs	r1, #1
 80028da:	f002 fb41 	bl	8004f60 <HAL_GPIO_WritePin>
	crypto_sign(sm, &smlen, m, mlen, sk, -2, -2, &rej_num);
 80028de:	f06f 0101 	mvn.w	r1, #1
 80028e2:	682b      	ldr	r3, [r5, #0]
 80028e4:	4a0c      	ldr	r2, [pc, #48]	@ (8002918 <cal_sign_rej_num+0x7c>)
 80028e6:	9101      	str	r1, [sp, #4]
 80028e8:	e9cd 1602 	strd	r1, r6, [sp, #8]
 80028ec:	9400      	str	r4, [sp, #0]
 80028ee:	490d      	ldr	r1, [pc, #52]	@ (8002924 <cal_sign_rej_num+0x88>)
 80028f0:	480d      	ldr	r0, [pc, #52]	@ (8002928 <cal_sign_rej_num+0x8c>)
 80028f2:	f001 fe7d 	bl	80045f0 <crypto_sign>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 80028f6:	2201      	movs	r2, #1
 80028f8:	4808      	ldr	r0, [pc, #32]	@ (800291c <cal_sign_rej_num+0x80>)
 80028fa:	4611      	mov	r1, r2
}
 80028fc:	b004      	add	sp, #16
 80028fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002902:	f002 bb2d 	b.w	8004f60 <HAL_GPIO_WritePin>
 8002906:	bf00      	nop
 8002908:	20000008 	.word	0x20000008
 800290c:	20000034 	.word	0x20000034
 8002910:	200024c0 	.word	0x200024c0
 8002914:	20000040 	.word	0x20000040
 8002918:	200020b8 	.word	0x200020b8
 800291c:	40020800 	.word	0x40020800
 8002920:	20000044 	.word	0x20000044
 8002924:	200024bc 	.word	0x200024bc
 8002928:	20000f44 	.word	0x20000f44

0800292c <sign>:

void sign(){
 800292c:	b530      	push	{r4, r5, lr}
	randombytes_init(seed);
 800292e:	4b15      	ldr	r3, [pc, #84]	@ (8002984 <sign+0x58>)
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
		randombytes(tmp,4);
 8002930:	4d15      	ldr	r5, [pc, #84]	@ (8002988 <sign+0x5c>)
	randombytes_init(seed);
 8002932:	6818      	ldr	r0, [r3, #0]
void sign(){
 8002934:	b085      	sub	sp, #20
	randombytes_init(seed);
 8002936:	f001 faa7 	bl	8003e88 <randombytes_init>
 800293a:	2464      	movs	r4, #100	@ 0x64
		randombytes(tmp,4);
 800293c:	2104      	movs	r1, #4
 800293e:	4628      	mov	r0, r5
 8002940:	f001 faa8 	bl	8003e94 <randombytes>
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
 8002944:	3c01      	subs	r4, #1
 8002946:	d1f9      	bne.n	800293c <sign+0x10>
	mlen = 0;
 8002948:	4d10      	ldr	r5, [pc, #64]	@ (800298c <sign+0x60>)
	randombytes(&mlen,4);
 800294a:	2104      	movs	r1, #4
 800294c:	4628      	mov	r0, r5
	mlen = 0;
 800294e:	602c      	str	r4, [r5, #0]
	randombytes(&mlen,4);
 8002950:	f001 faa0 	bl	8003e94 <randombytes>
	mlen &= 0xff;
 8002954:	7829      	ldrb	r1, [r5, #0]
	randombytes(m,mlen);
 8002956:	480e      	ldr	r0, [pc, #56]	@ (8002990 <sign+0x64>)
	mlen &= 0xff;
 8002958:	6029      	str	r1, [r5, #0]
	randombytes(m,mlen);
 800295a:	f001 fa9b 	bl	8003e94 <randombytes>
	crypto_sign(sm, &smlen, m, mlen, sk, trigger_idx, poly_idx, &rej_num);
 800295e:	4a0d      	ldr	r2, [pc, #52]	@ (8002994 <sign+0x68>)
 8002960:	4b0d      	ldr	r3, [pc, #52]	@ (8002998 <sign+0x6c>)
 8002962:	6811      	ldr	r1, [r2, #0]
 8002964:	480d      	ldr	r0, [pc, #52]	@ (800299c <sign+0x70>)
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	4c0d      	ldr	r4, [pc, #52]	@ (80029a0 <sign+0x74>)
 800296a:	682b      	ldr	r3, [r5, #0]
 800296c:	9201      	str	r2, [sp, #4]
 800296e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8002972:	4a07      	ldr	r2, [pc, #28]	@ (8002990 <sign+0x64>)
 8002974:	490b      	ldr	r1, [pc, #44]	@ (80029a4 <sign+0x78>)
 8002976:	9400      	str	r4, [sp, #0]
 8002978:	480b      	ldr	r0, [pc, #44]	@ (80029a8 <sign+0x7c>)
 800297a:	f001 fe39 	bl	80045f0 <crypto_sign>
}
 800297e:	b005      	add	sp, #20
 8002980:	bd30      	pop	{r4, r5, pc}
 8002982:	bf00      	nop
 8002984:	20000008 	.word	0x20000008
 8002988:	20000034 	.word	0x20000034
 800298c:	200024c0 	.word	0x200024c0
 8002990:	200020b8 	.word	0x200020b8
 8002994:	20000038 	.word	0x20000038
 8002998:	2000003c 	.word	0x2000003c
 800299c:	20000040 	.word	0x20000040
 80029a0:	20000044 	.word	0x20000044
 80029a4:	200024bc 	.word	0x200024bc
 80029a8:	20000f44 	.word	0x20000f44

080029ac <test_algorithm>:

void test_algorithm(){
 80029ac:	b510      	push	{r4, lr}
	int ret = 0;

	ret = crypto_sign_keypair(pk, sk);
 80029ae:	4938      	ldr	r1, [pc, #224]	@ (8002a90 <test_algorithm+0xe4>)
 80029b0:	4838      	ldr	r0, [pc, #224]	@ (8002a94 <test_algorithm+0xe8>)
void test_algorithm(){
 80029b2:	b084      	sub	sp, #16
	ret = crypto_sign_keypair(pk, sk);
 80029b4:	f001 faf4 	bl	8003fa0 <crypto_sign_keypair>
	if(ret!=0)
 80029b8:	2800      	cmp	r0, #0
 80029ba:	d150      	bne.n	8002a5e <test_algorithm+0xb2>
		HAL_UART_Transmit(&huart2,"key gen wrong\n",strlen("key gen wrong\n"),1000);
	mlen = 33;
 80029bc:	4c36      	ldr	r4, [pc, #216]	@ (8002a98 <test_algorithm+0xec>)
	randombytes(m,mlen);
 80029be:	4837      	ldr	r0, [pc, #220]	@ (8002a9c <test_algorithm+0xf0>)
	mlen = 33;
 80029c0:	2121      	movs	r1, #33	@ 0x21
 80029c2:	6021      	str	r1, [r4, #0]
	randombytes(m,mlen);
 80029c4:	f001 fa66 	bl	8003e94 <randombytes>
	ret = crypto_sign(sm, &smlen, m, mlen, sk,-2,-2,&rej_num);
 80029c8:	4935      	ldr	r1, [pc, #212]	@ (8002aa0 <test_algorithm+0xf4>)
 80029ca:	4831      	ldr	r0, [pc, #196]	@ (8002a90 <test_algorithm+0xe4>)
 80029cc:	6823      	ldr	r3, [r4, #0]
 80029ce:	9000      	str	r0, [sp, #0]
 80029d0:	f06f 0201 	mvn.w	r2, #1
 80029d4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80029d8:	9201      	str	r2, [sp, #4]
 80029da:	4932      	ldr	r1, [pc, #200]	@ (8002aa4 <test_algorithm+0xf8>)
 80029dc:	4a2f      	ldr	r2, [pc, #188]	@ (8002a9c <test_algorithm+0xf0>)
 80029de:	4832      	ldr	r0, [pc, #200]	@ (8002aa8 <test_algorithm+0xfc>)
 80029e0:	f001 fe06 	bl	80045f0 <crypto_sign>
//	ret = crypto_sign(sm, &smlen, m, mlen, sk);
	if(ret!=0)
 80029e4:	2800      	cmp	r0, #0
 80029e6:	d14a      	bne.n	8002a7e <test_algorithm+0xd2>
		HAL_UART_Transmit(&huart2,"sign wrong\n",strlen("sign wrong\n"),1000);
	ret = crypto_sign_open(m2,&mlen2,sm,smlen,pk);
 80029e8:	4b2e      	ldr	r3, [pc, #184]	@ (8002aa4 <test_algorithm+0xf8>)
 80029ea:	482a      	ldr	r0, [pc, #168]	@ (8002a94 <test_algorithm+0xe8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2e      	ldr	r2, [pc, #184]	@ (8002aa8 <test_algorithm+0xfc>)
 80029f0:	9000      	str	r0, [sp, #0]
 80029f2:	492e      	ldr	r1, [pc, #184]	@ (8002aac <test_algorithm+0x100>)
 80029f4:	482e      	ldr	r0, [pc, #184]	@ (8002ab0 <test_algorithm+0x104>)
 80029f6:	f001 feeb 	bl	80047d0 <crypto_sign_open>
	if(ret!=0)
 80029fa:	2800      	cmp	r0, #0
 80029fc:	d137      	bne.n	8002a6e <test_algorithm+0xc2>
		HAL_UART_Transmit(&huart2,"sign open wrong\n",strlen("sign open wrong\n"),1000);
	if(mlen != mlen2)
 80029fe:	4a2b      	ldr	r2, [pc, #172]	@ (8002aac <test_algorithm+0x100>)
 8002a00:	6823      	ldr	r3, [r4, #0]
 8002a02:	6811      	ldr	r1, [r2, #0]
 8002a04:	428b      	cmp	r3, r1
 8002a06:	d121      	bne.n	8002a4c <test_algorithm+0xa0>
		HAL_UART_Transmit(&huart2,"mlen2 wrong\n",strlen("mlen2 wrong\n"),1000);
	for(int i=0;i<mlen;++i){
 8002a08:	b1b1      	cbz	r1, 8002a38 <test_algorithm+0x8c>
 8002a0a:	4b24      	ldr	r3, [pc, #144]	@ (8002a9c <test_algorithm+0xf0>)
 8002a0c:	4a28      	ldr	r2, [pc, #160]	@ (8002ab0 <test_algorithm+0x104>)
 8002a0e:	eb01 0c03 	add.w	ip, r1, r3
 8002a12:	e001      	b.n	8002a18 <test_algorithm+0x6c>
 8002a14:	4563      	cmp	r3, ip
 8002a16:	d00f      	beq.n	8002a38 <test_algorithm+0x8c>
		if(m[i]!=m2[i]){
 8002a18:	f813 0b01 	ldrb.w	r0, [r3], #1
 8002a1c:	f812 1b01 	ldrb.w	r1, [r2], #1
 8002a20:	4288      	cmp	r0, r1
 8002a22:	d0f7      	beq.n	8002a14 <test_algorithm+0x68>
			HAL_UART_Transmit(&huart2,"m2 wrong\n",strlen("m2 wrong\n"),1000);
 8002a24:	4923      	ldr	r1, [pc, #140]	@ (8002ab4 <test_algorithm+0x108>)
 8002a26:	4824      	ldr	r0, [pc, #144]	@ (8002ab8 <test_algorithm+0x10c>)
 8002a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a2c:	2209      	movs	r2, #9
			return;
		}
	}
	HAL_UART_Transmit(&huart2,"sign test success\n",strlen("sign test success\n"),1000);
}
 8002a2e:	b004      	add	sp, #16
 8002a30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2,"sign test success\n",strlen("sign test success\n"),1000);
 8002a34:	f002 bdfe 	b.w	8005634 <HAL_UART_Transmit>
 8002a38:	4920      	ldr	r1, [pc, #128]	@ (8002abc <test_algorithm+0x110>)
 8002a3a:	481f      	ldr	r0, [pc, #124]	@ (8002ab8 <test_algorithm+0x10c>)
 8002a3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a40:	2212      	movs	r2, #18
}
 8002a42:	b004      	add	sp, #16
 8002a44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2,"sign test success\n",strlen("sign test success\n"),1000);
 8002a48:	f002 bdf4 	b.w	8005634 <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,"mlen2 wrong\n",strlen("mlen2 wrong\n"),1000);
 8002a4c:	491c      	ldr	r1, [pc, #112]	@ (8002ac0 <test_algorithm+0x114>)
 8002a4e:	481a      	ldr	r0, [pc, #104]	@ (8002ab8 <test_algorithm+0x10c>)
 8002a50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a54:	220c      	movs	r2, #12
 8002a56:	f002 fded 	bl	8005634 <HAL_UART_Transmit>
	for(int i=0;i<mlen;++i){
 8002a5a:	6821      	ldr	r1, [r4, #0]
 8002a5c:	e7d4      	b.n	8002a08 <test_algorithm+0x5c>
		HAL_UART_Transmit(&huart2,"key gen wrong\n",strlen("key gen wrong\n"),1000);
 8002a5e:	4919      	ldr	r1, [pc, #100]	@ (8002ac4 <test_algorithm+0x118>)
 8002a60:	4815      	ldr	r0, [pc, #84]	@ (8002ab8 <test_algorithm+0x10c>)
 8002a62:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a66:	220e      	movs	r2, #14
 8002a68:	f002 fde4 	bl	8005634 <HAL_UART_Transmit>
 8002a6c:	e7a6      	b.n	80029bc <test_algorithm+0x10>
		HAL_UART_Transmit(&huart2,"sign open wrong\n",strlen("sign open wrong\n"),1000);
 8002a6e:	4916      	ldr	r1, [pc, #88]	@ (8002ac8 <test_algorithm+0x11c>)
 8002a70:	4811      	ldr	r0, [pc, #68]	@ (8002ab8 <test_algorithm+0x10c>)
 8002a72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a76:	2210      	movs	r2, #16
 8002a78:	f002 fddc 	bl	8005634 <HAL_UART_Transmit>
 8002a7c:	e7bf      	b.n	80029fe <test_algorithm+0x52>
		HAL_UART_Transmit(&huart2,"sign wrong\n",strlen("sign wrong\n"),1000);
 8002a7e:	4913      	ldr	r1, [pc, #76]	@ (8002acc <test_algorithm+0x120>)
 8002a80:	480d      	ldr	r0, [pc, #52]	@ (8002ab8 <test_algorithm+0x10c>)
 8002a82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002a86:	220b      	movs	r2, #11
 8002a88:	f002 fdd4 	bl	8005634 <HAL_UART_Transmit>
 8002a8c:	e7ac      	b.n	80029e8 <test_algorithm+0x3c>
 8002a8e:	bf00      	nop
 8002a90:	20000044 	.word	0x20000044
 8002a94:	20000a24 	.word	0x20000a24
 8002a98:	200024c0 	.word	0x200024c0
 8002a9c:	200020b8 	.word	0x200020b8
 8002aa0:	20000040 	.word	0x20000040
 8002aa4:	200024bc 	.word	0x200024bc
 8002aa8:	20000f44 	.word	0x20000f44
 8002aac:	200024b8 	.word	0x200024b8
 8002ab0:	20001cb8 	.word	0x20001cb8
 8002ab4:	08005e8c 	.word	0x08005e8c
 8002ab8:	200024c8 	.word	0x200024c8
 8002abc:	08005e98 	.word	0x08005e98
 8002ac0:	08005e7c 	.word	0x08005e7c
 8002ac4:	08005e48 	.word	0x08005e48
 8002ac8:	08005e68 	.word	0x08005e68
 8002acc:	08005e5c 	.word	0x08005e5c

08002ad0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ad0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad2:	2300      	movs	r3, #0
{
 8002ad4:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002ad6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8002ada:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ade:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8002ae2:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ae6:	4921      	ldr	r1, [pc, #132]	@ (8002b6c <SystemClock_Config+0x9c>)
 8002ae8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002aea:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002aec:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002aee:	4a20      	ldr	r2, [pc, #128]	@ (8002b70 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8002af4:	6408      	str	r0, [r1, #64]	@ 0x40
 8002af6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002af8:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8002afc:	9101      	str	r1, [sp, #4]
 8002afe:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b00:	9302      	str	r3, [sp, #8]
 8002b02:	6813      	ldr	r3, [r2, #0]
 8002b04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b08:	6013      	str	r3, [r2, #0]
 8002b0a:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b0c:	2001      	movs	r0, #1
 8002b0e:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b12:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002b16:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b1a:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b1c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b20:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b22:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b26:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002b28:	2104      	movs	r1, #4
 8002b2a:	2002      	movs	r0, #2
 8002b2c:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b30:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b32:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b34:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002b36:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002b38:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b3a:	f002 fa15 	bl	8004f68 <HAL_RCC_OscConfig>
 8002b3e:	b108      	cbz	r0, 8002b44 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002b40:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002b42:	e7fe      	b.n	8002b42 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b44:	220f      	movs	r2, #15
 8002b46:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b48:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b4c:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b50:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b54:	a803      	add	r0, sp, #12
 8002b56:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002b58:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002b5c:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002b5e:	f002 fc19 	bl	8005394 <HAL_RCC_ClockConfig>
 8002b62:	b108      	cbz	r0, 8002b68 <SystemClock_Config+0x98>
 8002b64:	b672      	cpsid	i
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <SystemClock_Config+0x96>
}
 8002b68:	b015      	add	sp, #84	@ 0x54
 8002b6a:	bd30      	pop	{r4, r5, pc}
 8002b6c:	40023800 	.word	0x40023800
 8002b70:	40007000 	.word	0x40007000

08002b74 <main>:
{
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	b082      	sub	sp, #8
  HAL_Init();
 8002b7a:	f001 ff73 	bl	8004a64 <HAL_Init>
  SystemClock_Config();
 8002b7e:	f7ff ffa7 	bl	8002ad0 <SystemClock_Config>
  MX_GPIO_Init();
 8002b82:	f7fe fd53 	bl	800162c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002b86:	f001 fec7 	bl	8004918 <MX_USART2_UART_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	4848      	ldr	r0, [pc, #288]	@ (8002cb0 <main+0x13c>)
  		randombytes(tmp,4);
 8002b90:	4d48      	ldr	r5, [pc, #288]	@ (8002cb4 <main+0x140>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8002b92:	f002 f9e5 	bl	8004f60 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8002b96:	4846      	ldr	r0, [pc, #280]	@ (8002cb0 <main+0x13c>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	2102      	movs	r1, #2
 8002b9c:	f002 f9e0 	bl	8004f60 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8002ba0:	4843      	ldr	r0, [pc, #268]	@ (8002cb0 <main+0x13c>)
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	2104      	movs	r1, #4
 8002ba6:	f002 f9db 	bl	8004f60 <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8002baa:	4841      	ldr	r0, [pc, #260]	@ (8002cb0 <main+0x13c>)
 8002bac:	2201      	movs	r2, #1
 8002bae:	2108      	movs	r1, #8
 8002bb0:	f002 f9d6 	bl	8004f60 <HAL_GPIO_WritePin>
  	unsigned char op = 0;
 8002bb4:	2300      	movs	r3, #0
  	randombytes_init(0x3f3f3f3f);
 8002bb6:	f04f 303f 	mov.w	r0, #1061109567	@ 0x3f3f3f3f
  	unsigned char op = 0;
 8002bba:	f88d 3007 	strb.w	r3, [sp, #7]
  	randombytes_init(0x3f3f3f3f);
 8002bbe:	f001 f963 	bl	8003e88 <randombytes_init>
 8002bc2:	2464      	movs	r4, #100	@ 0x64
  		randombytes(tmp,4);
 8002bc4:	2104      	movs	r1, #4
 8002bc6:	4628      	mov	r0, r5
 8002bc8:	f001 f964 	bl	8003e94 <randombytes>
  	for(int i=0;i<100;++i)
 8002bcc:	3c01      	subs	r4, #1
 8002bce:	d1f9      	bne.n	8002bc4 <main+0x50>
  	crypto_sign_keypair(pk, sk); //固定种子生成公私钥，以固定公私钥
 8002bd0:	4939      	ldr	r1, [pc, #228]	@ (8002cb8 <main+0x144>)
 8002bd2:	483a      	ldr	r0, [pc, #232]	@ (8002cbc <main+0x148>)
 8002bd4:	f001 f9e4 	bl	8003fa0 <crypto_sign_keypair>
      __HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8002bd8:	4b39      	ldr	r3, [pc, #228]	@ (8002cc0 <main+0x14c>)
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002be0:	601a      	str	r2, [r3, #0]
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8002be2:	681a      	ldr	r2, [r3, #0]
 8002be4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002be8:	601a      	str	r2, [r3, #0]
 8002bea:	b672      	cpsid	i
 8002bec:	4f35      	ldr	r7, [pc, #212]	@ (8002cc4 <main+0x150>)
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8002bee:	4e36      	ldr	r6, [pc, #216]	@ (8002cc8 <main+0x154>)
				randombytes(tmp,4);
 8002bf0:	4d30      	ldr	r5, [pc, #192]	@ (8002cb4 <main+0x140>)
			crypto_sign_keypair(pk, sk); //固定种子生成公私钥，以固定公私钥
 8002bf2:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8002cb8 <main+0x144>
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8002bf6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	  op=0;
 8002bfa:	2400      	movs	r4, #0
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f10d 0107 	add.w	r1, sp, #7
 8002c02:	4630      	mov	r0, r6
	  op=0;
 8002c04:	f88d 4007 	strb.w	r4, [sp, #7]
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8002c08:	f002 fd98 	bl	800573c <HAL_UART_Receive>
	  switch(op){
 8002c0c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002c10:	3b01      	subs	r3, #1
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	d815      	bhi.n	8002c42 <main+0xce>
 8002c16:	e8df f003 	tbb	[pc, r3]
 8002c1a:	2817      	.short	0x2817
 8002c1c:	1403      	.short	0x1403
 8002c1e:	12          	.byte	0x12
 8002c1f:	00          	.byte	0x00
			randombytes_init(0x3f3f3f3f);
 8002c20:	f04f 303f 	mov.w	r0, #1061109567	@ 0x3f3f3f3f
 8002c24:	f001 f930 	bl	8003e88 <randombytes_init>
 8002c28:	2464      	movs	r4, #100	@ 0x64
				randombytes(tmp,4);
 8002c2a:	2104      	movs	r1, #4
 8002c2c:	4628      	mov	r0, r5
 8002c2e:	f001 f931 	bl	8003e94 <randombytes>
			for(int i=0;i<100;++i)
 8002c32:	3c01      	subs	r4, #1
 8002c34:	d1f9      	bne.n	8002c2a <main+0xb6>
			crypto_sign_keypair(pk, sk); //固定种子生成公私钥，以固定公私钥
 8002c36:	4821      	ldr	r0, [pc, #132]	@ (8002cbc <main+0x148>)
 8002c38:	4641      	mov	r1, r8
 8002c3a:	f001 f9b1 	bl	8003fa0 <crypto_sign_keypair>
		  test_algorithm();
 8002c3e:	f7ff feb5 	bl	80029ac <test_algorithm>
		  trigger_idx = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	e7d6      	b.n	8002bf6 <main+0x82>
		  HAL_UART_Receive(&huart2,(unsigned char*)&seed,sizeof(unsigned int),1000);
 8002c48:	4920      	ldr	r1, [pc, #128]	@ (8002ccc <main+0x158>)
 8002c4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c4e:	2204      	movs	r2, #4
 8002c50:	4630      	mov	r0, r6
 8002c52:	f002 fd73 	bl	800573c <HAL_UART_Receive>
		  cal_sign_rej_num();
 8002c56:	f7ff fe21 	bl	800289c <cal_sign_rej_num>
		  HAL_UART_Transmit(&huart2,(unsigned char*)&rej_num,4,1000);
 8002c5a:	491d      	ldr	r1, [pc, #116]	@ (8002cd0 <main+0x15c>)
 8002c5c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c60:	2204      	movs	r2, #4
 8002c62:	4630      	mov	r0, r6
 8002c64:	f002 fce6 	bl	8005634 <HAL_UART_Transmit>
		  break;
 8002c68:	e7c5      	b.n	8002bf6 <main+0x82>
		  HAL_UART_Receive(&huart2,(unsigned char*)&seed,sizeof(unsigned int),1000);
 8002c6a:	4918      	ldr	r1, [pc, #96]	@ (8002ccc <main+0x158>)
 8002c6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c70:	2204      	movs	r2, #4
 8002c72:	4630      	mov	r0, r6
 8002c74:	f002 fd62 	bl	800573c <HAL_UART_Receive>
		  HAL_UART_Receive(&huart2,(unsigned char*)&trigger_idx,sizeof(int),1000);
 8002c78:	4912      	ldr	r1, [pc, #72]	@ (8002cc4 <main+0x150>)
 8002c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c7e:	2204      	movs	r2, #4
 8002c80:	4630      	mov	r0, r6
 8002c82:	f002 fd5b 	bl	800573c <HAL_UART_Receive>
		  HAL_UART_Receive(&huart2,(unsigned char*)&poly_idx,sizeof(int),1000);
 8002c86:	4913      	ldr	r1, [pc, #76]	@ (8002cd4 <main+0x160>)
 8002c88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002c8c:	2204      	movs	r2, #4
 8002c8e:	4630      	mov	r0, r6
 8002c90:	f002 fd54 	bl	800573c <HAL_UART_Receive>
		  sign();
 8002c94:	f7ff fe4a 	bl	800292c <sign>
		  HAL_UART_Transmit(&huart2,(unsigned char*)done_flag,strlen(done_flag),1000);
 8002c98:	480f      	ldr	r0, [pc, #60]	@ (8002cd8 <main+0x164>)
 8002c9a:	f7fe f931 	bl	8000f00 <strlen>
 8002c9e:	490e      	ldr	r1, [pc, #56]	@ (8002cd8 <main+0x164>)
 8002ca0:	b282      	uxth	r2, r0
 8002ca2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002ca6:	4630      	mov	r0, r6
 8002ca8:	f002 fcc4 	bl	8005634 <HAL_UART_Transmit>
		  break;
 8002cac:	e7a3      	b.n	8002bf6 <main+0x82>
 8002cae:	bf00      	nop
 8002cb0:	40020800 	.word	0x40020800
 8002cb4:	20000034 	.word	0x20000034
 8002cb8:	20000044 	.word	0x20000044
 8002cbc:	20000a24 	.word	0x20000a24
 8002cc0:	40023c00 	.word	0x40023c00
 8002cc4:	2000003c 	.word	0x2000003c
 8002cc8:	200024c8 	.word	0x200024c8
 8002ccc:	20000008 	.word	0x20000008
 8002cd0:	20000040 	.word	0x20000040
 8002cd4:	20000038 	.word	0x20000038
 8002cd8:	20000000 	.word	0x20000000

08002cdc <Error_Handler>:
 8002cdc:	b672      	cpsid	i
  while (1)
 8002cde:	e7fe      	b.n	8002cde <Error_Handler+0x2>

08002ce0 <pqcrystals_dilithium_pack_pk>:
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void pack_pk(uint8_t pk[CRYPTO_PUBLICKEYBYTES],
             const uint8_t rho[SEEDBYTES],
             const polyveck *t1)
{
 8002ce0:	1c4b      	adds	r3, r1, #1
 8002ce2:	1ac3      	subs	r3, r0, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	b570      	push	{r4, r5, r6, lr}
 8002ce8:	4684      	mov	ip, r0
 8002cea:	4616      	mov	r6, r2
 8002cec:	d91e      	bls.n	8002d2c <pqcrystals_dilithium_pack_pk+0x4c>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    pk[i] = rho[i];
 8002cee:	680b      	ldr	r3, [r1, #0]
 8002cf0:	6003      	str	r3, [r0, #0]
 8002cf2:	684b      	ldr	r3, [r1, #4]
 8002cf4:	6043      	str	r3, [r0, #4]
 8002cf6:	688b      	ldr	r3, [r1, #8]
 8002cf8:	6083      	str	r3, [r0, #8]
 8002cfa:	68cb      	ldr	r3, [r1, #12]
 8002cfc:	60c3      	str	r3, [r0, #12]
 8002cfe:	690b      	ldr	r3, [r1, #16]
 8002d00:	6103      	str	r3, [r0, #16]
 8002d02:	694b      	ldr	r3, [r1, #20]
 8002d04:	6143      	str	r3, [r0, #20]
 8002d06:	698b      	ldr	r3, [r1, #24]
 8002d08:	6183      	str	r3, [r0, #24]
 8002d0a:	69cb      	ldr	r3, [r1, #28]
 8002d0c:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8002d0e:	f10c 0420 	add.w	r4, ip, #32
 8002d12:	f50c 65a4 	add.w	r5, ip, #1312	@ 0x520
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 8002d16:	4631      	mov	r1, r6
 8002d18:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 8002d1a:	f504 74a0 	add.w	r4, r4, #320	@ 0x140
    polyt1_pack(pk + i*POLYT1_PACKEDBYTES, &t1->vec[i]);
 8002d1e:	f000 fca5 	bl	800366c <pqcrystals_dilithium_polyt1_pack>
  for(i = 0; i < K; ++i)
 8002d22:	42ac      	cmp	r4, r5
 8002d24:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002d28:	d1f5      	bne.n	8002d16 <pqcrystals_dilithium_pack_pk+0x36>
}
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}
 8002d2c:	1e4b      	subs	r3, r1, #1
 8002d2e:	3801      	subs	r0, #1
 8002d30:	f101 0e1f 	add.w	lr, r1, #31
    pk[i] = rho[i];
 8002d34:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8002d38:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002d3c:	4573      	cmp	r3, lr
 8002d3e:	d1f9      	bne.n	8002d34 <pqcrystals_dilithium_pack_pk+0x54>
 8002d40:	e7e5      	b.n	8002d0e <pqcrystals_dilithium_pack_pk+0x2e>
 8002d42:	bf00      	nop

08002d44 <pqcrystals_dilithium_unpack_pk>:
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void unpack_pk(uint8_t rho[SEEDBYTES],
               polyveck *t1,
               const uint8_t pk[CRYPTO_PUBLICKEYBYTES])
{
 8002d44:	b570      	push	{r4, r5, r6, lr}
 8002d46:	1c54      	adds	r4, r2, #1
 8002d48:	1b04      	subs	r4, r0, r4
 8002d4a:	2c02      	cmp	r4, #2
 8002d4c:	460e      	mov	r6, r1
 8002d4e:	d91e      	bls.n	8002d8e <pqcrystals_dilithium_unpack_pk+0x4a>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = pk[i];
 8002d50:	6811      	ldr	r1, [r2, #0]
 8002d52:	6001      	str	r1, [r0, #0]
 8002d54:	6851      	ldr	r1, [r2, #4]
 8002d56:	6041      	str	r1, [r0, #4]
 8002d58:	6891      	ldr	r1, [r2, #8]
 8002d5a:	6081      	str	r1, [r0, #8]
 8002d5c:	68d1      	ldr	r1, [r2, #12]
 8002d5e:	60c1      	str	r1, [r0, #12]
 8002d60:	6911      	ldr	r1, [r2, #16]
 8002d62:	6101      	str	r1, [r0, #16]
 8002d64:	6951      	ldr	r1, [r2, #20]
 8002d66:	6141      	str	r1, [r0, #20]
 8002d68:	6991      	ldr	r1, [r2, #24]
 8002d6a:	6181      	str	r1, [r0, #24]
 8002d6c:	69d1      	ldr	r1, [r2, #28]
 8002d6e:	61c1      	str	r1, [r0, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8002d70:	f102 0420 	add.w	r4, r2, #32
 8002d74:	f502 65a4 	add.w	r5, r2, #1312	@ 0x520
  pk += SEEDBYTES;

  for(i = 0; i < K; ++i)
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
 8002d78:	4621      	mov	r1, r4
 8002d7a:	4630      	mov	r0, r6
  for(i = 0; i < K; ++i)
 8002d7c:	f504 74a0 	add.w	r4, r4, #320	@ 0x140
    polyt1_unpack(&t1->vec[i], pk + i*POLYT1_PACKEDBYTES);
 8002d80:	f000 fc96 	bl	80036b0 <pqcrystals_dilithium_polyt1_unpack>
  for(i = 0; i < K; ++i)
 8002d84:	42ac      	cmp	r4, r5
 8002d86:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002d8a:	d1f5      	bne.n	8002d78 <pqcrystals_dilithium_unpack_pk+0x34>
}
 8002d8c:	bd70      	pop	{r4, r5, r6, pc}
 8002d8e:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 8002d92:	1e43      	subs	r3, r0, #1
 8002d94:	f102 0e1f 	add.w	lr, r2, #31
    rho[i] = pk[i];
 8002d98:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 8002d9c:	f803 4f01 	strb.w	r4, [r3, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002da0:	45f4      	cmp	ip, lr
 8002da2:	d1f9      	bne.n	8002d98 <pqcrystals_dilithium_unpack_pk+0x54>
 8002da4:	e7e4      	b.n	8002d70 <pqcrystals_dilithium_unpack_pk+0x2c>
 8002da6:	bf00      	nop

08002da8 <pqcrystals_dilithium_pack_sk>:
             const uint8_t tr[SEEDBYTES],
             const uint8_t key[SEEDBYTES],
             const polyveck *t0,
             const polyvecl *s1,
             const polyveck *s2)
{
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	4604      	mov	r4, r0
 8002dac:	1c48      	adds	r0, r1, #1
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
 8002dae:	1a20      	subs	r0, r4, r0
 8002db0:	2802      	cmp	r0, #2
 8002db2:	d960      	bls.n	8002e76 <pqcrystals_dilithium_pack_sk+0xce>
    sk[i] = rho[i];
 8002db4:	6808      	ldr	r0, [r1, #0]
 8002db6:	6020      	str	r0, [r4, #0]
 8002db8:	6848      	ldr	r0, [r1, #4]
 8002dba:	6060      	str	r0, [r4, #4]
 8002dbc:	6888      	ldr	r0, [r1, #8]
 8002dbe:	60a0      	str	r0, [r4, #8]
 8002dc0:	68c8      	ldr	r0, [r1, #12]
 8002dc2:	60e0      	str	r0, [r4, #12]
 8002dc4:	6908      	ldr	r0, [r1, #16]
 8002dc6:	6120      	str	r0, [r4, #16]
 8002dc8:	6948      	ldr	r0, [r1, #20]
 8002dca:	6160      	str	r0, [r4, #20]
 8002dcc:	6988      	ldr	r0, [r1, #24]
 8002dce:	61a0      	str	r0, [r4, #24]
 8002dd0:	69c9      	ldr	r1, [r1, #28]
 8002dd2:	61e1      	str	r1, [r4, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8002dd4:	1ae1      	subs	r1, r4, r3
 8002dd6:	311f      	adds	r1, #31
 8002dd8:	2902      	cmp	r1, #2
 8002dda:	d959      	bls.n	8002e90 <pqcrystals_dilithium_pack_sk+0xe8>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = key[i];
 8002ddc:	6819      	ldr	r1, [r3, #0]
 8002dde:	6221      	str	r1, [r4, #32]
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	6261      	str	r1, [r4, #36]	@ 0x24
 8002de4:	6899      	ldr	r1, [r3, #8]
 8002de6:	62a1      	str	r1, [r4, #40]	@ 0x28
 8002de8:	68d9      	ldr	r1, [r3, #12]
 8002dea:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8002dec:	6919      	ldr	r1, [r3, #16]
 8002dee:	6321      	str	r1, [r4, #48]	@ 0x30
 8002df0:	6959      	ldr	r1, [r3, #20]
 8002df2:	6361      	str	r1, [r4, #52]	@ 0x34
 8002df4:	6999      	ldr	r1, [r3, #24]
 8002df6:	63a1      	str	r1, [r4, #56]	@ 0x38
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	63e3      	str	r3, [r4, #60]	@ 0x3c
  for(i = 0; i < SEEDBYTES; ++i)
 8002dfc:	1aa3      	subs	r3, r4, r2
 8002dfe:	333f      	adds	r3, #63	@ 0x3f
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d953      	bls.n	8002eac <pqcrystals_dilithium_pack_sk+0x104>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    sk[i] = tr[i];
 8002e04:	6813      	ldr	r3, [r2, #0]
 8002e06:	6423      	str	r3, [r4, #64]	@ 0x40
 8002e08:	6853      	ldr	r3, [r2, #4]
 8002e0a:	6463      	str	r3, [r4, #68]	@ 0x44
 8002e0c:	6893      	ldr	r3, [r2, #8]
 8002e0e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002e10:	68d3      	ldr	r3, [r2, #12]
 8002e12:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8002e14:	6913      	ldr	r3, [r2, #16]
 8002e16:	6523      	str	r3, [r4, #80]	@ 0x50
 8002e18:	6953      	ldr	r3, [r2, #20]
 8002e1a:	6563      	str	r3, [r4, #84]	@ 0x54
 8002e1c:	6993      	ldr	r3, [r2, #24]
 8002e1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002e20:	69d3      	ldr	r3, [r2, #28]
 8002e22:	65e3      	str	r3, [r4, #92]	@ 0x5c
  for(i = 0; i < SEEDBYTES; ++i)
 8002e24:	9f07      	ldr	r7, [sp, #28]
 8002e26:	f104 0660 	add.w	r6, r4, #96	@ 0x60
 8002e2a:	f504 75f0 	add.w	r5, r4, #480	@ 0x1e0
  sk += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 8002e2e:	4639      	mov	r1, r7
 8002e30:	4630      	mov	r0, r6
  for(i = 0; i < L; ++i)
 8002e32:	3660      	adds	r6, #96	@ 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s1->vec[i]);
 8002e34:	f000 fb84 	bl	8003540 <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < L; ++i)
 8002e38:	42b5      	cmp	r5, r6
 8002e3a:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002e3e:	d1f6      	bne.n	8002e2e <pqcrystals_dilithium_pack_sk+0x86>
 8002e40:	9f08      	ldr	r7, [sp, #32]
 8002e42:	f504 7658 	add.w	r6, r4, #864	@ 0x360
  sk += L*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 8002e46:	4639      	mov	r1, r7
 8002e48:	4628      	mov	r0, r5
  for(i = 0; i < K; ++i)
 8002e4a:	3560      	adds	r5, #96	@ 0x60
    polyeta_pack(sk + i*POLYETA_PACKEDBYTES, &s2->vec[i]);
 8002e4c:	f000 fb78 	bl	8003540 <pqcrystals_dilithium_polyeta_pack>
  for(i = 0; i < K; ++i)
 8002e50:	42ae      	cmp	r6, r5
 8002e52:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002e56:	d1f6      	bne.n	8002e46 <pqcrystals_dilithium_pack_sk+0x9e>
 8002e58:	4635      	mov	r5, r6
 8002e5a:	9e06      	ldr	r6, [sp, #24]
 8002e5c:	f504 641e 	add.w	r4, r4, #2528	@ 0x9e0
  sk += K*POLYETA_PACKEDBYTES;

  for(i = 0; i < K; ++i)
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 8002e60:	4631      	mov	r1, r6
 8002e62:	4628      	mov	r0, r5
  for(i = 0; i < K; ++i)
 8002e64:	f505 75d0 	add.w	r5, r5, #416	@ 0x1a0
    polyt0_pack(sk + i*POLYT0_PACKEDBYTES, &t0->vec[i]);
 8002e68:	f000 fc4e 	bl	8003708 <pqcrystals_dilithium_polyt0_pack>
  for(i = 0; i < K; ++i)
 8002e6c:	42ac      	cmp	r4, r5
 8002e6e:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002e72:	d1f5      	bne.n	8002e60 <pqcrystals_dilithium_pack_sk+0xb8>
}
 8002e74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e76:	1e48      	subs	r0, r1, #1
 8002e78:	1e65      	subs	r5, r4, #1
 8002e7a:	311f      	adds	r1, #31
    sk[i] = rho[i];
 8002e7c:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 8002e80:	f805 6f01 	strb.w	r6, [r5, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002e84:	4281      	cmp	r1, r0
 8002e86:	d1f9      	bne.n	8002e7c <pqcrystals_dilithium_pack_sk+0xd4>
 8002e88:	1ae1      	subs	r1, r4, r3
 8002e8a:	311f      	adds	r1, #31
 8002e8c:	2902      	cmp	r1, #2
 8002e8e:	d8a5      	bhi.n	8002ddc <pqcrystals_dilithium_pack_sk+0x34>
 8002e90:	1e59      	subs	r1, r3, #1
 8002e92:	f104 001f 	add.w	r0, r4, #31
 8002e96:	331f      	adds	r3, #31
    sk[i] = key[i];
 8002e98:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8002e9c:	f800 5f01 	strb.w	r5, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002ea0:	428b      	cmp	r3, r1
 8002ea2:	d1f9      	bne.n	8002e98 <pqcrystals_dilithium_pack_sk+0xf0>
 8002ea4:	1aa3      	subs	r3, r4, r2
 8002ea6:	333f      	adds	r3, #63	@ 0x3f
 8002ea8:	2b02      	cmp	r3, #2
 8002eaa:	d8ab      	bhi.n	8002e04 <pqcrystals_dilithium_pack_sk+0x5c>
 8002eac:	1e53      	subs	r3, r2, #1
 8002eae:	f104 013f 	add.w	r1, r4, #63	@ 0x3f
 8002eb2:	321f      	adds	r2, #31
    sk[i] = tr[i];
 8002eb4:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002eb8:	f801 0f01 	strb.w	r0, [r1, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d1f9      	bne.n	8002eb4 <pqcrystals_dilithium_pack_sk+0x10c>
 8002ec0:	e7b0      	b.n	8002e24 <pqcrystals_dilithium_pack_sk+0x7c>
 8002ec2:	bf00      	nop

08002ec4 <pqcrystals_dilithium_unpack_sk>:
               uint8_t key[SEEDBYTES],
               polyveck *t0,
               polyvecl *s1,
               polyveck *s2,
               const uint8_t sk[CRYPTO_SECRETKEYBYTES])
{
 8002ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ec8:	9d08      	ldr	r5, [sp, #32]
 8002eca:	461e      	mov	r6, r3
 8002ecc:	1c6b      	adds	r3, r5, #1
 8002ece:	1ac3      	subs	r3, r0, r3
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d962      	bls.n	8002f9a <pqcrystals_dilithium_unpack_sk+0xd6>
  unsigned int i;

  for(i = 0; i < SEEDBYTES; ++i)
    rho[i] = sk[i];
 8002ed4:	682b      	ldr	r3, [r5, #0]
 8002ed6:	6003      	str	r3, [r0, #0]
 8002ed8:	686b      	ldr	r3, [r5, #4]
 8002eda:	6043      	str	r3, [r0, #4]
 8002edc:	68ab      	ldr	r3, [r5, #8]
 8002ede:	6083      	str	r3, [r0, #8]
 8002ee0:	68eb      	ldr	r3, [r5, #12]
 8002ee2:	60c3      	str	r3, [r0, #12]
 8002ee4:	692b      	ldr	r3, [r5, #16]
 8002ee6:	6103      	str	r3, [r0, #16]
 8002ee8:	696b      	ldr	r3, [r5, #20]
 8002eea:	6143      	str	r3, [r0, #20]
 8002eec:	69ab      	ldr	r3, [r5, #24]
 8002eee:	6183      	str	r3, [r0, #24]
 8002ef0:	69eb      	ldr	r3, [r5, #28]
 8002ef2:	61c3      	str	r3, [r0, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8002ef4:	f105 0321 	add.w	r3, r5, #33	@ 0x21
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d95c      	bls.n	8002fb8 <pqcrystals_dilithium_unpack_sk+0xf4>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    key[i] = sk[i];
 8002efe:	6a2b      	ldr	r3, [r5, #32]
 8002f00:	6013      	str	r3, [r2, #0]
 8002f02:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8002f04:	6053      	str	r3, [r2, #4]
 8002f06:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002f08:	6093      	str	r3, [r2, #8]
 8002f0a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002f0c:	60d3      	str	r3, [r2, #12]
 8002f0e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002f10:	6113      	str	r3, [r2, #16]
 8002f12:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8002f14:	6153      	str	r3, [r2, #20]
 8002f16:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8002f18:	6193      	str	r3, [r2, #24]
 8002f1a:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002f1c:	61d3      	str	r3, [r2, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8002f1e:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 8002f22:	1acb      	subs	r3, r1, r3
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d957      	bls.n	8002fd8 <pqcrystals_dilithium_unpack_sk+0x114>
  sk += SEEDBYTES;

  for(i = 0; i < SEEDBYTES; ++i)
    tr[i] = sk[i];
 8002f28:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8002f2a:	600b      	str	r3, [r1, #0]
 8002f2c:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8002f2e:	604b      	str	r3, [r1, #4]
 8002f30:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 8002f32:	608b      	str	r3, [r1, #8]
 8002f34:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8002f36:	60cb      	str	r3, [r1, #12]
 8002f38:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 8002f3a:	610b      	str	r3, [r1, #16]
 8002f3c:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 8002f3e:	614b      	str	r3, [r1, #20]
 8002f40:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 8002f42:	618b      	str	r3, [r1, #24]
 8002f44:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 8002f46:	61cb      	str	r3, [r1, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 8002f48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8002f4c:	f105 0760 	add.w	r7, r5, #96	@ 0x60
 8002f50:	f505 74f0 	add.w	r4, r5, #480	@ 0x1e0
  sk += SEEDBYTES;

  for(i=0; i < L; ++i)
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8002f54:	4639      	mov	r1, r7
 8002f56:	4640      	mov	r0, r8
  for(i=0; i < L; ++i)
 8002f58:	3760      	adds	r7, #96	@ 0x60
    polyeta_unpack(&s1->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8002f5a:	f000 fb35 	bl	80035c8 <pqcrystals_dilithium_polyeta_unpack>
  for(i=0; i < L; ++i)
 8002f5e:	42bc      	cmp	r4, r7
 8002f60:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
 8002f64:	d1f6      	bne.n	8002f54 <pqcrystals_dilithium_unpack_sk+0x90>
 8002f66:	9f07      	ldr	r7, [sp, #28]
 8002f68:	f505 7858 	add.w	r8, r5, #864	@ 0x360
  sk += L*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8002f6c:	4621      	mov	r1, r4
 8002f6e:	4638      	mov	r0, r7
  for(i=0; i < K; ++i)
 8002f70:	3460      	adds	r4, #96	@ 0x60
    polyeta_unpack(&s2->vec[i], sk + i*POLYETA_PACKEDBYTES);
 8002f72:	f000 fb29 	bl	80035c8 <pqcrystals_dilithium_polyeta_unpack>
  for(i=0; i < K; ++i)
 8002f76:	4544      	cmp	r4, r8
 8002f78:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002f7c:	d1f6      	bne.n	8002f6c <pqcrystals_dilithium_unpack_sk+0xa8>
 8002f7e:	f505 651e 	add.w	r5, r5, #2528	@ 0x9e0
  sk += K*POLYETA_PACKEDBYTES;

  for(i=0; i < K; ++i)
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8002f82:	4621      	mov	r1, r4
 8002f84:	4630      	mov	r0, r6
  for(i=0; i < K; ++i)
 8002f86:	f504 74d0 	add.w	r4, r4, #416	@ 0x1a0
    polyt0_unpack(&t0->vec[i], sk + i*POLYT0_PACKEDBYTES);
 8002f8a:	f000 fc2d 	bl	80037e8 <pqcrystals_dilithium_polyt0_unpack>
  for(i=0; i < K; ++i)
 8002f8e:	42a5      	cmp	r5, r4
 8002f90:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002f94:	d1f5      	bne.n	8002f82 <pqcrystals_dilithium_unpack_sk+0xbe>
}
 8002f96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f9a:	3801      	subs	r0, #1
 8002f9c:	1e6b      	subs	r3, r5, #1
 8002f9e:	f105 071f 	add.w	r7, r5, #31
    rho[i] = sk[i];
 8002fa2:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8002fa6:	f800 4f01 	strb.w	r4, [r0, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002faa:	429f      	cmp	r7, r3
 8002fac:	d1f9      	bne.n	8002fa2 <pqcrystals_dilithium_unpack_sk+0xde>
 8002fae:	f105 0321 	add.w	r3, r5, #33	@ 0x21
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d8a2      	bhi.n	8002efe <pqcrystals_dilithium_unpack_sk+0x3a>
 8002fb8:	f105 031f 	add.w	r3, r5, #31
 8002fbc:	3a01      	subs	r2, #1
 8002fbe:	f105 043f 	add.w	r4, r5, #63	@ 0x3f
    key[i] = sk[i];
 8002fc2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002fc6:	f802 0f01 	strb.w	r0, [r2, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002fca:	429c      	cmp	r4, r3
 8002fcc:	d1f9      	bne.n	8002fc2 <pqcrystals_dilithium_unpack_sk+0xfe>
 8002fce:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 8002fd2:	1acb      	subs	r3, r1, r3
 8002fd4:	2b02      	cmp	r3, #2
 8002fd6:	d8a7      	bhi.n	8002f28 <pqcrystals_dilithium_unpack_sk+0x64>
 8002fd8:	f105 033f 	add.w	r3, r5, #63	@ 0x3f
 8002fdc:	3901      	subs	r1, #1
 8002fde:	f105 005f 	add.w	r0, r5, #95	@ 0x5f
    tr[i] = sk[i];
 8002fe2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 8002fe6:	f801 2f01 	strb.w	r2, [r1, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 8002fea:	4283      	cmp	r3, r0
 8002fec:	d1f9      	bne.n	8002fe2 <pqcrystals_dilithium_unpack_sk+0x11e>
 8002fee:	e7ab      	b.n	8002f48 <pqcrystals_dilithium_unpack_sk+0x84>

08002ff0 <pqcrystals_dilithium_pack_sig>:
**************************************************/
void pack_sig(uint8_t sig[CRYPTO_BYTES],
              const uint8_t c[SEEDBYTES],
              const polyvecl *z,
              const polyveck *h)
{
 8002ff0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ff4:	4605      	mov	r5, r0
  unsigned int i, j, k;

  for(i=0; i < SEEDBYTES; ++i)
 8002ff6:	1c48      	adds	r0, r1, #1
 8002ff8:	1a28      	subs	r0, r5, r0
 8002ffa:	2802      	cmp	r0, #2
{
 8002ffc:	4690      	mov	r8, r2
 8002ffe:	461f      	mov	r7, r3
 8003000:	d93b      	bls.n	800307a <pqcrystals_dilithium_pack_sig+0x8a>
    sig[i] = c[i];
 8003002:	680b      	ldr	r3, [r1, #0]
 8003004:	602b      	str	r3, [r5, #0]
 8003006:	684b      	ldr	r3, [r1, #4]
 8003008:	606b      	str	r3, [r5, #4]
 800300a:	688b      	ldr	r3, [r1, #8]
 800300c:	60ab      	str	r3, [r5, #8]
 800300e:	68cb      	ldr	r3, [r1, #12]
 8003010:	60eb      	str	r3, [r5, #12]
 8003012:	690b      	ldr	r3, [r1, #16]
 8003014:	612b      	str	r3, [r5, #16]
 8003016:	694b      	ldr	r3, [r1, #20]
 8003018:	616b      	str	r3, [r5, #20]
 800301a:	698b      	ldr	r3, [r1, #24]
 800301c:	61ab      	str	r3, [r5, #24]
 800301e:	69cb      	ldr	r3, [r1, #28]
 8003020:	61eb      	str	r3, [r5, #28]
  for(i=0; i < SEEDBYTES; ++i)
 8003022:	f105 0620 	add.w	r6, r5, #32
 8003026:	f505 6412 	add.w	r4, r5, #2336	@ 0x920
  sig += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 800302a:	4641      	mov	r1, r8
 800302c:	4630      	mov	r0, r6
  for(i = 0; i < L; ++i)
 800302e:	f506 7610 	add.w	r6, r6, #576	@ 0x240
    polyz_pack(sig + i*POLYZ_PACKEDBYTES, &z->vec[i]);
 8003032:	f000 fc57 	bl	80038e4 <pqcrystals_dilithium_polyz_pack>
  for(i = 0; i < L; ++i)
 8003036:	42b4      	cmp	r4, r6
 8003038:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
 800303c:	d1f5      	bne.n	800302a <pqcrystals_dilithium_pack_sig+0x3a>
  sig += L*POLYZ_PACKEDBYTES;

  /* Encode h */
  for(i = 0; i < OMEGA + K; ++i)
    sig[i] = 0;
 800303e:	2254      	movs	r2, #84	@ 0x54
 8003040:	2100      	movs	r1, #0
 8003042:	4620      	mov	r0, r4
 8003044:	f002 fc58 	bl	80058f8 <memset>
 8003048:	1f3e      	subs	r6, r7, #4
 800304a:	f605 1c6f 	addw	ip, r5, #2415	@ 0x96f

  k = 0;
 800304e:	2000      	movs	r0, #0
 8003050:	f605 1573 	addw	r5, r5, #2419	@ 0x973
{
 8003054:	4632      	mov	r2, r6
  for(i = 0; i < K; ++i) {
    for(j = 0; j < N; ++j)
 8003056:	2300      	movs	r3, #0
      if(h->vec[i].coeffs[j] != 0)
 8003058:	f852 1f04 	ldr.w	r1, [r2, #4]!
 800305c:	b109      	cbz	r1, 8003062 <pqcrystals_dilithium_pack_sig+0x72>
        sig[k++] = j;
 800305e:	5423      	strb	r3, [r4, r0]
 8003060:	3001      	adds	r0, #1
    for(j = 0; j < N; ++j)
 8003062:	3301      	adds	r3, #1
 8003064:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003068:	d1f6      	bne.n	8003058 <pqcrystals_dilithium_pack_sig+0x68>

    sig[OMEGA + i] = k;
 800306a:	f80c 0f01 	strb.w	r0, [ip, #1]!
  for(i = 0; i < K; ++i) {
 800306e:	45ac      	cmp	ip, r5
 8003070:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003074:	d1ee      	bne.n	8003054 <pqcrystals_dilithium_pack_sig+0x64>
  }
}
 8003076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800307a:	1e4c      	subs	r4, r1, #1
 800307c:	1e6b      	subs	r3, r5, #1
 800307e:	311f      	adds	r1, #31
    sig[i] = c[i];
 8003080:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 8003084:	f803 2f01 	strb.w	r2, [r3, #1]!
  for(i=0; i < SEEDBYTES; ++i)
 8003088:	42a1      	cmp	r1, r4
 800308a:	d1f9      	bne.n	8003080 <pqcrystals_dilithium_pack_sig+0x90>
 800308c:	e7c9      	b.n	8003022 <pqcrystals_dilithium_pack_sig+0x32>
 800308e:	bf00      	nop

08003090 <pqcrystals_dilithium_unpack_sig>:
**************************************************/
int unpack_sig(uint8_t c[SEEDBYTES],
               polyvecl *z,
               polyveck *h,
               const uint8_t sig[CRYPTO_BYTES])
{
 8003090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003094:	461d      	mov	r5, r3
 8003096:	4603      	mov	r3, r0
 8003098:	1c68      	adds	r0, r5, #1
 800309a:	1a18      	subs	r0, r3, r0
 800309c:	2802      	cmp	r0, #2
 800309e:	460f      	mov	r7, r1
 80030a0:	4616      	mov	r6, r2
  unsigned int i, j, k;

  for(i = 0; i < SEEDBYTES; ++i)
 80030a2:	d962      	bls.n	800316a <pqcrystals_dilithium_unpack_sig+0xda>
    c[i] = sig[i];
 80030a4:	682a      	ldr	r2, [r5, #0]
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	686a      	ldr	r2, [r5, #4]
 80030aa:	605a      	str	r2, [r3, #4]
 80030ac:	68aa      	ldr	r2, [r5, #8]
 80030ae:	609a      	str	r2, [r3, #8]
 80030b0:	68ea      	ldr	r2, [r5, #12]
 80030b2:	60da      	str	r2, [r3, #12]
 80030b4:	692a      	ldr	r2, [r5, #16]
 80030b6:	611a      	str	r2, [r3, #16]
 80030b8:	696a      	ldr	r2, [r5, #20]
 80030ba:	615a      	str	r2, [r3, #20]
 80030bc:	69aa      	ldr	r2, [r5, #24]
 80030be:	619a      	str	r2, [r3, #24]
 80030c0:	69ea      	ldr	r2, [r5, #28]
 80030c2:	61da      	str	r2, [r3, #28]
  for(i = 0; i < SEEDBYTES; ++i)
 80030c4:	f105 0420 	add.w	r4, r5, #32
 80030c8:	f505 6812 	add.w	r8, r5, #2336	@ 0x920
  sig += SEEDBYTES;

  for(i = 0; i < L; ++i)
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES,0);
 80030cc:	4621      	mov	r1, r4
 80030ce:	4638      	mov	r0, r7
 80030d0:	2200      	movs	r2, #0
  for(i = 0; i < L; ++i)
 80030d2:	f504 7410 	add.w	r4, r4, #576	@ 0x240
    polyz_unpack(&z->vec[i], sig + i*POLYZ_PACKEDBYTES,0);
 80030d6:	f000 fc45 	bl	8003964 <pqcrystals_dilithium_polyz_unpack>
  for(i = 0; i < L; ++i)
 80030da:	45a0      	cmp	r8, r4
 80030dc:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80030e0:	d1f4      	bne.n	80030cc <pqcrystals_dilithium_unpack_sig+0x3c>
  sig += L*POLYZ_PACKEDBYTES;

  /* Decode h */
  k = 0;
  for(i = 0; i < K; ++i) {
 80030e2:	f605 196f 	addw	r9, r5, #2415	@ 0x96f
  k = 0;
 80030e6:	2400      	movs	r4, #0
 80030e8:	464f      	mov	r7, r9
  for(i = 0; i < K; ++i) {
 80030ea:	46a0      	mov	r8, r4
    for(j = 0; j < N; ++j)
      h->vec[i].coeffs[j] = 0;
 80030ec:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80030f0:	2100      	movs	r1, #0
 80030f2:	eb06 2088 	add.w	r0, r6, r8, lsl #10
 80030f6:	f002 fbff 	bl	80058f8 <memset>

    if(sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA)
 80030fa:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 80030fe:	42a1      	cmp	r1, r4
 8003100:	460a      	mov	r2, r1
 8003102:	f04f 0301 	mov.w	r3, #1
 8003106:	d32d      	bcc.n	8003164 <pqcrystals_dilithium_unpack_sig+0xd4>
 8003108:	2950      	cmp	r1, #80	@ 0x50
 800310a:	d82b      	bhi.n	8003164 <pqcrystals_dilithium_unpack_sig+0xd4>
      return 1;

    for(j = k; j < sig[OMEGA + i]; ++j) {
 800310c:	42a1      	cmp	r1, r4
 800310e:	d916      	bls.n	800313e <pqcrystals_dilithium_unpack_sig+0xae>
 8003110:	f604 101f 	addw	r0, r4, #2335	@ 0x91f
 8003114:	4428      	add	r0, r5
 8003116:	4621      	mov	r1, r4
      /* Coefficients are ordered for strong unforgeability */
      if(j > k && sig[j] <= sig[j-1]) return 1;
      h->vec[i].coeffs[sig[j]] = 1;
 8003118:	ea4f 2e08 	mov.w	lr, r8, lsl #8
      if(j > k && sig[j] <= sig[j-1]) return 1;
 800311c:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8003120:	42a1      	cmp	r1, r4
      h->vec[i].coeffs[sig[j]] = 1;
 8003122:	eb0e 0c02 	add.w	ip, lr, r2
    for(j = k; j < sig[OMEGA + i]; ++j) {
 8003126:	f101 0101 	add.w	r1, r1, #1
      if(j > k && sig[j] <= sig[j-1]) return 1;
 800312a:	d903      	bls.n	8003134 <pqcrystals_dilithium_unpack_sig+0xa4>
 800312c:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 8003130:	4592      	cmp	sl, r2
 8003132:	d217      	bcs.n	8003164 <pqcrystals_dilithium_unpack_sig+0xd4>
      h->vec[i].coeffs[sig[j]] = 1;
 8003134:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
    for(j = k; j < sig[OMEGA + i]; ++j) {
 8003138:	783a      	ldrb	r2, [r7, #0]
 800313a:	428a      	cmp	r2, r1
 800313c:	d8ee      	bhi.n	800311c <pqcrystals_dilithium_unpack_sig+0x8c>
  for(i = 0; i < K; ++i) {
 800313e:	f108 0801 	add.w	r8, r8, #1
 8003142:	f1b8 0f04 	cmp.w	r8, #4
 8003146:	d001      	beq.n	800314c <pqcrystals_dilithium_unpack_sig+0xbc>
 8003148:	4614      	mov	r4, r2
 800314a:	e7cf      	b.n	80030ec <pqcrystals_dilithium_unpack_sig+0x5c>

    k = sig[OMEGA + i];
  }

  /* Extra indices are zero for strong unforgeability */
  for(j = k; j < OMEGA; ++j)
 800314c:	2a4f      	cmp	r2, #79	@ 0x4f
 800314e:	d817      	bhi.n	8003180 <pqcrystals_dilithium_unpack_sig+0xf0>
 8003150:	f602 121f 	addw	r2, r2, #2335	@ 0x91f
 8003154:	4415      	add	r5, r2
 8003156:	e001      	b.n	800315c <pqcrystals_dilithium_unpack_sig+0xcc>
 8003158:	454d      	cmp	r5, r9
 800315a:	d004      	beq.n	8003166 <pqcrystals_dilithium_unpack_sig+0xd6>
    if(sig[j])
 800315c:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 8003160:	2800      	cmp	r0, #0
 8003162:	d0f9      	beq.n	8003158 <pqcrystals_dilithium_unpack_sig+0xc8>
      return 1;
 8003164:	2001      	movs	r0, #1
      return 1;

  return 0;
}
 8003166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800316a:	1e6a      	subs	r2, r5, #1
 800316c:	3b01      	subs	r3, #1
 800316e:	f105 0c1f 	add.w	ip, r5, #31
    c[i] = sig[i];
 8003172:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 8003176:	f803 4f01 	strb.w	r4, [r3, #1]!
  for(i = 0; i < SEEDBYTES; ++i)
 800317a:	4562      	cmp	r2, ip
 800317c:	d1f9      	bne.n	8003172 <pqcrystals_dilithium_unpack_sig+0xe2>
 800317e:	e7a1      	b.n	80030c4 <pqcrystals_dilithium_unpack_sig+0x34>
  return 0;
 8003180:	2000      	movs	r0, #0
 8003182:	e7f0      	b.n	8003166 <pqcrystals_dilithium_unpack_sig+0xd6>

08003184 <pqcrystals_dilithium_poly_reduce>:
*              representative in [-6283009,6283007].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_reduce(poly *a) {
  asm_reduce32(a->coeffs);
 8003184:	f7fd bdee 	b.w	8000d64 <pqcrystals_dilithium_asm_reduce32>

08003188 <pqcrystals_dilithium_poly_caddq>:
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_caddq(poly *a) {
  asm_caddq(a->coeffs);
 8003188:	f7fd be4c 	b.w	8000e24 <pqcrystals_dilithium_asm_caddq>

0800318c <pqcrystals_dilithium_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void poly_add(poly *c, const poly *a, const poly *b)  {
 800318c:	b500      	push	{lr}
 800318e:	f1a1 0c04 	sub.w	ip, r1, #4
 8003192:	f1a2 0e04 	sub.w	lr, r2, #4
 8003196:	1f02      	subs	r2, r0, #4
 8003198:	f501 707f 	add.w	r0, r1, #1020	@ 0x3fc
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 800319c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 80031a0:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for(i = 0; i < N; ++i)
 80031a4:	4584      	cmp	ip, r0
    c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 80031a6:	440b      	add	r3, r1
 80031a8:	f842 3f04 	str.w	r3, [r2, #4]!
  for(i = 0; i < N; ++i)
 80031ac:	d1f6      	bne.n	800319c <pqcrystals_dilithium_poly_add+0x10>

  DBENCH_STOP(*tadd);
}
 80031ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80031b2:	bf00      	nop

080031b4 <pqcrystals_dilithium_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void poly_sub(poly *c, const poly *a, const poly *b) {
 80031b4:	b500      	push	{lr}
 80031b6:	f1a1 0c04 	sub.w	ip, r1, #4
 80031ba:	f1a2 0e04 	sub.w	lr, r2, #4
 80031be:	1f02      	subs	r2, r0, #4
 80031c0:	f501 707f 	add.w	r0, r1, #1020	@ 0x3fc
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80031c4:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 80031c8:	f85e 1f04 	ldr.w	r1, [lr, #4]!
  for(i = 0; i < N; ++i)
 80031cc:	4584      	cmp	ip, r0
    c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 80031ce:	eba3 0301 	sub.w	r3, r3, r1
 80031d2:	f842 3f04 	str.w	r3, [r2, #4]!
  for(i = 0; i < N; ++i)
 80031d6:	d1f5      	bne.n	80031c4 <pqcrystals_dilithium_poly_sub+0x10>

  DBENCH_STOP(*tadd);
}
 80031d8:	f85d fb04 	ldr.w	pc, [sp], #4

080031dc <pqcrystals_dilithium_poly_shiftl>:
**************************************************/
void poly_shiftl(poly *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
 80031dc:	1f03      	subs	r3, r0, #4
 80031de:	f500 717f 	add.w	r1, r0, #1020	@ 0x3fc
    a->coeffs[i] <<= D;
 80031e2:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80031e6:	0352      	lsls	r2, r2, #13
  for(i = 0; i < N; ++i)
 80031e8:	428b      	cmp	r3, r1
    a->coeffs[i] <<= D;
 80031ea:	601a      	str	r2, [r3, #0]
  for(i = 0; i < N; ++i)
 80031ec:	d1f9      	bne.n	80031e2 <pqcrystals_dilithium_poly_shiftl+0x6>

  DBENCH_STOP(*tmul);
}
 80031ee:	4770      	bx	lr

080031f0 <pqcrystals_dilithium_poly_ntt>:
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_ntt(poly *a) {
  DBENCH_START();

  ntt(a->coeffs);
 80031f0:	f7fc bfec 	b.w	80001cc <pqcrystals_dilithium_ntt>

080031f4 <pqcrystals_dilithium_poly_invntt_tomont>:
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void poly_invntt_tomont(poly *a) {
  DBENCH_START();

  invntt_tomont(a->coeffs);
 80031f4:	f7fd ba7a 	b.w	80006ec <pqcrystals_dilithium_invntt_tomont>

080031f8 <pqcrystals_dilithium_poly_pointwise_montgomery>:
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
  DBENCH_START();

  asm_pointwise_montgomery(c->coeffs, a->coeffs, b->coeffs);
 80031f8:	f7fd bd20 	b.w	8000c3c <pqcrystals_dilithium_asm_pointwise_montgomery>

080031fc <pqcrystals_dilithium_poly_pointwise_acc_montgomery>:
*              - const poly *b: pointer to second input polynomial
**************************************************/
void poly_pointwise_acc_montgomery(poly *c, const poly *a, const poly *b) {
  DBENCH_START();

  asm_pointwise_acc_montgomery(c->coeffs, a->coeffs, b->coeffs);
 80031fc:	f7fd bd60 	b.w	8000cc0 <pqcrystals_dilithium_asm_pointwise_acc_montgomery>

08003200 <pqcrystals_dilithium_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_power2round(poly *a1, poly *a0, const poly *a) {
 8003200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003202:	1f15      	subs	r5, r2, #4
 8003204:	460c      	mov	r4, r1
 8003206:	1f06      	subs	r6, r0, #4
 8003208:	f502 777f 	add.w	r7, r2, #1020	@ 0x3fc
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 800320c:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8003210:	4620      	mov	r0, r4
 8003212:	f000 fe5b 	bl	8003ecc <pqcrystals_dilithium_power2round>
  for(i = 0; i < N; ++i)
 8003216:	42bd      	cmp	r5, r7
    a1->coeffs[i] = power2round(&a0->coeffs[i], a->coeffs[i]);
 8003218:	f846 0f04 	str.w	r0, [r6, #4]!
  for(i = 0; i < N; ++i)
 800321c:	f104 0404 	add.w	r4, r4, #4
 8003220:	d1f4      	bne.n	800320c <pqcrystals_dilithium_poly_power2round+0xc>

  DBENCH_STOP(*tround);
}
 8003222:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003224 <pqcrystals_dilithium_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void poly_decompose(poly *a1, poly *a0, const poly *a) {
 8003224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003226:	1f15      	subs	r5, r2, #4
 8003228:	460c      	mov	r4, r1
 800322a:	1f06      	subs	r6, r0, #4
 800322c:	f502 777f 	add.w	r7, r2, #1020	@ 0x3fc
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 8003230:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8003234:	4620      	mov	r0, r4
 8003236:	f000 fe53 	bl	8003ee0 <pqcrystals_dilithium_decompose>
  for(i = 0; i < N; ++i)
 800323a:	42bd      	cmp	r5, r7
    a1->coeffs[i] = decompose(&a0->coeffs[i], a->coeffs[i]);
 800323c:	f846 0f04 	str.w	r0, [r6, #4]!
  for(i = 0; i < N; ++i)
 8003240:	f104 0404 	add.w	r4, r4, #4
 8003244:	d1f4      	bne.n	8003230 <pqcrystals_dilithium_poly_decompose+0xc>

  DBENCH_STOP(*tround);
}
 8003246:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003248 <pqcrystals_dilithium_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8003248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800324c:	1f0c      	subs	r4, r1, #4
 800324e:	1f16      	subs	r6, r2, #4
 8003250:	1f05      	subs	r5, r0, #4
 8003252:	f501 787f 	add.w	r8, r1, #1020	@ 0x3fc
  unsigned int i, s = 0;
 8003256:	2700      	movs	r7, #0
  DBENCH_START();

  for(i = 0; i < N; ++i) {
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8003258:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800325c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8003260:	f000 fe62 	bl	8003f28 <pqcrystals_dilithium_make_hint>
  for(i = 0; i < N; ++i) {
 8003264:	4544      	cmp	r4, r8
    h->coeffs[i] = make_hint(a0->coeffs[i], a1->coeffs[i]);
 8003266:	f845 0f04 	str.w	r0, [r5, #4]!
    s += h->coeffs[i];
 800326a:	4407      	add	r7, r0
  for(i = 0; i < N; ++i) {
 800326c:	d1f4      	bne.n	8003258 <pqcrystals_dilithium_poly_make_hint+0x10>
  }

  DBENCH_STOP(*tround);
  return s;
}
 800326e:	4638      	mov	r0, r7
 8003270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003274 <pqcrystals_dilithium_poly_use_hint>:
*
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
void poly_use_hint(poly *b, const poly *a, const poly *h) {
 8003274:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003276:	1f0c      	subs	r4, r1, #4
 8003278:	1f16      	subs	r6, r2, #4
 800327a:	1f05      	subs	r5, r0, #4
 800327c:	f501 777f 	add.w	r7, r1, #1020	@ 0x3fc
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N; ++i)
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 8003280:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8003284:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8003288:	f000 fe5e 	bl	8003f48 <pqcrystals_dilithium_use_hint>
  for(i = 0; i < N; ++i)
 800328c:	42bc      	cmp	r4, r7
    b->coeffs[i] = use_hint(a->coeffs[i], h->coeffs[i]);
 800328e:	f845 0f04 	str.w	r0, [r5, #4]!
  for(i = 0; i < N; ++i)
 8003292:	d1f5      	bne.n	8003280 <pqcrystals_dilithium_poly_use_hint+0xc>

  DBENCH_STOP(*tround);
}
 8003294:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003296:	bf00      	nop

08003298 <pqcrystals_dilithium_poly_chknorm>:
int poly_chknorm(const poly *a, int32_t B) {
  unsigned int i;
  int32_t t;
  DBENCH_START();

  if(B > (Q-1)/8)
 8003298:	4b0a      	ldr	r3, [pc, #40]	@ (80032c4 <pqcrystals_dilithium_poly_chknorm+0x2c>)
 800329a:	4299      	cmp	r1, r3
 800329c:	dc0e      	bgt.n	80032bc <pqcrystals_dilithium_poly_chknorm+0x24>
 800329e:	f1a0 0c04 	sub.w	ip, r0, #4
 80032a2:	f500 707f 	add.w	r0, r0, #1020	@ 0x3fc
 80032a6:	e001      	b.n	80032ac <pqcrystals_dilithium_poly_chknorm+0x14>
    return 1;

  /* It is ok to leak which coefficient violates the bound since
     the probability for each coefficient is independent of secret
     data but we must not leak the sign of the centralized representative. */
  for(i = 0; i < N; ++i) {
 80032a8:	4584      	cmp	ip, r0
 80032aa:	d009      	beq.n	80032c0 <pqcrystals_dilithium_poly_chknorm+0x28>
    /* Absolute value */
    t = a->coeffs[i] >> 31;
 80032ac:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 80032b0:	17da      	asrs	r2, r3, #31
    t = a->coeffs[i] - (t & 2*a->coeffs[i]);
 80032b2:	ea02 0243 	and.w	r2, r2, r3, lsl #1
 80032b6:	1a9b      	subs	r3, r3, r2

    if(t >= B) {
 80032b8:	4299      	cmp	r1, r3
 80032ba:	dcf5      	bgt.n	80032a8 <pqcrystals_dilithium_poly_chknorm+0x10>
    return 1;
 80032bc:	2001      	movs	r0, #1
    }
  }

  DBENCH_STOP(*tsample);
  return 0;
}
 80032be:	4770      	bx	lr
  return 0;
 80032c0:	2000      	movs	r0, #0
 80032c2:	4770      	bx	lr
 80032c4:	000ffc00 	.word	0x000ffc00

080032c8 <pqcrystals_dilithium_poly_uniform>:
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void poly_uniform(poly *a,
                  const uint8_t seed[SEEDBYTES],
                  uint16_t nonce)
{
 80032c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032cc:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
 80032d0:	4607      	mov	r7, r0
  unsigned int i, ctr, off;
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES + 2];
  stream128_state state;

  stream128_init(&state, seed, nonce);
 80032d2:	4668      	mov	r0, sp
 80032d4:	f001 fae6 	bl	80048a4 <pqcrystals_dilithium_dilithium_shake128_stream_init>
  stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 80032d8:	f44f 7152 	mov.w	r1, #840	@ 0x348
 80032dc:	466a      	mov	r2, sp
 80032de:	a835      	add	r0, sp, #212	@ 0xd4
 80032e0:	f7fe f820 	bl	8001324 <shake128_inc_squeeze>

  ctr = asm_rej_uniform(a->coeffs, N, buf, buflen);
 80032e4:	f44f 7352 	mov.w	r3, #840	@ 0x348
 80032e8:	aa35      	add	r2, sp, #212	@ 0xd4
 80032ea:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80032ee:	4638      	mov	r0, r7
 80032f0:	f7fd fde0 	bl	8000eb4 <pqcrystals_dilithium_asm_rej_uniform>

  while(ctr < N) {
 80032f4:	28ff      	cmp	r0, #255	@ 0xff
 80032f6:	d82c      	bhi.n	8003352 <pqcrystals_dilithium_poly_uniform+0x8a>
    off = buflen % 3;
 80032f8:	f8df 8060 	ldr.w	r8, [pc, #96]	@ 800335c <pqcrystals_dilithium_poly_uniform+0x94>
 80032fc:	4606      	mov	r6, r0
  unsigned int buflen = POLY_UNIFORM_NBLOCKS*STREAM128_BLOCKBYTES;
 80032fe:	f44f 7552 	mov.w	r5, #840	@ 0x348
    off = buflen % 3;
 8003302:	fba8 2305 	umull	r2, r3, r8, r5
 8003306:	f023 0401 	bic.w	r4, r3, #1
 800330a:	eb04 0453 	add.w	r4, r4, r3, lsr #1
    for(i = 0; i < off; ++i)
 800330e:	1b2c      	subs	r4, r5, r4
      buf[i] = buf[buflen - off + i];
 8003310:	eba5 0504 	sub.w	r5, r5, r4
 8003314:	ab35      	add	r3, sp, #212	@ 0xd4
 8003316:	442b      	add	r3, r5
    for(i = 0; i < off; ++i)
 8003318:	d008      	beq.n	800332c <pqcrystals_dilithium_poly_uniform+0x64>
      buf[i] = buf[buflen - off + i];
 800331a:	aa35      	add	r2, sp, #212	@ 0xd4
    for(i = 0; i < off; ++i)
 800331c:	2c02      	cmp	r4, #2
      buf[i] = buf[buflen - off + i];
 800331e:	5d52      	ldrb	r2, [r2, r5]
 8003320:	f88d 20d4 	strb.w	r2, [sp, #212]	@ 0xd4
    for(i = 0; i < off; ++i)
 8003324:	d102      	bne.n	800332c <pqcrystals_dilithium_poly_uniform+0x64>
      buf[i] = buf[buflen - off + i];
 8003326:	785b      	ldrb	r3, [r3, #1]
 8003328:	f88d 30d5 	strb.w	r3, [sp, #213]	@ 0xd5

    stream128_squeezeblocks(buf + off, 1, &state);
 800332c:	ab35      	add	r3, sp, #212	@ 0xd4
 800332e:	1918      	adds	r0, r3, r4
 8003330:	21a8      	movs	r1, #168	@ 0xa8
 8003332:	466a      	mov	r2, sp
    buflen = STREAM128_BLOCKBYTES + off;
 8003334:	f104 05a8 	add.w	r5, r4, #168	@ 0xa8
    stream128_squeezeblocks(buf + off, 1, &state);
 8003338:	f7fd fff4 	bl	8001324 <shake128_inc_squeeze>
    ctr += asm_rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 800333c:	f5c6 7180 	rsb	r1, r6, #256	@ 0x100
 8003340:	eb07 0086 	add.w	r0, r7, r6, lsl #2
 8003344:	462b      	mov	r3, r5
 8003346:	aa35      	add	r2, sp, #212	@ 0xd4
 8003348:	f7fd fdb4 	bl	8000eb4 <pqcrystals_dilithium_asm_rej_uniform>
 800334c:	4406      	add	r6, r0
  while(ctr < N) {
 800334e:	2eff      	cmp	r6, #255	@ 0xff
 8003350:	d9d7      	bls.n	8003302 <pqcrystals_dilithium_poly_uniform+0x3a>
  }
}
 8003352:	f50d 6d84 	add.w	sp, sp, #1056	@ 0x420
 8003356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800335a:	bf00      	nop
 800335c:	aaaaaaab 	.word	0xaaaaaaab

08003360 <pqcrystals_dilithium_poly_uniform_eta>:
#elif ETA == 4
#define POLY_UNIFORM_ETA_NBLOCKS ((227 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
#endif
void poly_uniform_eta(poly *a,
        const uint8_t seed[CRHBYTES],
        uint16_t nonce) {
 8003360:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003362:	b0d7      	sub	sp, #348	@ 0x15c
  unsigned int ctr;
  unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
  uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
  stream256_state state;

  stream256_init(&state, seed, nonce);
 8003364:	ac22      	add	r4, sp, #136	@ 0x88
        uint16_t nonce) {
 8003366:	4605      	mov	r5, r0
  stream256_init(&state, seed, nonce);
 8003368:	4620      	mov	r0, r4
 800336a:	f001 fab3 	bl	80048d4 <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 800336e:	4668      	mov	r0, sp
 8003370:	2188      	movs	r1, #136	@ 0x88
 8003372:	4622      	mov	r2, r4
 8003374:	f7fe f890 	bl	8001498 <shake256_inc_squeeze>
  ctr = pos = 0;
 8003378:	2600      	movs	r6, #0

  ctr = rej_eta(a->coeffs, N, buf, buflen);
 800337a:	4668      	mov	r0, sp
    t0 = buf[pos] & 0x0F;
 800337c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003380:	f002 010f 	and.w	r1, r2, #15
      t0 = t0 - (205*t0 >> 10)*5;
 8003384:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 8003388:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800338c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003390:	0a9b      	lsrs	r3, r3, #10
 8003392:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      a[ctr++] = 2 - t0;
 8003396:	f1c1 0c02 	rsb	ip, r1, #2
    if(t0 < 15) {
 800339a:	290f      	cmp	r1, #15
      a[ctr++] = 2 - t0;
 800339c:	f106 0701 	add.w	r7, r6, #1
 80033a0:	4463      	add	r3, ip
    t1 = buf[pos++] >> 4;
 80033a2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if(t0 < 15) {
 80033a6:	d008      	beq.n	80033ba <pqcrystals_dilithium_poly_uniform_eta+0x5a>
    if(t1 < 15 && ctr < len) {
 80033a8:	2a0f      	cmp	r2, #15
      a[ctr++] = 2 - t0;
 80033aa:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
    if(t1 < 15 && ctr < len) {
 80033ae:	d05b      	beq.n	8003468 <pqcrystals_dilithium_poly_uniform_eta+0x108>
 80033b0:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
 80033b4:	d15a      	bne.n	800346c <pqcrystals_dilithium_poly_uniform_eta+0x10c>

  while(ctr < N) {
    stream256_squeezeblocks(buf, 1, &state);
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
  }
}
 80033b6:	b057      	add	sp, #348	@ 0x15c
 80033b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(t1 < 15 && ctr < len) {
 80033ba:	2a0f      	cmp	r2, #15
 80033bc:	d011      	beq.n	80033e2 <pqcrystals_dilithium_poly_uniform_eta+0x82>
      t1 = t1 - (205*t1 >> 10)*5;
 80033be:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80033c2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80033c6:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80033ca:	0a9b      	lsrs	r3, r3, #10
 80033cc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      a[ctr++] = 2 - t1;
 80033d0:	f1c2 0202 	rsb	r2, r2, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
 80033da:	3601      	adds	r6, #1
  while(ctr < len && pos < buflen) {
 80033dc:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80033e0:	d0e9      	beq.n	80033b6 <pqcrystals_dilithium_poly_uniform_eta+0x56>
 80033e2:	42a0      	cmp	r0, r4
 80033e4:	d1ca      	bne.n	800337c <pqcrystals_dilithium_poly_uniform_eta+0x1c>
 80033e6:	e00c      	b.n	8003402 <pqcrystals_dilithium_poly_uniform_eta+0xa2>
      t1 = t1 - (205*t1 >> 10)*5;
 80033e8:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 80033ec:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80033f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    if(t1 < 15 && ctr < len) {
 80033f4:	458c      	cmp	ip, r1
      t1 = t1 - (205*t1 >> 10)*5;
 80033f6:	ea4f 2393 	mov.w	r3, r3, lsr #10
    if(t1 < 15 && ctr < len) {
 80033fa:	d82c      	bhi.n	8003456 <pqcrystals_dilithium_poly_uniform_eta+0xf6>
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 80033fc:	440e      	add	r6, r1
  while(ctr < N) {
 80033fe:	2eff      	cmp	r6, #255	@ 0xff
 8003400:	d8d9      	bhi.n	80033b6 <pqcrystals_dilithium_poly_uniform_eta+0x56>
    stream256_squeezeblocks(buf, 1, &state);
 8003402:	2188      	movs	r1, #136	@ 0x88
 8003404:	4668      	mov	r0, sp
 8003406:	4622      	mov	r2, r4
 8003408:	f7fe f846 	bl	8001498 <shake256_inc_squeeze>
  ctr = pos = 0;
 800340c:	2100      	movs	r1, #0
    ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 800340e:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8003412:	f5c6 7c80 	rsb	ip, r6, #256	@ 0x100
 8003416:	4668      	mov	r0, sp
    t0 = buf[pos] & 0x0F;
 8003418:	f810 2b01 	ldrb.w	r2, [r0], #1
 800341c:	f002 070f 	and.w	r7, r2, #15
      t0 = t0 - (205*t0 >> 10)*5;
 8003420:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8003424:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8003428:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    if(t0 < 15) {
 800342c:	2f0f      	cmp	r7, #15
    t1 = buf[pos++] >> 4;
 800342e:	ea4f 1212 	mov.w	r2, r2, lsr #4
      t0 = t0 - (205*t0 >> 10)*5;
 8003432:	ea4f 2393 	mov.w	r3, r3, lsr #10
    if(t0 < 15) {
 8003436:	d007      	beq.n	8003448 <pqcrystals_dilithium_poly_uniform_eta+0xe8>
      t0 = t0 - (205*t0 >> 10)*5;
 8003438:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      a[ctr++] = 2 - t0;
 800343c:	f1c7 0702 	rsb	r7, r7, #2
 8003440:	443b      	add	r3, r7
 8003442:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8003446:	3101      	adds	r1, #1
    if(t1 < 15 && ctr < len) {
 8003448:	2a0f      	cmp	r2, #15
 800344a:	d1cd      	bne.n	80033e8 <pqcrystals_dilithium_poly_uniform_eta+0x88>
  while(ctr < len && pos < buflen) {
 800344c:	458c      	cmp	ip, r1
 800344e:	d9d5      	bls.n	80033fc <pqcrystals_dilithium_poly_uniform_eta+0x9c>
 8003450:	42a0      	cmp	r0, r4
 8003452:	d1e1      	bne.n	8003418 <pqcrystals_dilithium_poly_uniform_eta+0xb8>
 8003454:	e7d2      	b.n	80033fc <pqcrystals_dilithium_poly_uniform_eta+0x9c>
      t1 = t1 - (205*t1 >> 10)*5;
 8003456:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      a[ctr++] = 2 - t1;
 800345a:	f1c2 0202 	rsb	r2, r2, #2
 800345e:	4413      	add	r3, r2
 8003460:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8003464:	3101      	adds	r1, #1
 8003466:	e7f1      	b.n	800344c <pqcrystals_dilithium_poly_uniform_eta+0xec>
 8003468:	463e      	mov	r6, r7
 800346a:	e7b7      	b.n	80033dc <pqcrystals_dilithium_poly_uniform_eta+0x7c>
 800346c:	463e      	mov	r6, r7
 800346e:	e7a6      	b.n	80033be <pqcrystals_dilithium_poly_uniform_eta+0x5e>

08003470 <pqcrystals_dilithium_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length SEEDBYTES
**************************************************/
void poly_challenge(poly *c, const uint8_t seed[SEEDBYTES]) {
 8003470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003472:	b0d7      	sub	sp, #348	@ 0x15c
 8003474:	460c      	mov	r4, r1
 8003476:	4607      	mov	r7, r0
  unsigned int i, b, pos;
  uint64_t signs;
  uint8_t buf[SHAKE256_RATE];
  shake256incctx state;

  shake256_inc_init(&state);
 8003478:	a822      	add	r0, sp, #136	@ 0x88
 800347a:	f7fd ff99 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, seed, SEEDBYTES);
 800347e:	4621      	mov	r1, r4
 8003480:	2220      	movs	r2, #32
 8003482:	a822      	add	r0, sp, #136	@ 0x88
 8003484:	f7fd ffa0 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 8003488:	a822      	add	r0, sp, #136	@ 0x88
 800348a:	f7fd ffd9 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeezeblocks(buf, 1, &state);
 800348e:	2188      	movs	r1, #136	@ 0x88
 8003490:	eb0d 0201 	add.w	r2, sp, r1
 8003494:	4668      	mov	r0, sp
 8003496:	f7fd ffff 	bl	8001498 <shake256_inc_squeeze>

  signs = 0;
  for(i = 0; i < 8; ++i)
    signs |= (uint64_t)buf[i] << 8*i;
 800349a:	f89d 5001 	ldrb.w	r5, [sp, #1]
 800349e:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80034a2:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80034a6:	022d      	lsls	r5, r5, #8
 80034a8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80034ac:	f89d 3000 	ldrb.w	r3, [sp]
 80034b0:	431d      	orrs	r5, r3
 80034b2:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80034b6:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80034ba:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80034be:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 80034c2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80034c6:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 80034ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
  pos = 8;

  for(i = 0; i < N; ++i)
    c->coeffs[i] = 0;
 80034ce:	2100      	movs	r1, #0
 80034d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80034d4:	4638      	mov	r0, r7
    signs |= (uint64_t)buf[i] << 8*i;
 80034d6:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
  for(i = N-TAU; i < N; ++i) {
 80034da:	24d9      	movs	r4, #217	@ 0xd9
    c->coeffs[i] = 0;
 80034dc:	f002 fa0c 	bl	80058f8 <memset>
  pos = 8;
 80034e0:	2108      	movs	r1, #8
 80034e2:	e005      	b.n	80034f0 <pqcrystals_dilithium_poly_challenge+0x80>
      if(pos >= SHAKE256_RATE) {
        shake256_inc_squeezeblocks(buf, 1, &state);
        pos = 0;
      }

      b = buf[pos++];
 80034e4:	f81d 3001 	ldrb.w	r3, [sp, r1]
    } while(b > i);
 80034e8:	429c      	cmp	r4, r3
      b = buf[pos++];
 80034ea:	f101 0101 	add.w	r1, r1, #1
    } while(b > i);
 80034ee:	d20f      	bcs.n	8003510 <pqcrystals_dilithium_poly_challenge+0xa0>
      if(pos >= SHAKE256_RATE) {
 80034f0:	2988      	cmp	r1, #136	@ 0x88
 80034f2:	d1f7      	bne.n	80034e4 <pqcrystals_dilithium_poly_challenge+0x74>
        shake256_inc_squeezeblocks(buf, 1, &state);
 80034f4:	aa22      	add	r2, sp, #136	@ 0x88
 80034f6:	4668      	mov	r0, sp
 80034f8:	f7fd ffce 	bl	8001498 <shake256_inc_squeeze>
      b = buf[pos++];
 80034fc:	f89d 3000 	ldrb.w	r3, [sp]
    } while(b > i);
 8003500:	42a3      	cmp	r3, r4
      b = buf[pos++];
 8003502:	f04f 0102 	mov.w	r1, #2
    } while(b > i);
 8003506:	d919      	bls.n	800353c <pqcrystals_dilithium_poly_challenge+0xcc>
      b = buf[pos++];
 8003508:	f89d 3001 	ldrb.w	r3, [sp, #1]
    } while(b > i);
 800350c:	42a3      	cmp	r3, r4
 800350e:	d8e9      	bhi.n	80034e4 <pqcrystals_dilithium_poly_challenge+0x74>

    c->coeffs[i] = c->coeffs[b];
 8003510:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8003514:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
    c->coeffs[b] = 1 - 2*(signs & 1);
 8003518:	f005 0201 	and.w	r2, r5, #1
 800351c:	0052      	lsls	r2, r2, #1
  for(i = N-TAU; i < N; ++i) {
 800351e:	3401      	adds	r4, #1
    c->coeffs[b] = 1 - 2*(signs & 1);
 8003520:	f1c2 0201 	rsb	r2, r2, #1
    signs >>= 1;
 8003524:	086d      	lsrs	r5, r5, #1
  for(i = N-TAU; i < N; ++i) {
 8003526:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
    signs >>= 1;
 800352a:	ea45 75c6 	orr.w	r5, r5, r6, lsl #31
    c->coeffs[b] = 1 - 2*(signs & 1);
 800352e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
    signs >>= 1;
 8003532:	ea4f 0656 	mov.w	r6, r6, lsr #1
  for(i = N-TAU; i < N; ++i) {
 8003536:	d1db      	bne.n	80034f0 <pqcrystals_dilithium_poly_challenge+0x80>
  }
}
 8003538:	b057      	add	sp, #348	@ 0x15c
 800353a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800353c:	2101      	movs	r1, #1
 800353e:	e7e7      	b.n	8003510 <pqcrystals_dilithium_poly_challenge+0xa0>

08003540 <pqcrystals_dilithium_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyeta_pack(uint8_t *r, const poly *a) {
 8003540:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003544:	f501 6480 	add.w	r4, r1, #1024	@ 0x400

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    t[0] = ETA - a->coeffs[8*i+0];
    t[1] = ETA - a->coeffs[8*i+1];
    t[2] = ETA - a->coeffs[8*i+2];
 8003548:	e9d1 6302 	ldrd	r6, r3, [r1, #8]
    t[3] = ETA - a->coeffs[8*i+3];
    t[4] = ETA - a->coeffs[8*i+4];
    t[5] = ETA - a->coeffs[8*i+5];
 800354c:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
    t[6] = ETA - a->coeffs[8*i+6];
 8003550:	698a      	ldr	r2, [r1, #24]
    t[7] = ETA - a->coeffs[8*i+7];
 8003552:	f8d1 901c 	ldr.w	r9, [r1, #28]
    t[1] = ETA - a->coeffs[8*i+1];
 8003556:	f8d1 8004 	ldr.w	r8, [r1, #4]
    t[3] = ETA - a->coeffs[8*i+3];
 800355a:	f1c3 0302 	rsb	r3, r3, #2
    t[2] = ETA - a->coeffs[8*i+2];
 800355e:	f1c6 0e02 	rsb	lr, r6, #2
    t[3] = ETA - a->coeffs[8*i+3];
 8003562:	b2db      	uxtb	r3, r3
    t[6] = ETA - a->coeffs[8*i+6];
 8003564:	f1c2 0202 	rsb	r2, r2, #2
    t[0] = ETA - a->coeffs[8*i+0];
 8003568:	f851 6b20 	ldr.w	r6, [r1], #32
    t[2] = ETA - a->coeffs[8*i+2];
 800356c:	fa5f fe8e 	uxtb.w	lr, lr
    t[4] = ETA - a->coeffs[8*i+4];
 8003570:	f1c7 0702 	rsb	r7, r7, #2
    t[5] = ETA - a->coeffs[8*i+5];
 8003574:	f1c5 0502 	rsb	r5, r5, #2
    t[6] = ETA - a->coeffs[8*i+6];
 8003578:	b2d2      	uxtb	r2, r2

    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 800357a:	005b      	lsls	r3, r3, #1
    t[5] = ETA - a->coeffs[8*i+5];
 800357c:	b2ed      	uxtb	r5, r5
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 800357e:	ea4f 1c8e 	mov.w	ip, lr, lsl #6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8003582:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
    t[4] = ETA - a->coeffs[8*i+4];
 8003586:	b2ff      	uxtb	r7, r7
    t[7] = ETA - a->coeffs[8*i+7];
 8003588:	f1c9 0902 	rsb	r9, r9, #2
    t[1] = ETA - a->coeffs[8*i+1];
 800358c:	f1c8 0802 	rsb	r8, r8, #2
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8003590:	0092      	lsls	r2, r2, #2
    t[7] = ETA - a->coeffs[8*i+7];
 8003592:	fa5f fe89 	uxtb.w	lr, r9
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8003596:	ea4c 0cc8 	orr.w	ip, ip, r8, lsl #3
    t[0] = ETA - a->coeffs[8*i+0];
 800359a:	f1c6 0602 	rsb	r6, r6, #2
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 800359e:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 80035a2:	ea42 0255 	orr.w	r2, r2, r5, lsr #1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 80035a6:	ea4c 0c06 	orr.w	ip, ip, r6
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 80035aa:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 80035ae:	ea42 124e 	orr.w	r2, r2, lr, lsl #5
  for(i = 0; i < N/8; ++i) {
 80035b2:	428c      	cmp	r4, r1
    r[3*i+0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 80035b4:	f880 c000 	strb.w	ip, [r0]
    r[3*i+1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 80035b8:	7043      	strb	r3, [r0, #1]
    r[3*i+2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 80035ba:	7082      	strb	r2, [r0, #2]
  for(i = 0; i < N/8; ++i) {
 80035bc:	f100 0003 	add.w	r0, r0, #3
 80035c0:	d1c2      	bne.n	8003548 <pqcrystals_dilithium_polyeta_pack+0x8>
    r[i] = t[0] | (t[1] << 4);
  }
#endif

  DBENCH_STOP(*tpack);
}
 80035c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80035c6:	bf00      	nop

080035c8 <pqcrystals_dilithium_polyeta_unpack>:
* Description: Unpack polynomial with coefficients in [-ETA,ETA].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyeta_unpack(poly *r, const uint8_t *a) {
 80035c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80035cc:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
  unsigned int i;
  DBENCH_START();

#if ETA == 2
  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 80035d0:	780c      	ldrb	r4, [r1, #0]
  for(i = 0; i < N/8; ++i) {
 80035d2:	3020      	adds	r0, #32
    r->coeffs[8*i+0] =  (a[3*i+0] >> 0) & 7;
 80035d4:	f004 0407 	and.w	r4, r4, #7
 80035d8:	f840 4c20 	str.w	r4, [r0, #-32]
    r->coeffs[8*i+1] =  (a[3*i+0] >> 3) & 7;
 80035dc:	780e      	ldrb	r6, [r1, #0]
 80035de:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 80035e2:	f840 6c1c 	str.w	r6, [r0, #-28]
    r->coeffs[8*i+2] = ((a[3*i+0] >> 6) | (a[3*i+1] << 2)) & 7;
 80035e6:	784b      	ldrb	r3, [r1, #1]
 80035e8:	780a      	ldrb	r2, [r1, #0]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 80035f0:	f003 0307 	and.w	r3, r3, #7
 80035f4:	f840 3c18 	str.w	r3, [r0, #-24]
    r->coeffs[8*i+3] =  (a[3*i+1] >> 1) & 7;
 80035f8:	f891 e001 	ldrb.w	lr, [r1, #1]
 80035fc:	f3ce 0542 	ubfx	r5, lr, #1, #3
 8003600:	f840 5c14 	str.w	r5, [r0, #-20]
    r->coeffs[8*i+4] =  (a[3*i+1] >> 4) & 7;
 8003604:	f891 8001 	ldrb.w	r8, [r1, #1]
 8003608:	f3c8 1802 	ubfx	r8, r8, #4, #3
 800360c:	f840 8c10 	str.w	r8, [r0, #-16]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;

    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
    r->coeffs[8*i+2] = ETA - r->coeffs[8*i+2];
 8003610:	f1c3 0702 	rsb	r7, r3, #2
    r->coeffs[8*i+5] = ((a[3*i+1] >> 7) | (a[3*i+2] << 1)) & 7;
 8003614:	788b      	ldrb	r3, [r1, #2]
 8003616:	784a      	ldrb	r2, [r1, #1]
 8003618:	005b      	lsls	r3, r3, #1
 800361a:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 800361e:	f003 0307 	and.w	r3, r3, #7
 8003622:	f840 3c0c 	str.w	r3, [r0, #-12]
    r->coeffs[8*i+6] =  (a[3*i+2] >> 2) & 7;
 8003626:	788a      	ldrb	r2, [r1, #2]
 8003628:	f3c2 0282 	ubfx	r2, r2, #2, #3
 800362c:	f840 2c08 	str.w	r2, [r0, #-8]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 8003630:	f1c5 0e02 	rsb	lr, r5, #2
    r->coeffs[8*i+7] =  (a[3*i+2] >> 5) & 7;
 8003634:	788d      	ldrb	r5, [r1, #2]
 8003636:	096d      	lsrs	r5, r5, #5
    r->coeffs[8*i+0] = ETA - r->coeffs[8*i+0];
 8003638:	f1c4 0402 	rsb	r4, r4, #2
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 800363c:	f1c6 0602 	rsb	r6, r6, #2
    r->coeffs[8*i+4] = ETA - r->coeffs[8*i+4];
 8003640:	f1c8 0802 	rsb	r8, r8, #2
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 8003644:	f1c3 0302 	rsb	r3, r3, #2
    r->coeffs[8*i+6] = ETA - r->coeffs[8*i+6];
 8003648:	f1c2 0202 	rsb	r2, r2, #2
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 800364c:	f1c5 0502 	rsb	r5, r5, #2
  for(i = 0; i < N/8; ++i) {
 8003650:	4584      	cmp	ip, r0
    r->coeffs[8*i+1] = ETA - r->coeffs[8*i+1];
 8003652:	e940 4608 	strd	r4, r6, [r0, #-32]
    r->coeffs[8*i+3] = ETA - r->coeffs[8*i+3];
 8003656:	e940 7e06 	strd	r7, lr, [r0, #-24]
    r->coeffs[8*i+5] = ETA - r->coeffs[8*i+5];
 800365a:	e940 8304 	strd	r8, r3, [r0, #-16]
    r->coeffs[8*i+7] = ETA - r->coeffs[8*i+7];
 800365e:	e940 2502 	strd	r2, r5, [r0, #-8]
  for(i = 0; i < N/8; ++i) {
 8003662:	f101 0103 	add.w	r1, r1, #3
 8003666:	d1b3      	bne.n	80035d0 <pqcrystals_dilithium_polyeta_unpack+0x8>
    r->coeffs[2*i+1] = ETA - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800366c <pqcrystals_dilithium_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt1_pack(uint8_t *r, const poly *a) {
 800366c:	b410      	push	{r4}
 800366e:	f501 6280 	add.w	r2, r1, #1024	@ 0x400
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
    r[5*i+0] = (a->coeffs[4*i+0] >> 0);
 8003672:	680b      	ldr	r3, [r1, #0]
 8003674:	7003      	strb	r3, [r0, #0]
    r[5*i+1] = (a->coeffs[4*i+0] >> 8) | (a->coeffs[4*i+1] << 2);
 8003676:	684b      	ldr	r3, [r1, #4]
 8003678:	680c      	ldr	r4, [r1, #0]
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8003680:	7043      	strb	r3, [r0, #1]
    r[5*i+2] = (a->coeffs[4*i+1] >> 6) | (a->coeffs[4*i+2] << 4);
 8003682:	688b      	ldr	r3, [r1, #8]
 8003684:	684c      	ldr	r4, [r1, #4]
 8003686:	011b      	lsls	r3, r3, #4
 8003688:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 800368c:	7083      	strb	r3, [r0, #2]
    r[5*i+3] = (a->coeffs[4*i+2] >> 4) | (a->coeffs[4*i+3] << 6);
 800368e:	68cb      	ldr	r3, [r1, #12]
 8003690:	688c      	ldr	r4, [r1, #8]
 8003692:	019b      	lsls	r3, r3, #6
 8003694:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 8003698:	70c3      	strb	r3, [r0, #3]
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 800369a:	68cb      	ldr	r3, [r1, #12]
  for(i = 0; i < N/4; ++i) {
 800369c:	3110      	adds	r1, #16
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 800369e:	109b      	asrs	r3, r3, #2
  for(i = 0; i < N/4; ++i) {
 80036a0:	4291      	cmp	r1, r2
    r[5*i+4] = (a->coeffs[4*i+3] >> 2);
 80036a2:	7103      	strb	r3, [r0, #4]
  for(i = 0; i < N/4; ++i) {
 80036a4:	f100 0005 	add.w	r0, r0, #5
 80036a8:	d1e3      	bne.n	8003672 <pqcrystals_dilithium_polyt1_pack+0x6>
  }

  DBENCH_STOP(*tpack);
}
 80036aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80036ae:	4770      	bx	lr

080036b0 <pqcrystals_dilithium_polyt1_unpack>:
**************************************************/
void polyt1_unpack(poly *r, const uint8_t *a) {
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/4; ++i) {
 80036b0:	f501 72a0 	add.w	r2, r1, #320	@ 0x140
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 80036b4:	f891 c001 	ldrb.w	ip, [r1, #1]
 80036b8:	780b      	ldrb	r3, [r1, #0]
 80036ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
  for(i = 0; i < N/4; ++i) {
 80036be:	3105      	adds	r1, #5
    r->coeffs[4*i+0] = ((a[5*i+0] >> 0) | ((uint32_t)a[5*i+1] << 8)) & 0x3FF;
 80036c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036c4:	6003      	str	r3, [r0, #0]
    r->coeffs[4*i+1] = ((a[5*i+1] >> 2) | ((uint32_t)a[5*i+2] << 6)) & 0x3FF;
 80036c6:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 80036ca:	f811 cc04 	ldrb.w	ip, [r1, #-4]
 80036ce:	019b      	lsls	r3, r3, #6
 80036d0:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 80036d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036d8:	6043      	str	r3, [r0, #4]
    r->coeffs[4*i+2] = ((a[5*i+2] >> 4) | ((uint32_t)a[5*i+3] << 4)) & 0x3FF;
 80036da:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 80036de:	f811 cc03 	ldrb.w	ip, [r1, #-3]
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 80036e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80036ec:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 80036ee:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 80036f2:	f811 cc02 	ldrb.w	ip, [r1, #-2]
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
  for(i = 0; i < N/4; ++i) {
 80036fc:	428a      	cmp	r2, r1
    r->coeffs[4*i+3] = ((a[5*i+3] >> 6) | ((uint32_t)a[5*i+4] << 2)) & 0x3FF;
 80036fe:	60c3      	str	r3, [r0, #12]
  for(i = 0; i < N/4; ++i) {
 8003700:	f100 0010 	add.w	r0, r0, #16
 8003704:	d1d6      	bne.n	80036b4 <pqcrystals_dilithium_polyt1_unpack+0x4>
  }

  DBENCH_STOP(*tpack);
}
 8003706:	4770      	bx	lr

08003708 <pqcrystals_dilithium_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyt0_pack(uint8_t *r, const poly *a) {
 8003708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800370c:	f501 6480 	add.w	r4, r1, #1024	@ 0x400
 8003710:	b083      	sub	sp, #12

  for(i = 0; i < N/8; ++i) {
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8003712:	68cb      	ldr	r3, [r1, #12]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 8003714:	694e      	ldr	r6, [r1, #20]
    t[3] = (1 << (D-1)) - a->coeffs[8*i+3];
 8003716:	f5c3 5580 	rsb	r5, r3, #4096	@ 0x1000
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 800371a:	69cb      	ldr	r3, [r1, #28]
 800371c:	9301      	str	r3, [sp, #4]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 800371e:	690b      	ldr	r3, [r1, #16]
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 8003720:	e9d1 7201 	ldrd	r7, r2, [r1, #4]
    t[4] = (1 << (D-1)) - a->coeffs[8*i+4];
 8003724:	f5c3 5880 	rsb	r8, r3, #4096	@ 0x1000
    t[6] = (1 << (D-1)) - a->coeffs[8*i+6];
 8003728:	698b      	ldr	r3, [r1, #24]
 800372a:	f5c3 5980 	rsb	r9, r3, #4096	@ 0x1000
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 800372e:	680b      	ldr	r3, [r1, #0]
    t[1] = (1 << (D-1)) - a->coeffs[8*i+1];
 8003730:	f5c7 5780 	rsb	r7, r7, #4096	@ 0x1000
    t[0] = (1 << (D-1)) - a->coeffs[8*i+0];
 8003734:	f5c3 5c80 	rsb	ip, r3, #4096	@ 0x1000

    r[13*i+ 0]  =  t[0];
    r[13*i+ 1]  =  t[0] >>  8;
    r[13*i+ 1] |=  t[1] <<  5;
 8003738:	ea4f 1e47 	mov.w	lr, r7, lsl #5
    t[2] = (1 << (D-1)) - a->coeffs[8*i+2];
 800373c:	f5c2 5280 	rsb	r2, r2, #4096	@ 0x1000
    r[13*i+ 2]  =  t[1] >>  3;
    r[13*i+ 3]  =  t[1] >> 11;
    r[13*i+ 3] |=  t[2] <<  2;
    r[13*i+ 4]  =  t[2] >>  6;
    r[13*i+ 4] |=  t[3] <<  7;
 8003740:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
    r[13*i+ 0]  =  t[0];
 8003744:	f04f 0a00 	mov.w	sl, #0
    r[13*i+ 4] |=  t[3] <<  7;
 8003748:	ea4b 1b92 	orr.w	fp, fp, r2, lsr #6
    t[5] = (1 << (D-1)) - a->coeffs[8*i+5];
 800374c:	f5c6 5680 	rsb	r6, r6, #4096	@ 0x1000
    r[13*i+ 0]  =  t[0];
 8003750:	f36c 0a07 	bfi	sl, ip, #0, #8
    r[13*i+ 1] |=  t[1] <<  5;
 8003754:	ea4e 2c1c 	orr.w	ip, lr, ip, lsr #8
    r[13*i+ 0]  =  t[0];
 8003758:	f04f 0e00 	mov.w	lr, #0
 800375c:	f36b 0e07 	bfi	lr, fp, #0, #8
 8003760:	f36c 2a0f 	bfi	sl, ip, #8, #8
    r[13*i+ 5]  =  t[3] >>  1;
    r[13*i+ 6]  =  t[3] >>  9;
    r[13*i+ 6] |=  t[4] <<  4;
    r[13*i+ 7]  =  t[4] >>  4;
    r[13*i+ 8]  =  t[4] >> 12;
    r[13*i+ 8] |=  t[5] <<  1;
 8003764:	ea4f 0b46 	mov.w	fp, r6, lsl #1
    r[13*i+ 2]  =  t[1] >>  3;
 8003768:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 800376c:	9b01      	ldr	r3, [sp, #4]
    r[13*i+ 3] |=  t[2] <<  2;
 800376e:	0092      	lsls	r2, r2, #2
    r[13*i+ 8] |=  t[5] <<  1;
 8003770:	ea4b 3b18 	orr.w	fp, fp, r8, lsr #12
    r[13*i+ 3] |=  t[2] <<  2;
 8003774:	ea42 22d7 	orr.w	r2, r2, r7, lsr #11
    r[13*i+ 0]  =  t[0];
 8003778:	f36c 4a17 	bfi	sl, ip, #16, #8
    r[13*i+ 9]  =  t[5] >>  7;
    r[13*i+ 9] |=  t[6] <<  6;
 800377c:	ea4f 1789 	mov.w	r7, r9, lsl #6
    r[13*i+ 0]  =  t[0];
 8003780:	f04f 0c00 	mov.w	ip, #0
    t[7] = (1 << (D-1)) - a->coeffs[8*i+7];
 8003784:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
    r[13*i+ 0]  =  t[0];
 8003788:	f36b 0c07 	bfi	ip, fp, #0, #8
 800378c:	f362 6a1f 	bfi	sl, r2, #24, #8
    r[13*i+ 5]  =  t[3] >>  1;
 8003790:	ea4f 0b55 	mov.w	fp, r5, lsr #1
    r[13*i+ 6] |=  t[4] <<  4;
 8003794:	ea4f 1208 	mov.w	r2, r8, lsl #4
    r[13*i+ 9] |=  t[6] <<  6;
 8003798:	ea47 16d6 	orr.w	r6, r7, r6, lsr #7
    r[13*i+ 6] |=  t[4] <<  4;
 800379c:	ea42 2555 	orr.w	r5, r2, r5, lsr #9
    r[13*i+ 0]  =  t[0];
 80037a0:	f366 2c0f 	bfi	ip, r6, #8, #8
    r[13*i+10]  =  t[6] >>  2;
    r[13*i+11]  =  t[6] >> 10;
    r[13*i+11] |=  t[7] <<  3;
 80037a4:	00da      	lsls	r2, r3, #3
    r[13*i+ 0]  =  t[0];
 80037a6:	f36b 2e0f 	bfi	lr, fp, #8, #8
    r[13*i+10]  =  t[6] >>  2;
 80037aa:	ea4f 0699 	mov.w	r6, r9, lsr #2
    r[13*i+ 0]  =  t[0];
 80037ae:	f365 4e17 	bfi	lr, r5, #16, #8
    r[13*i+ 7]  =  t[4] >>  4;
 80037b2:	ea4f 1818 	mov.w	r8, r8, lsr #4
    r[13*i+ 0]  =  t[0];
 80037b6:	f366 4c17 	bfi	ip, r6, #16, #8
    r[13*i+11] |=  t[7] <<  3;
 80037ba:	ea42 2299 	orr.w	r2, r2, r9, lsr #10
  for(i = 0; i < N/8; ++i) {
 80037be:	3120      	adds	r1, #32
    r[13*i+ 0]  =  t[0];
 80037c0:	f368 6e1f 	bfi	lr, r8, #24, #8
 80037c4:	f362 6c1f 	bfi	ip, r2, #24, #8
    r[13*i+12]  =  t[7] >>  5;
 80037c8:	095b      	lsrs	r3, r3, #5
  for(i = 0; i < N/8; ++i) {
 80037ca:	428c      	cmp	r4, r1
    r[13*i+ 0]  =  t[0];
 80037cc:	f8c0 a000 	str.w	sl, [r0]
 80037d0:	f8c0 e004 	str.w	lr, [r0, #4]
 80037d4:	f8c0 c008 	str.w	ip, [r0, #8]
    r[13*i+12]  =  t[7] >>  5;
 80037d8:	7303      	strb	r3, [r0, #12]
  for(i = 0; i < N/8; ++i) {
 80037da:	f100 000d 	add.w	r0, r0, #13
 80037de:	d198      	bne.n	8003712 <pqcrystals_dilithium_polyt0_pack+0xa>
  }

  DBENCH_STOP(*tpack);
}
 80037e0:	b003      	add	sp, #12
 80037e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80037e6:	bf00      	nop

080037e8 <pqcrystals_dilithium_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyt0_unpack(poly *r, const uint8_t *a) {
 80037e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ec:	f501 7ed0 	add.w	lr, r1, #416	@ 0x1a0
  unsigned int i;
  DBENCH_START();

  for(i = 0; i < N/8; ++i) {
    r->coeffs[8*i+0]  = a[13*i+0];
 80037f0:	780b      	ldrb	r3, [r1, #0]
 80037f2:	6003      	str	r3, [r0, #0]
    r->coeffs[8*i+0] |= (uint32_t)a[13*i+1] << 8;
 80037f4:	784a      	ldrb	r2, [r1, #1]
 80037f6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    r->coeffs[8*i+0] &= 0x1FFF;
 80037fa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80037fe:	6003      	str	r3, [r0, #0]

    r->coeffs[8*i+1]  = a[13*i+1] >> 5;
 8003800:	784d      	ldrb	r5, [r1, #1]
 8003802:	096d      	lsrs	r5, r5, #5
 8003804:	6045      	str	r5, [r0, #4]

    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
    r->coeffs[8*i+7] &= 0x1FFF;

    r->coeffs[8*i+0] = (1 << (D-1)) - r->coeffs[8*i+0];
 8003806:	f5c3 5c80 	rsb	ip, r3, #4096	@ 0x1000
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+2] << 3;
 800380a:	788b      	ldrb	r3, [r1, #2]
 800380c:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 8003810:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+1] |= (uint32_t)a[13*i+3] << 11;
 8003812:	78cb      	ldrb	r3, [r1, #3]
 8003814:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
    r->coeffs[8*i+1] &= 0x1FFF;
 8003818:	f3c5 050c 	ubfx	r5, r5, #0, #13
 800381c:	6045      	str	r5, [r0, #4]
    r->coeffs[8*i+2]  = a[13*i+3] >> 2;
 800381e:	78cf      	ldrb	r7, [r1, #3]
 8003820:	08bf      	lsrs	r7, r7, #2
 8003822:	6087      	str	r7, [r0, #8]
    r->coeffs[8*i+2] |= (uint32_t)a[13*i+4] << 6;
 8003824:	790b      	ldrb	r3, [r1, #4]
 8003826:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
    r->coeffs[8*i+2] &= 0x1FFF;
 800382a:	f3c7 070c 	ubfx	r7, r7, #0, #13
 800382e:	6087      	str	r7, [r0, #8]
    r->coeffs[8*i+3]  = a[13*i+4] >> 7;
 8003830:	790c      	ldrb	r4, [r1, #4]
 8003832:	09e4      	lsrs	r4, r4, #7
 8003834:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+5] << 1;
 8003836:	794b      	ldrb	r3, [r1, #5]
 8003838:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 800383c:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+3] |= (uint32_t)a[13*i+6] << 9;
 800383e:	798b      	ldrb	r3, [r1, #6]
 8003840:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
    r->coeffs[8*i+3] &= 0x1FFF;
 8003844:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8003848:	60c4      	str	r4, [r0, #12]
    r->coeffs[8*i+4]  = a[13*i+6] >> 4;
 800384a:	798a      	ldrb	r2, [r1, #6]
 800384c:	0912      	lsrs	r2, r2, #4
 800384e:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+7] << 4;
 8003850:	79cb      	ldrb	r3, [r1, #7]
 8003852:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8003856:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+4] |= (uint32_t)a[13*i+8] << 12;
 8003858:	7a0b      	ldrb	r3, [r1, #8]
 800385a:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
    r->coeffs[8*i+4] &= 0x1FFF;
 800385e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8003862:	6102      	str	r2, [r0, #16]
    r->coeffs[8*i+5]  = a[13*i+8] >> 1;
 8003864:	7a0e      	ldrb	r6, [r1, #8]
 8003866:	0876      	lsrs	r6, r6, #1
 8003868:	6146      	str	r6, [r0, #20]
    r->coeffs[8*i+5] |= (uint32_t)a[13*i+9] << 7;
 800386a:	7a4b      	ldrb	r3, [r1, #9]
 800386c:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
    r->coeffs[8*i+5] &= 0x1FFF;
 8003870:	f3c6 060c 	ubfx	r6, r6, #0, #13
 8003874:	6146      	str	r6, [r0, #20]
    r->coeffs[8*i+6]  = a[13*i+9] >> 6;
 8003876:	7a4b      	ldrb	r3, [r1, #9]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+10] << 2;
 800387c:	f891 800a 	ldrb.w	r8, [r1, #10]
 8003880:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
 8003884:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+6] |= (uint32_t)a[13*i+11] << 10;
 8003886:	f891 800b 	ldrb.w	r8, [r1, #11]
 800388a:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
    r->coeffs[8*i+6] &= 0x1FFF;
 800388e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003892:	6183      	str	r3, [r0, #24]
    r->coeffs[8*i+7]  = a[13*i+11] >> 3;
 8003894:	f891 800b 	ldrb.w	r8, [r1, #11]
 8003898:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 800389c:	f8c0 801c 	str.w	r8, [r0, #28]
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 80038a0:	f891 900c 	ldrb.w	r9, [r1, #12]
  for(i = 0; i < N/8; ++i) {
 80038a4:	310d      	adds	r1, #13
    r->coeffs[8*i+7] |= (uint32_t)a[13*i+12] << 5;
 80038a6:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 80038aa:	f5c5 5580 	rsb	r5, r5, #4096	@ 0x1000
    r->coeffs[8*i+2] = (1 << (D-1)) - r->coeffs[8*i+2];
 80038ae:	f5c7 5780 	rsb	r7, r7, #4096	@ 0x1000
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 80038b2:	f5c4 5480 	rsb	r4, r4, #4096	@ 0x1000
    r->coeffs[8*i+4] = (1 << (D-1)) - r->coeffs[8*i+4];
 80038b6:	f5c2 5280 	rsb	r2, r2, #4096	@ 0x1000
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 80038ba:	f5c6 5680 	rsb	r6, r6, #4096	@ 0x1000
    r->coeffs[8*i+6] = (1 << (D-1)) - r->coeffs[8*i+6];
 80038be:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 80038c2:	f5c8 5880 	rsb	r8, r8, #4096	@ 0x1000
  for(i = 0; i < N/8; ++i) {
 80038c6:	458e      	cmp	lr, r1
    r->coeffs[8*i+1] = (1 << (D-1)) - r->coeffs[8*i+1];
 80038c8:	e9c0 c500 	strd	ip, r5, [r0]
    r->coeffs[8*i+3] = (1 << (D-1)) - r->coeffs[8*i+3];
 80038cc:	e9c0 7402 	strd	r7, r4, [r0, #8]
    r->coeffs[8*i+5] = (1 << (D-1)) - r->coeffs[8*i+5];
 80038d0:	e9c0 2604 	strd	r2, r6, [r0, #16]
    r->coeffs[8*i+7] = (1 << (D-1)) - r->coeffs[8*i+7];
 80038d4:	e9c0 3806 	strd	r3, r8, [r0, #24]
  for(i = 0; i < N/8; ++i) {
 80038d8:	f100 0020 	add.w	r0, r0, #32
 80038dc:	d188      	bne.n	80037f0 <pqcrystals_dilithium_polyt0_unpack+0x8>
  }

  DBENCH_STOP(*tpack);
}
 80038de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80038e2:	bf00      	nop

080038e4 <pqcrystals_dilithium_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void polyz_pack(uint8_t *r, const poly *a) {
 80038e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038e8:	f500 7710 	add.w	r7, r0, #576	@ 0x240
  DBENCH_START();

#if GAMMA1 == (1 << 17)
  for(i = 0; i < N/4; ++i) {
    t[0] = GAMMA1 - a->coeffs[4*i+0];
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 80038ec:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 80038f0:	680d      	ldr	r5, [r1, #0]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 80038f2:	68cb      	ldr	r3, [r1, #12]
    t[2] = GAMMA1 - a->coeffs[4*i+2];
 80038f4:	f5c4 3400 	rsb	r4, r4, #131072	@ 0x20000
    t[1] = GAMMA1 - a->coeffs[4*i+1];
 80038f8:	f5c2 3200 	rsb	r2, r2, #131072	@ 0x20000
    r[9*i+1]  = t[0] >> 8;
    r[9*i+2]  = t[0] >> 16;
    r[9*i+2] |= t[1] << 2;
    r[9*i+3]  = t[1] >> 6;
    r[9*i+4]  = t[1] >> 14;
    r[9*i+4] |= t[2] << 4;
 80038fc:	0126      	lsls	r6, r4, #4
    r[9*i+0]  = t[0];
 80038fe:	f04f 0e00 	mov.w	lr, #0
    t[0] = GAMMA1 - a->coeffs[4*i+0];
 8003902:	f5c5 3500 	rsb	r5, r5, #131072	@ 0x20000
    t[3] = GAMMA1 - a->coeffs[4*i+3];
 8003906:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
    r[9*i+4] |= t[2] << 4;
 800390a:	ea46 3692 	orr.w	r6, r6, r2, lsr #14
    r[9*i+0]  = t[0];
 800390e:	46f4      	mov	ip, lr
    r[9*i+1]  = t[0] >> 8;
 8003910:	ea4f 2a15 	mov.w	sl, r5, lsr #8
    r[9*i+0]  = t[0];
 8003914:	f365 0e07 	bfi	lr, r5, #0, #8
    r[9*i+2] |= t[1] << 2;
 8003918:	ea4f 0882 	mov.w	r8, r2, lsl #2
    r[9*i+0]  = t[0];
 800391c:	f366 0c07 	bfi	ip, r6, #0, #8
    r[9*i+5]  = t[2] >> 4;
 8003920:	ea4f 1914 	mov.w	r9, r4, lsr #4
    r[9*i+6]  = t[2] >> 12;
    r[9*i+6] |= t[3] << 6;
 8003924:	019e      	lsls	r6, r3, #6
 8003926:	ea46 3414 	orr.w	r4, r6, r4, lsr #12
    r[9*i+0]  = t[0];
 800392a:	f36a 2e0f 	bfi	lr, sl, #8, #8
    r[9*i+2] |= t[1] << 2;
 800392e:	ea48 4515 	orr.w	r5, r8, r5, lsr #16
    r[9*i+0]  = t[0];
 8003932:	f369 2c0f 	bfi	ip, r9, #8, #8
 8003936:	f364 4c17 	bfi	ip, r4, #16, #8
 800393a:	f365 4e17 	bfi	lr, r5, #16, #8
    r[9*i+7]  = t[3] >> 2;
 800393e:	089c      	lsrs	r4, r3, #2
    r[9*i+3]  = t[1] >> 6;
 8003940:	0992      	lsrs	r2, r2, #6
    r[9*i+0]  = t[0];
 8003942:	f362 6e1f 	bfi	lr, r2, #24, #8
 8003946:	f364 6c1f 	bfi	ip, r4, #24, #8
    r[9*i+8]  = t[3] >> 10;
 800394a:	0a9b      	lsrs	r3, r3, #10
    r[9*i+0]  = t[0];
 800394c:	f8c0 e000 	str.w	lr, [r0]
 8003950:	f8c0 c004 	str.w	ip, [r0, #4]
    r[9*i+8]  = t[3] >> 10;
 8003954:	7203      	strb	r3, [r0, #8]
  for(i = 0; i < N/4; ++i) {
 8003956:	3009      	adds	r0, #9
 8003958:	4287      	cmp	r7, r0
 800395a:	f101 0110 	add.w	r1, r1, #16
 800395e:	d1c5      	bne.n	80038ec <pqcrystals_dilithium_polyz_pack+0x8>
    r[5*i+4]  = t[1] >> 12;
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003960:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08003964 <pqcrystals_dilithium_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void polyz_unpack(poly *r, const uint8_t *a, int is_trigger) {
 8003964:	b530      	push	{r4, r5, lr}
 8003966:	f501 7c10 	add.w	ip, r1, #576	@ 0x240
#if GAMMA1 == (1 << 17)
//  if(is_trigger==1){
//	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
//  }
  for(i = 0; i < N/4; ++i) {
    r->coeffs[4*i+0]  = a[9*i+0];
 800396a:	780c      	ldrb	r4, [r1, #0]
 800396c:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+1] << 8;
 800396e:	784b      	ldrb	r3, [r1, #1]
 8003970:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8003974:	6004      	str	r4, [r0, #0]
    r->coeffs[4*i+0] |= (uint32_t)a[9*i+2] << 16;
 8003976:	788b      	ldrb	r3, [r1, #2]
 8003978:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    r->coeffs[4*i+0] &= 0x3FFFF;
 800397c:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8003980:	6004      	str	r4, [r0, #0]

    r->coeffs[4*i+1]  = a[9*i+2] >> 2;
 8003982:	788a      	ldrb	r2, [r1, #2]
 8003984:	0892      	lsrs	r2, r2, #2
 8003986:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+3] << 6;
 8003988:	78cb      	ldrb	r3, [r1, #3]
 800398a:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 800398e:	6042      	str	r2, [r0, #4]
    r->coeffs[4*i+1] |= (uint32_t)a[9*i+4] << 14;
 8003990:	790b      	ldrb	r3, [r1, #4]
 8003992:	ea42 3283 	orr.w	r2, r2, r3, lsl #14
  for(i = 0; i < N/4; ++i) {
 8003996:	3109      	adds	r1, #9
    r->coeffs[4*i+1] &= 0x3FFFF;
 8003998:	f3c2 0211 	ubfx	r2, r2, #0, #18
 800399c:	6042      	str	r2, [r0, #4]

    r->coeffs[4*i+2]  = a[9*i+4] >> 4;
 800399e:	f811 3c05 	ldrb.w	r3, [r1, #-5]
 80039a2:	091b      	lsrs	r3, r3, #4
 80039a4:	6083      	str	r3, [r0, #8]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 80039a6:	f811 5c04 	ldrb.w	r5, [r1, #-4]
  for(i = 0; i < N/4; ++i) {
 80039aa:	3010      	adds	r0, #16
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+5] << 4;
 80039ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 80039b0:	f840 3c08 	str.w	r3, [r0, #-8]
    r->coeffs[4*i+2] |= (uint32_t)a[9*i+6] << 12;
 80039b4:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80039b8:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    r->coeffs[4*i+2] &= 0x3FFFF;
 80039bc:	f3c3 0311 	ubfx	r3, r3, #0, #18
 80039c0:	f840 3c08 	str.w	r3, [r0, #-8]

    r->coeffs[4*i+3]  = a[9*i+6] >> 6;
 80039c4:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 80039c8:	09ad      	lsrs	r5, r5, #6
 80039ca:	f840 5c04 	str.w	r5, [r0, #-4]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+7] << 2;
 80039ce:	f811 ec02 	ldrb.w	lr, [r1, #-2]
 80039d2:	ea45 058e 	orr.w	r5, r5, lr, lsl #2
 80039d6:	f840 5c04 	str.w	r5, [r0, #-4]
    r->coeffs[4*i+3] |= (uint32_t)a[9*i+8] << 10;
 80039da:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 80039de:	ea45 258e 	orr.w	r5, r5, lr, lsl #10
    r->coeffs[4*i+3] &= 0x3FFFF;

    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 80039e2:	f5c4 3400 	rsb	r4, r4, #131072	@ 0x20000
    r->coeffs[4*i+1] = GAMMA1 - r->coeffs[4*i+1];
 80039e6:	f5c2 3200 	rsb	r2, r2, #131072	@ 0x20000
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 80039ea:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 80039ee:	f5c5 3500 	rsb	r5, r5, #131072	@ 0x20000
  for(i = 0; i < N/4; ++i) {
 80039f2:	458c      	cmp	ip, r1
    r->coeffs[4*i+2] = GAMMA1 - r->coeffs[4*i+2];
 80039f4:	e940 2303 	strd	r2, r3, [r0, #-12]
    r->coeffs[4*i+0] = GAMMA1 - r->coeffs[4*i+0];
 80039f8:	f840 4c10 	str.w	r4, [r0, #-16]
    r->coeffs[4*i+3] = GAMMA1 - r->coeffs[4*i+3];
 80039fc:	f840 5c04 	str.w	r5, [r0, #-4]
  for(i = 0; i < N/4; ++i) {
 8003a00:	d1b3      	bne.n	800396a <pqcrystals_dilithium_polyz_unpack+0x6>
    r->coeffs[2*i+1] = GAMMA1 - r->coeffs[2*i+1];
  }
#endif

  DBENCH_STOP(*tpack);
}
 8003a02:	bd30      	pop	{r4, r5, pc}

08003a04 <pqcrystals_dilithium_poly_uniform_gamma1>:
{
 8003a04:	b530      	push	{r4, r5, lr}
 8003a06:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 8003a0a:	4604      	mov	r4, r0
  stream256_init(&state, seed, nonce);
 8003a0c:	4668      	mov	r0, sp
{
 8003a0e:	461d      	mov	r5, r3
  stream256_init(&state, seed, nonce);
 8003a10:	f000 ff60 	bl	80048d4 <pqcrystals_dilithium_dilithium_shake256_stream_init>
  stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8003a14:	466a      	mov	r2, sp
 8003a16:	a834      	add	r0, sp, #208	@ 0xd0
 8003a18:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 8003a1c:	f7fd fd3c 	bl	8001498 <shake256_inc_squeeze>
    polyz_unpack(a, buf,is_trigger);
 8003a20:	462a      	mov	r2, r5
 8003a22:	a934      	add	r1, sp, #208	@ 0xd0
 8003a24:	4620      	mov	r0, r4
 8003a26:	f7ff ff9d 	bl	8003964 <pqcrystals_dilithium_polyz_unpack>
}
 8003a2a:	f50d 7d5f 	add.w	sp, sp, #892	@ 0x37c
 8003a2e:	bd30      	pop	{r4, r5, pc}

08003a30 <pqcrystals_dilithium_polyw1_pack>:
void polyw1_pack(uint8_t *r, const poly *a) {
  unsigned int i;
  DBENCH_START();

#if GAMMA2 == (Q-1)/88
  for(i = 0; i < N/4; ++i) {
 8003a30:	f100 0cc0 	add.w	ip, r0, #192	@ 0xc0
    r[3*i+0]  = a->coeffs[4*i+0];
 8003a34:	780b      	ldrb	r3, [r1, #0]
 8003a36:	7003      	strb	r3, [r0, #0]
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 8003a38:	684a      	ldr	r2, [r1, #4]
  for(i = 0; i < N/4; ++i) {
 8003a3a:	3003      	adds	r0, #3
    r[3*i+0] |= a->coeffs[4*i+1] << 6;
 8003a3c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8003a40:	f800 3c03 	strb.w	r3, [r0, #-3]
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8003a44:	684b      	ldr	r3, [r1, #4]
  for(i = 0; i < N/4; ++i) {
 8003a46:	3110      	adds	r1, #16
    r[3*i+1]  = a->coeffs[4*i+1] >> 2;
 8003a48:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8003a4c:	f800 3c02 	strb.w	r3, [r0, #-2]
    r[3*i+1] |= a->coeffs[4*i+2] << 4;
 8003a50:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8003a54:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8003a58:	f800 3c02 	strb.w	r3, [r0, #-2]
    r[3*i+2]  = a->coeffs[4*i+2] >> 4;
 8003a5c:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8003a60:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8003a64:	f800 3c01 	strb.w	r3, [r0, #-1]
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8003a68:	f851 2c04 	ldr.w	r2, [r1, #-4]
  for(i = 0; i < N/4; ++i) {
 8003a6c:	4560      	cmp	r0, ip
    r[3*i+2] |= a->coeffs[4*i+3] << 2;
 8003a6e:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8003a72:	f800 3c01 	strb.w	r3, [r0, #-1]
  for(i = 0; i < N/4; ++i) {
 8003a76:	d1dd      	bne.n	8003a34 <pqcrystals_dilithium_polyw1_pack+0x4>
  for(i = 0; i < N/2; ++i)
    r[i] = a->coeffs[2*i+0] | (a->coeffs[2*i+1] << 4);
#endif

  DBENCH_STOP(*tpack);
}
 8003a78:	4770      	bx	lr
 8003a7a:	bf00      	nop

08003a7c <pqcrystals_dilithium_polyvec_matrix_expand>:
*              or AES256CTR(rho,j|i).
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8003a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003a80:	4688      	mov	r8, r1
 8003a82:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 8003a86:	2700      	movs	r7, #0
  unsigned int i, j;

  for(i = 0; i < K; ++i)
    for(j = 0; j < L; ++j)
 8003a88:	f5a6 5580 	sub.w	r5, r6, #4096	@ 0x1000
void polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8003a8c:	463c      	mov	r4, r7
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8003a8e:	4622      	mov	r2, r4
 8003a90:	4628      	mov	r0, r5
 8003a92:	4641      	mov	r1, r8
    for(j = 0; j < L; ++j)
 8003a94:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
      poly_uniform(&mat[i].vec[j], rho, (i << 8) + j);
 8003a98:	f7ff fc16 	bl	80032c8 <pqcrystals_dilithium_poly_uniform>
    for(j = 0; j < L; ++j)
 8003a9c:	3401      	adds	r4, #1
 8003a9e:	42b5      	cmp	r5, r6
 8003aa0:	b2a4      	uxth	r4, r4
 8003aa2:	d1f4      	bne.n	8003a8e <pqcrystals_dilithium_polyvec_matrix_expand+0x12>
  for(i = 0; i < K; ++i)
 8003aa4:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003aa8:	b2bf      	uxth	r7, r7
 8003aaa:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8003aae:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8003ab2:	d1e9      	bne.n	8003a88 <pqcrystals_dilithium_polyvec_matrix_expand+0xc>
}
 8003ab4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003ab8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>:

void polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 8003ab8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003abc:	460d      	mov	r5, r1
 8003abe:	4617      	mov	r7, r2
 8003ac0:	4606      	mov	r6, r0
 8003ac2:	f501 4880 	add.w	r8, r1, #16384	@ 0x4000
                                       const polyvecl *u,
                                       const polyvecl *v)
{
  unsigned int i;

  poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 8003ac6:	463a      	mov	r2, r7
 8003ac8:	4629      	mov	r1, r5
 8003aca:	4630      	mov	r0, r6
 8003acc:	f7ff fb94 	bl	80031f8 <pqcrystals_dilithium_poly_pointwise_montgomery>
 8003ad0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
  for(i = 1; i < L; ++i) {
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 8003ad4:	193a      	adds	r2, r7, r4
 8003ad6:	1961      	adds	r1, r4, r5
 8003ad8:	4630      	mov	r0, r6
  for(i = 1; i < L; ++i) {
 8003ada:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_pointwise_acc_montgomery(w, &u->vec[i], &v->vec[i]);
 8003ade:	f7ff fb8d 	bl	80031fc <pqcrystals_dilithium_poly_pointwise_acc_montgomery>
  for(i = 1; i < L; ++i) {
 8003ae2:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003ae6:	d1f5      	bne.n	8003ad4 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery+0x1c>
  for(i = 0; i < K; ++i)
 8003ae8:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 8003aec:	4545      	cmp	r5, r8
 8003aee:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8003af2:	d1e8      	bne.n	8003ac6 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery+0xe>
}
 8003af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003af8 <pqcrystals_dilithium_polyvecl_uniform_eta>:
void polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8003af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003afa:	4605      	mov	r5, r0
 8003afc:	460e      	mov	r6, r1
 8003afe:	4614      	mov	r4, r2
  for(i = 0; i < L; ++i)
 8003b00:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8003b04:	4622      	mov	r2, r4
 8003b06:	1c63      	adds	r3, r4, #1
 8003b08:	4628      	mov	r0, r5
 8003b0a:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 8003b0c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
    poly_uniform_eta(&v->vec[i], seed, nonce++);
 8003b10:	b29c      	uxth	r4, r3
 8003b12:	f7ff fc25 	bl	8003360 <pqcrystals_dilithium_poly_uniform_eta>
  for(i = 0; i < L; ++i)
 8003b16:	42bd      	cmp	r5, r7
 8003b18:	d1f4      	bne.n	8003b04 <pqcrystals_dilithium_polyvecl_uniform_eta+0xc>
}
 8003b1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003b1c <pqcrystals_dilithium_polyvecl_uniform_gamma1>:
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce, int is_trigger,int poly_idx) {
 8003b1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, 0);
 8003b20:	0092      	lsls	r2, r2, #2
void polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce, int is_trigger,int poly_idx) {
 8003b22:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003b26:	460f      	mov	r7, r1
 8003b28:	4699      	mov	r9, r3
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, 0);
 8003b2a:	b296      	uxth	r6, r2
 8003b2c:	4605      	mov	r5, r0
    for(i = 0; i < L; ++i){
 8003b2e:	2400      	movs	r4, #0
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, is_trigger);
 8003b30:	1932      	adds	r2, r6, r4
  	  if(i==poly_idx)
 8003b32:	45a0      	cmp	r8, r4
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, 0);
 8003b34:	f04f 0300 	mov.w	r3, #0
 8003b38:	4639      	mov	r1, r7
 8003b3a:	4628      	mov	r0, r5
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, is_trigger);
 8003b3c:	b292      	uxth	r2, r2
  	  if(i==poly_idx)
 8003b3e:	d008      	beq.n	8003b52 <pqcrystals_dilithium_polyvecl_uniform_gamma1+0x36>
    for(i = 0; i < L; ++i){
 8003b40:	3401      	adds	r4, #1
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, 0);
 8003b42:	f7ff ff5f 	bl	8003a04 <pqcrystals_dilithium_poly_uniform_gamma1>
    for(i = 0; i < L; ++i){
 8003b46:	2c04      	cmp	r4, #4
 8003b48:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003b4c:	d1f0      	bne.n	8003b30 <pqcrystals_dilithium_polyvecl_uniform_gamma1+0x14>
}
 8003b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  		  poly_uniform_gamma1(&v->vec[i], seed, L*nonce + i, is_trigger);
 8003b52:	464b      	mov	r3, r9
 8003b54:	f7ff ff56 	bl	8003a04 <pqcrystals_dilithium_poly_uniform_gamma1>
    for(i = 0; i < L; ++i){
 8003b58:	f1b8 0f03 	cmp.w	r8, #3
 8003b5c:	f108 0401 	add.w	r4, r8, #1
 8003b60:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003b64:	d1e4      	bne.n	8003b30 <pqcrystals_dilithium_polyvecl_uniform_gamma1+0x14>
}
 8003b66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b6a:	bf00      	nop

08003b6c <pqcrystals_dilithium_polyvecl_reduce>:
void polyvecl_reduce(polyvecl *v) {
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	4604      	mov	r4, r0
    poly_reduce(&v->vec[i]);
 8003b70:	f7ff fb08 	bl	8003184 <pqcrystals_dilithium_poly_reduce>
 8003b74:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003b78:	f7ff fb04 	bl	8003184 <pqcrystals_dilithium_poly_reduce>
 8003b7c:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003b80:	f7ff fb00 	bl	8003184 <pqcrystals_dilithium_poly_reduce>
 8003b84:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
}
 8003b88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_reduce(&v->vec[i]);
 8003b8c:	f7ff bafa 	b.w	8003184 <pqcrystals_dilithium_poly_reduce>

08003b90 <pqcrystals_dilithium_polyvecl_add>:
void polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v, int is_trigger,int poly_idx) {
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	4607      	mov	r7, r0
 8003b94:	460e      	mov	r6, r1
 8003b96:	4615      	mov	r5, r2
 8003b98:	2400      	movs	r4, #0
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003b9a:	192a      	adds	r2, r5, r4
 8003b9c:	1931      	adds	r1, r6, r4
 8003b9e:	1938      	adds	r0, r7, r4
  for(i = 0; i < L; ++i){
 8003ba0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003ba4:	f7ff faf2 	bl	800318c <pqcrystals_dilithium_poly_add>
  for(i = 0; i < L; ++i){
 8003ba8:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003bac:	d1f5      	bne.n	8003b9a <pqcrystals_dilithium_polyvecl_add+0xa>
}
 8003bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003bb0 <pqcrystals_dilithium_polyvecl_ntt>:
void polyvecl_ntt(polyvecl *v) {
 8003bb0:	b510      	push	{r4, lr}
 8003bb2:	4604      	mov	r4, r0
    poly_ntt(&v->vec[i]);
 8003bb4:	f7ff fb1c 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
 8003bb8:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003bbc:	f7ff fb18 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
 8003bc0:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003bc4:	f7ff fb14 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
 8003bc8:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
}
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_ntt(&v->vec[i]);
 8003bd0:	f7ff bb0e 	b.w	80031f0 <pqcrystals_dilithium_poly_ntt>

08003bd4 <pqcrystals_dilithium_polyvecl_invntt_tomont>:
  for(i = 0; i < L; ++i){
 8003bd4:	2901      	cmp	r1, #1
void polyvecl_invntt_tomont(polyvecl *v, int is_trigger,int poly_idx) {
 8003bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd8:	4604      	mov	r4, r0
 8003bda:	4616      	mov	r6, r2
 8003bdc:	d009      	beq.n	8003bf2 <pqcrystals_dilithium_polyvecl_invntt_tomont+0x1e>
  for(i = 0; i < L; ++i){
 8003bde:	2500      	movs	r5, #0
    poly_invntt_tomont(&v->vec[i]);
 8003be0:	4620      	mov	r0, r4
  for(i = 0; i < L; ++i){
 8003be2:	3501      	adds	r5, #1
    poly_invntt_tomont(&v->vec[i]);
 8003be4:	f7ff fb06 	bl	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>
  for(i = 0; i < L; ++i){
 8003be8:	2d04      	cmp	r5, #4
 8003bea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003bee:	d1f7      	bne.n	8003be0 <pqcrystals_dilithium_polyvecl_invntt_tomont+0xc>
}
 8003bf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003bf2:	4f11      	ldr	r7, [pc, #68]	@ (8003c38 <pqcrystals_dilithium_polyvecl_invntt_tomont+0x64>)
  for(i = 0; i < L; ++i){
 8003bf4:	2500      	movs	r5, #0
	  if(i==poly_idx && is_trigger==1)
 8003bf6:	42ae      	cmp	r6, r5
    poly_invntt_tomont(&v->vec[i]);
 8003bf8:	4620      	mov	r0, r4
	  if(i==poly_idx && is_trigger==1)
 8003bfa:	d009      	beq.n	8003c10 <pqcrystals_dilithium_polyvecl_invntt_tomont+0x3c>
  for(i = 0; i < L; ++i){
 8003bfc:	3501      	adds	r5, #1
    poly_invntt_tomont(&v->vec[i]);
 8003bfe:	f7ff faf9 	bl	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>
  for(i = 0; i < L; ++i){
 8003c02:	2d04      	cmp	r5, #4
 8003c04:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003c08:	d0f2      	beq.n	8003bf0 <pqcrystals_dilithium_polyvecl_invntt_tomont+0x1c>
	  if(i==poly_idx && is_trigger==1)
 8003c0a:	42ae      	cmp	r6, r5
    poly_invntt_tomont(&v->vec[i]);
 8003c0c:	4620      	mov	r0, r4
	  if(i==poly_idx && is_trigger==1)
 8003c0e:	d1f5      	bne.n	8003bfc <pqcrystals_dilithium_polyvecl_invntt_tomont+0x28>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2104      	movs	r1, #4
 8003c14:	4638      	mov	r0, r7
 8003c16:	f001 f9a3 	bl	8004f60 <HAL_GPIO_WritePin>
    poly_invntt_tomont(&v->vec[i]);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	f7ff faea 	bl	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003c20:	2201      	movs	r2, #1
 8003c22:	2104      	movs	r1, #4
 8003c24:	4638      	mov	r0, r7
 8003c26:	f001 f99b 	bl	8004f60 <HAL_GPIO_WritePin>
  for(i = 0; i < L; ++i){
 8003c2a:	2e03      	cmp	r6, #3
 8003c2c:	f106 0501 	add.w	r5, r6, #1
 8003c30:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003c34:	d1df      	bne.n	8003bf6 <pqcrystals_dilithium_polyvecl_invntt_tomont+0x22>
}
 8003c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003c38:	40020800 	.word	0x40020800

08003c3c <pqcrystals_dilithium_polyvecl_pointwise_poly_montgomery>:
void polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
 8003c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c3e:	4607      	mov	r7, r0
 8003c40:	460e      	mov	r6, r1
 8003c42:	4615      	mov	r5, r2
 8003c44:	2400      	movs	r4, #0
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8003c46:	192a      	adds	r2, r5, r4
 8003c48:	1938      	adds	r0, r7, r4
 8003c4a:	4631      	mov	r1, r6
  for(i = 0; i < L; ++i)
 8003c4c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8003c50:	f7ff fad2 	bl	80031f8 <pqcrystals_dilithium_poly_pointwise_montgomery>
  for(i = 0; i < L; ++i)
 8003c54:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003c58:	d1f5      	bne.n	8003c46 <pqcrystals_dilithium_polyvecl_pointwise_poly_montgomery+0xa>
}
 8003c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003c5c <pqcrystals_dilithium_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4604      	mov	r4, r0
 8003c60:	460d      	mov	r5, r1
 8003c62:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
  unsigned int i;

  for(i = 0; i < L; ++i)
    if(poly_chknorm(&v->vec[i], bound))
 8003c66:	4620      	mov	r0, r4
 8003c68:	4629      	mov	r1, r5
 8003c6a:	f7ff fb15 	bl	8003298 <pqcrystals_dilithium_poly_chknorm>
  for(i = 0; i < L; ++i)
 8003c6e:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    if(poly_chknorm(&v->vec[i], bound))
 8003c72:	b910      	cbnz	r0, 8003c7a <pqcrystals_dilithium_polyvecl_chknorm+0x1e>
  for(i = 0; i < L; ++i)
 8003c74:	42b4      	cmp	r4, r6
 8003c76:	d1f6      	bne.n	8003c66 <pqcrystals_dilithium_polyvecl_chknorm+0xa>
      return 1;

  return 0;
}
 8003c78:	bd70      	pop	{r4, r5, r6, pc}
      return 1;
 8003c7a:	2001      	movs	r0, #1
}
 8003c7c:	bd70      	pop	{r4, r5, r6, pc}
 8003c7e:	bf00      	nop

08003c80 <pqcrystals_dilithium_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8003c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c82:	4605      	mov	r5, r0
 8003c84:	460e      	mov	r6, r1
 8003c86:	4614      	mov	r4, r2
 8003c88:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
 8003c8c:	4622      	mov	r2, r4
 8003c8e:	1c63      	adds	r3, r4, #1
 8003c90:	4628      	mov	r0, r5
 8003c92:	4631      	mov	r1, r6
 8003c94:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003c98:	b29c      	uxth	r4, r3
 8003c9a:	f7ff fb61 	bl	8003360 <pqcrystals_dilithium_poly_uniform_eta>
 8003c9e:	42bd      	cmp	r5, r7
 8003ca0:	d1f4      	bne.n	8003c8c <pqcrystals_dilithium_polyveck_uniform_eta+0xc>
 8003ca2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003ca4 <pqcrystals_dilithium_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283009,6283007].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_reduce(polyveck *v) {
 8003ca4:	b510      	push	{r4, lr}
 8003ca6:	4604      	mov	r4, r0
 8003ca8:	f7ff fa6c 	bl	8003184 <pqcrystals_dilithium_poly_reduce>
 8003cac:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003cb0:	f7ff fa68 	bl	8003184 <pqcrystals_dilithium_poly_reduce>
 8003cb4:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003cb8:	f7ff fa64 	bl	8003184 <pqcrystals_dilithium_poly_reduce>
 8003cbc:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
 8003cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cc4:	f7ff ba5e 	b.w	8003184 <pqcrystals_dilithium_poly_reduce>

08003cc8 <pqcrystals_dilithium_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_caddq(polyveck *v) {
 8003cc8:	b510      	push	{r4, lr}
 8003cca:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_caddq(&v->vec[i]);
 8003ccc:	f7ff fa5c 	bl	8003188 <pqcrystals_dilithium_poly_caddq>
 8003cd0:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003cd4:	f7ff fa58 	bl	8003188 <pqcrystals_dilithium_poly_caddq>
 8003cd8:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003cdc:	f7ff fa54 	bl	8003188 <pqcrystals_dilithium_poly_caddq>
 8003ce0:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
}
 8003ce4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_caddq(&v->vec[i]);
 8003ce8:	f7ff ba4e 	b.w	8003188 <pqcrystals_dilithium_poly_caddq>

08003cec <pqcrystals_dilithium_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8003cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cee:	4607      	mov	r7, r0
 8003cf0:	460e      	mov	r6, r1
 8003cf2:	4615      	mov	r5, r2
 8003cf4:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003cf6:	192a      	adds	r2, r5, r4
 8003cf8:	1931      	adds	r1, r6, r4
 8003cfa:	1938      	adds	r0, r7, r4
  for(i = 0; i < K; ++i)
 8003cfc:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003d00:	f7ff fa44 	bl	800318c <pqcrystals_dilithium_poly_add>
  for(i = 0; i < K; ++i)
 8003d04:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003d08:	d1f5      	bne.n	8003cf6 <pqcrystals_dilithium_polyveck_add+0xa>
}
 8003d0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d0c <pqcrystals_dilithium_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8003d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d0e:	4607      	mov	r7, r0
 8003d10:	460e      	mov	r6, r1
 8003d12:	4615      	mov	r5, r2
 8003d14:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003d16:	192a      	adds	r2, r5, r4
 8003d18:	1931      	adds	r1, r6, r4
 8003d1a:	1938      	adds	r0, r7, r4
  for(i = 0; i < K; ++i)
 8003d1c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003d20:	f7ff fa48 	bl	80031b4 <pqcrystals_dilithium_poly_sub>
  for(i = 0; i < K; ++i)
 8003d24:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003d28:	d1f5      	bne.n	8003d16 <pqcrystals_dilithium_polyveck_sub+0xa>
}
 8003d2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003d2c <pqcrystals_dilithium_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_shiftl(polyveck *v) {
 8003d2c:	b510      	push	{r4, lr}
 8003d2e:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_shiftl(&v->vec[i]);
 8003d30:	f7ff fa54 	bl	80031dc <pqcrystals_dilithium_poly_shiftl>
 8003d34:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003d38:	f7ff fa50 	bl	80031dc <pqcrystals_dilithium_poly_shiftl>
 8003d3c:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003d40:	f7ff fa4c 	bl	80031dc <pqcrystals_dilithium_poly_shiftl>
 8003d44:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
}
 8003d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_shiftl(&v->vec[i]);
 8003d4c:	f7ff ba46 	b.w	80031dc <pqcrystals_dilithium_poly_shiftl>

08003d50 <pqcrystals_dilithium_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_ntt(polyveck *v) {
 8003d50:	b510      	push	{r4, lr}
 8003d52:	4604      	mov	r4, r0
 8003d54:	f7ff fa4c 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
 8003d58:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003d5c:	f7ff fa48 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
 8003d60:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003d64:	f7ff fa44 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
 8003d68:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
 8003d6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d70:	f7ff ba3e 	b.w	80031f0 <pqcrystals_dilithium_poly_ntt>

08003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void polyveck_invntt_tomont(polyveck *v) {
 8003d74:	b510      	push	{r4, lr}
 8003d76:	4604      	mov	r4, r0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_invntt_tomont(&v->vec[i]);
 8003d78:	f7ff fa3c 	bl	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>
 8003d7c:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003d80:	f7ff fa38 	bl	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>
 8003d84:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003d88:	f7ff fa34 	bl	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>
 8003d8c:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
}
 8003d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    poly_invntt_tomont(&v->vec[i]);
 8003d94:	f7ff ba2e 	b.w	80031f4 <pqcrystals_dilithium_poly_invntt_tomont>

08003d98 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>:

void polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8003d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d9a:	4607      	mov	r7, r0
 8003d9c:	460e      	mov	r6, r1
 8003d9e:	4615      	mov	r5, r2
 8003da0:	2400      	movs	r4, #0
 8003da2:	192a      	adds	r2, r5, r4
 8003da4:	1938      	adds	r0, r7, r4
 8003da6:	4631      	mov	r1, r6
 8003da8:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003dac:	f7ff fa24 	bl	80031f8 <pqcrystals_dilithium_poly_pointwise_montgomery>
 8003db0:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003db4:	d1f5      	bne.n	8003da2 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery+0xa>
 8003db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003db8 <pqcrystals_dilithium_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int polyveck_chknorm(const polyveck *v, int32_t bound) {
 8003db8:	b570      	push	{r4, r5, r6, lr}
 8003dba:	4604      	mov	r4, r0
 8003dbc:	460d      	mov	r5, r1
 8003dbe:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	4629      	mov	r1, r5
 8003dc6:	f7ff fa67 	bl	8003298 <pqcrystals_dilithium_poly_chknorm>
 8003dca:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003dce:	b910      	cbnz	r0, 8003dd6 <pqcrystals_dilithium_polyveck_chknorm+0x1e>
 8003dd0:	42b4      	cmp	r4, r6
 8003dd2:	d1f6      	bne.n	8003dc2 <pqcrystals_dilithium_polyveck_chknorm+0xa>
 8003dd4:	bd70      	pop	{r4, r5, r6, pc}
 8003dd6:	2001      	movs	r0, #1
 8003dd8:	bd70      	pop	{r4, r5, r6, pc}
 8003dda:	bf00      	nop

08003ddc <pqcrystals_dilithium_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8003ddc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dde:	4607      	mov	r7, r0
 8003de0:	460e      	mov	r6, r1
 8003de2:	4615      	mov	r5, r2
 8003de4:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003de6:	192a      	adds	r2, r5, r4
 8003de8:	1931      	adds	r1, r6, r4
 8003dea:	1938      	adds	r0, r7, r4
  for(i = 0; i < K; ++i)
 8003dec:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003df0:	f7ff fa06 	bl	8003200 <pqcrystals_dilithium_poly_power2round>
  for(i = 0; i < K; ++i)
 8003df4:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003df8:	d1f5      	bne.n	8003de6 <pqcrystals_dilithium_polyveck_power2round+0xa>
}
 8003dfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003dfc <pqcrystals_dilithium_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8003dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dfe:	4607      	mov	r7, r0
 8003e00:	460e      	mov	r6, r1
 8003e02:	4615      	mov	r5, r2
 8003e04:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003e06:	192a      	adds	r2, r5, r4
 8003e08:	1931      	adds	r1, r6, r4
 8003e0a:	1938      	adds	r0, r7, r4
  for(i = 0; i < K; ++i)
 8003e0c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003e10:	f7ff fa08 	bl	8003224 <pqcrystals_dilithium_poly_decompose>
  for(i = 0; i < K; ++i)
 8003e14:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003e18:	d1f5      	bne.n	8003e06 <pqcrystals_dilithium_polyveck_decompose+0xa>
}
 8003e1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e1c <pqcrystals_dilithium_polyveck_make_hint>:
* Returns number of 1 bits.
**************************************************/
unsigned int polyveck_make_hint(polyveck *h,
                                const polyveck *v0,
                                const polyveck *v1)
{
 8003e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e20:	2400      	movs	r4, #0
 8003e22:	4680      	mov	r8, r0
 8003e24:	460f      	mov	r7, r1
 8003e26:	4616      	mov	r6, r2
  unsigned int i, s = 0;
 8003e28:	4625      	mov	r5, r4

  for(i = 0; i < K; ++i)
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8003e2a:	1932      	adds	r2, r6, r4
 8003e2c:	1939      	adds	r1, r7, r4
 8003e2e:	eb08 0004 	add.w	r0, r8, r4
 8003e32:	f7ff fa09 	bl	8003248 <pqcrystals_dilithium_poly_make_hint>
  for(i = 0; i < K; ++i)
 8003e36:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003e3a:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
    s += poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 8003e3e:	4405      	add	r5, r0
  for(i = 0; i < K; ++i)
 8003e40:	d1f3      	bne.n	8003e2a <pqcrystals_dilithium_polyveck_make_hint+0xe>

  return s;
}
 8003e42:	4628      	mov	r0, r5
 8003e44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003e48 <pqcrystals_dilithium_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void polyveck_use_hint(polyveck *w, const polyveck *u, const polyveck *h) {
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	4607      	mov	r7, r0
 8003e4c:	460e      	mov	r6, r1
 8003e4e:	4615      	mov	r5, r2
 8003e50:	2400      	movs	r4, #0
  unsigned int i;

  for(i = 0; i < K; ++i)
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 8003e52:	192a      	adds	r2, r5, r4
 8003e54:	1931      	adds	r1, r6, r4
 8003e56:	1938      	adds	r0, r7, r4
  for(i = 0; i < K; ++i)
 8003e58:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
    poly_use_hint(&w->vec[i], &u->vec[i], &h->vec[i]);
 8003e5c:	f7ff fa0a 	bl	8003274 <pqcrystals_dilithium_poly_use_hint>
  for(i = 0; i < K; ++i)
 8003e60:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003e64:	d1f5      	bne.n	8003e52 <pqcrystals_dilithium_polyveck_use_hint+0xa>
}
 8003e66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003e68 <pqcrystals_dilithium_polyveck_pack_w1>:

void polyveck_pack_w1(uint8_t r[K*POLYW1_PACKEDBYTES], const polyveck *w1) {
 8003e68:	b570      	push	{r4, r5, r6, lr}
 8003e6a:	4604      	mov	r4, r0
 8003e6c:	460d      	mov	r5, r1
 8003e6e:	f500 7640 	add.w	r6, r0, #768	@ 0x300
  unsigned int i;

  for(i = 0; i < K; ++i)
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 8003e72:	4629      	mov	r1, r5
 8003e74:	4620      	mov	r0, r4
  for(i = 0; i < K; ++i)
 8003e76:	34c0      	adds	r4, #192	@ 0xc0
    polyw1_pack(&r[i*POLYW1_PACKEDBYTES], &w1->vec[i]);
 8003e78:	f7ff fdda 	bl	8003a30 <pqcrystals_dilithium_polyw1_pack>
  for(i = 0; i < K; ++i)
 8003e7c:	42b4      	cmp	r4, r6
 8003e7e:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003e82:	d1f6      	bne.n	8003e72 <pqcrystals_dilithium_polyveck_pack_w1+0xa>
}
 8003e84:	bd70      	pop	{r4, r5, r6, pc}
 8003e86:	bf00      	nop

08003e88 <randombytes_init>:

void
randombytes_init(unsigned int entropy_input)
{
    //memcpy(&lfsr_state, entropy_input, 4);
    lfsr_state = entropy_input;
 8003e88:	4b01      	ldr	r3, [pc, #4]	@ (8003e90 <randombytes_init+0x8>)
 8003e8a:	6018      	str	r0, [r3, #0]
}
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	200024c4 	.word	0x200024c4

08003e94 <randombytes>:

void
randombytes(unsigned char* x, unsigned int xlen)
{

    for (int i = 0; i < xlen; ++i) {
 8003e94:	b1b9      	cbz	r1, 8003ec6 <randombytes+0x32>
{
 8003e96:	b410      	push	{r4}
 8003e98:	4c0b      	ldr	r4, [pc, #44]	@ (8003ec8 <randombytes+0x34>)
 8003e9a:	4401      	add	r1, r0
 8003e9c:	6822      	ldr	r2, [r4, #0]
 8003e9e:	3801      	subs	r0, #1
 8003ea0:	3901      	subs	r1, #1
    g22 = lfsr_state >> 21;
 8003ea2:	0d53      	lsrs	r3, r2, #21
    lfsr_state ^= ((g1 ^ g2 ^ g22 ^ g32) & 0x1);
 8003ea4:	ea83 0352 	eor.w	r3, r3, r2, lsr #1
 8003ea8:	4053      	eors	r3, r2
 8003eaa:	ea83 73d2 	eor.w	r3, r3, r2, lsr #31
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
        lfsr_update_state();
        x[i] = (unsigned char)lfsr_state;
 8003eb6:	f800 2f01 	strb.w	r2, [r0, #1]!
    for (int i = 0; i < xlen; ++i) {
 8003eba:	4281      	cmp	r1, r0
 8003ebc:	d1f1      	bne.n	8003ea2 <randombytes+0xe>
 8003ebe:	6022      	str	r2, [r4, #0]
    }
}
 8003ec0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003ec4:	4770      	bx	lr
 8003ec6:	4770      	bx	lr
 8003ec8:	200024c4 	.word	0x200024c4

08003ecc <pqcrystals_dilithium_power2round>:
* Returns a1.
**************************************************/
int32_t power2round(int32_t *a0, int32_t a)  {
  int32_t a1;

  a1 = (a + (1 << (D-1)) - 1) >> D;
 8003ecc:	f601 73ff 	addw	r3, r1, #4095	@ 0xfff
  *a0 = a - (a1 << D);
 8003ed0:	f423 52ff 	bic.w	r2, r3, #8160	@ 0x1fe0
 8003ed4:	f022 021f 	bic.w	r2, r2, #31
 8003ed8:	1a89      	subs	r1, r1, r2
 8003eda:	6001      	str	r1, [r0, #0]
  return a1;
}
 8003edc:	1358      	asrs	r0, r3, #13
 8003ede:	4770      	bx	lr

08003ee0 <pqcrystals_dilithium_decompose>:
* Returns a1.
**************************************************/
int32_t decompose(int32_t *a0, int32_t a) {
  int32_t a1;

  a1  = (a + 127) >> 7;
 8003ee0:	f101 037f 	add.w	r3, r1, #127	@ 0x7f
#if GAMMA2 == (Q-1)/32
  a1  = (a1*1025 + (1 << 21)) >> 22;
  a1 &= 15;
#elif GAMMA2 == (Q-1)/88
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8003ee4:	f642 420b 	movw	r2, #11275	@ 0x2c0b
  a1  = (a + 127) >> 7;
 8003ee8:	11db      	asrs	r3, r3, #7
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8003eea:	fb02 f303 	mul.w	r3, r2, r3
 8003eee:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8003ef2:	161b      	asrs	r3, r3, #24
  a1 ^= ((43 - a1) >> 31) & a1;
 8003ef4:	f1c3 022b 	rsb	r2, r3, #43	@ 0x2b
int32_t decompose(int32_t *a0, int32_t a) {
 8003ef8:	b410      	push	{r4}
  a1 ^= ((43 - a1) >> 31) & a1;
 8003efa:	17d2      	asrs	r2, r2, #31
#endif

  *a0  = a - a1*2*GAMMA2;
 8003efc:	4c08      	ldr	r4, [pc, #32]	@ (8003f20 <pqcrystals_dilithium_decompose+0x40>)
  a1 ^= ((43 - a1) >> 31) & a1;
 8003efe:	ea23 0302 	bic.w	r3, r3, r2
  *a0  = a - a1*2*GAMMA2;
 8003f02:	fb04 1103 	mla	r1, r4, r3, r1
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 8003f06:	f5c1 1c7f 	rsb	ip, r1, #4177920	@ 0x3fc000
 8003f0a:	4a06      	ldr	r2, [pc, #24]	@ (8003f24 <pqcrystals_dilithium_decompose+0x44>)
  return a1;
}
 8003f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 8003f10:	f50c 5c40 	add.w	ip, ip, #12288	@ 0x3000
 8003f14:	ea02 72ec 	and.w	r2, r2, ip, asr #31
 8003f18:	1a89      	subs	r1, r1, r2
 8003f1a:	6001      	str	r1, [r0, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	4770      	bx	lr
 8003f20:	fffd1800 	.word	0xfffd1800
 8003f24:	007fe001 	.word	0x007fe001

08003f28 <pqcrystals_dilithium_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int make_hint(int32_t a0, int32_t a1) {
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
 8003f28:	f500 33ba 	add.w	r3, r0, #95232	@ 0x17400
 8003f2c:	f5b3 3f3a 	cmp.w	r3, #190464	@ 0x2e800
 8003f30:	d808      	bhi.n	8003f44 <pqcrystals_dilithium_make_hint+0x1c>
 8003f32:	f510 3fba 	cmn.w	r0, #95232	@ 0x17400
 8003f36:	d001      	beq.n	8003f3c <pqcrystals_dilithium_make_hint+0x14>
    return 1;

  return 0;
 8003f38:	2000      	movs	r0, #0
}
 8003f3a:	4770      	bx	lr
  if(a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0))
 8003f3c:	1e08      	subs	r0, r1, #0
 8003f3e:	bf18      	it	ne
 8003f40:	2001      	movne	r0, #1
 8003f42:	4770      	bx	lr
    return 1;
 8003f44:	2001      	movs	r0, #1
 8003f46:	4770      	bx	lr

08003f48 <pqcrystals_dilithium_use_hint>:
  a1  = (a + 127) >> 7;
 8003f48:	f100 037f 	add.w	r3, r0, #127	@ 0x7f
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t use_hint(int32_t a, unsigned int hint) {
 8003f4c:	4602      	mov	r2, r0
  a1  = (a + 127) >> 7;
 8003f4e:	11db      	asrs	r3, r3, #7
  a1  = (a1*11275 + (1 << 23)) >> 24;
 8003f50:	f642 400b 	movw	r0, #11275	@ 0x2c0b
 8003f54:	fb00 f303 	mul.w	r3, r0, r3
 8003f58:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8003f5c:	161b      	asrs	r3, r3, #24
  a1 ^= ((43 - a1) >> 31) & a1;
 8003f5e:	f1c3 002b 	rsb	r0, r3, #43	@ 0x2b
 8003f62:	17c0      	asrs	r0, r0, #31
 8003f64:	ea23 0000 	bic.w	r0, r3, r0
  int32_t a0, a1;

  a1 = decompose(&a0, a);
  if(hint == 0)
 8003f68:	b189      	cbz	r1, 8003f8e <pqcrystals_dilithium_use_hint+0x46>
  *a0  = a - a1*2*GAMMA2;
 8003f6a:	490b      	ldr	r1, [pc, #44]	@ (8003f98 <pqcrystals_dilithium_use_hint+0x50>)
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 8003f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003f9c <pqcrystals_dilithium_use_hint+0x54>)
  *a0  = a - a1*2*GAMMA2;
 8003f6e:	fb01 2200 	mla	r2, r1, r0, r2
  *a0 -= (((Q-1)/2 - *a0) >> 31) & Q;
 8003f72:	f5c2 117f 	rsb	r1, r2, #4177920	@ 0x3fc000
 8003f76:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
 8003f7a:	ea03 73e1 	and.w	r3, r3, r1, asr #31
  if(a0 > 0)
    return (a1 + 1) & 15;
  else
    return (a1 - 1) & 15;
#elif GAMMA2 == (Q-1)/88
  if(a0 > 0)
 8003f7e:	429a      	cmp	r2, r3
 8003f80:	dd03      	ble.n	8003f8a <pqcrystals_dilithium_use_hint+0x42>
    return (a1 == 43) ?  0 : a1 + 1;
 8003f82:	282b      	cmp	r0, #43	@ 0x2b
 8003f84:	d006      	beq.n	8003f94 <pqcrystals_dilithium_use_hint+0x4c>
 8003f86:	3001      	adds	r0, #1
 8003f88:	4770      	bx	lr
  else
    return (a1 ==  0) ? 43 : a1 - 1;
 8003f8a:	b908      	cbnz	r0, 8003f90 <pqcrystals_dilithium_use_hint+0x48>
 8003f8c:	202b      	movs	r0, #43	@ 0x2b
#endif
}
 8003f8e:	4770      	bx	lr
    return (a1 ==  0) ? 43 : a1 - 1;
 8003f90:	3801      	subs	r0, #1
 8003f92:	4770      	bx	lr
    return (a1 == 43) ?  0 : a1 + 1;
 8003f94:	2000      	movs	r0, #0
 8003f96:	4770      	bx	lr
 8003f98:	fffd1800 	.word	0xfffd1800
 8003f9c:	007fe001 	.word	0x007fe001

08003fa0 <crypto_sign_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 8003fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fa4:	f5ad 4d10 	sub.w	sp, sp, #36864	@ 0x9000
 8003fa8:	b0ac      	sub	sp, #176	@ 0xb0
 8003faa:	4605      	mov	r5, r0
 8003fac:	460e      	mov	r6, r1
  polyvecl mat[K];
  polyvecl s1, s1hat;
  polyveck s2, t1, t0;

  /* Get randomness for rho, rhoprime and key */
  randombytes(seedbuf, SEEDBYTES);
 8003fae:	a80c      	add	r0, sp, #48	@ 0x30
 8003fb0:	2120      	movs	r1, #32
 8003fb2:	f7ff ff6f 	bl	8003e94 <randombytes>
  shake256(seedbuf, 2*SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES);
 8003fb6:	aa0c      	add	r2, sp, #48	@ 0x30
 8003fb8:	2320      	movs	r3, #32
 8003fba:	4610      	mov	r0, r2
 8003fbc:	2180      	movs	r1, #128	@ 0x80
 8003fbe:	f7fd fab1 	bl	8001524 <shake256>
  rho = seedbuf;
  rhoprime = rho + SEEDBYTES;
  key = rhoprime + CRHBYTES;

  /* Expand matrix */
  polyvec_matrix_expand(mat, rho);
 8003fc2:	f50d 40a1 	add.w	r0, sp, #20608	@ 0x5080
  randombytes(seedbuf, SEEDBYTES);
 8003fc6:	ac2c      	add	r4, sp, #176	@ 0xb0

  /* Sample short vectors s1 and s2 */
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 8003fc8:	af14      	add	r7, sp, #80	@ 0x50
  polyvec_matrix_expand(mat, rho);
 8003fca:	a90c      	add	r1, sp, #48	@ 0x30
 8003fcc:	3030      	adds	r0, #48	@ 0x30
 8003fce:	f7ff fd55 	bl	8003a7c <pqcrystals_dilithium_polyvec_matrix_expand>
  polyvecl_uniform_eta(&s1, rhoprime, 0);
 8003fd2:	4639      	mov	r1, r7
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	f7ff fd8e 	bl	8003af8 <pqcrystals_dilithium_polyvecl_uniform_eta>
  polyveck_uniform_eta(&s2, rhoprime, L);
 8003fdc:	4639      	mov	r1, r7
 8003fde:	f50d 5702 	add.w	r7, sp, #8320	@ 0x2080
 8003fe2:	3730      	adds	r7, #48	@ 0x30
 8003fe4:	4638      	mov	r0, r7
 8003fe6:	2204      	movs	r2, #4
 8003fe8:	f7ff fe4a 	bl	8003c80 <pqcrystals_dilithium_polyveck_uniform_eta>
//  		  HAL_UART_Transmit(&huart2,(unsigned char*)&s1.vec[i].coeffs[j],4,100);
//  	  }
//    }

  /* Matrix-vector multiplication */
  s1hat = s1;
 8003fec:	f50d 5085 	add.w	r0, sp, #4256	@ 0x10a0
 8003ff0:	4621      	mov	r1, r4
 8003ff2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003ff6:	3010      	adds	r0, #16
 8003ff8:	f001 fcaa 	bl	8005950 <memcpy>
  polyvecl_ntt(&s1hat);
 8003ffc:	f50d 5085 	add.w	r0, sp, #4256	@ 0x10a0
 8004000:	3010      	adds	r0, #16
 8004002:	f7ff fdd5 	bl	8003bb0 <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 8004006:	f50d 5285 	add.w	r2, sp, #4256	@ 0x10a0
 800400a:	f50d 41a1 	add.w	r1, sp, #20608	@ 0x5080
 800400e:	f50d 5042 	add.w	r0, sp, #12416	@ 0x3080
 8004012:	3210      	adds	r2, #16
 8004014:	3130      	adds	r1, #48	@ 0x30
 8004016:	3030      	adds	r0, #48	@ 0x30
 8004018:	f7ff fd4e 	bl	8003ab8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&t1);
 800401c:	f50d 5042 	add.w	r0, sp, #12416	@ 0x3080
 8004020:	3030      	adds	r0, #48	@ 0x30
 8004022:	f7ff fe3f 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&t1);
 8004026:	f50d 5042 	add.w	r0, sp, #12416	@ 0x3080
 800402a:	3030      	adds	r0, #48	@ 0x30
 800402c:	f7ff fea2 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Add error vector s2 */
  polyveck_add(&t1, &t1, &s2);
 8004030:	f50d 5142 	add.w	r1, sp, #12416	@ 0x3080
 8004034:	3130      	adds	r1, #48	@ 0x30
 8004036:	463a      	mov	r2, r7
 8004038:	4608      	mov	r0, r1
 800403a:	f7ff fe57 	bl	8003cec <pqcrystals_dilithium_polyveck_add>

  /* Extract t1 and write public key */
  polyveck_caddq(&t1);
 800403e:	f50d 5042 	add.w	r0, sp, #12416	@ 0x3080
 8004042:	3030      	adds	r0, #48	@ 0x30
 8004044:	f7ff fe40 	bl	8003cc8 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_power2round(&t1, &t0, &t1);
 8004048:	f50d 4881 	add.w	r8, sp, #16512	@ 0x4080
 800404c:	f50d 5242 	add.w	r2, sp, #12416	@ 0x3080
 8004050:	f108 0830 	add.w	r8, r8, #48	@ 0x30
 8004054:	3230      	adds	r2, #48	@ 0x30
 8004056:	4641      	mov	r1, r8
 8004058:	4610      	mov	r0, r2
 800405a:	f7ff febf 	bl	8003ddc <pqcrystals_dilithium_polyveck_power2round>
  pack_pk(pk, rho, &t1);
 800405e:	f50d 5242 	add.w	r2, sp, #12416	@ 0x3080
 8004062:	a90c      	add	r1, sp, #48	@ 0x30
 8004064:	4628      	mov	r0, r5
 8004066:	3230      	adds	r2, #48	@ 0x30
 8004068:	f7fe fe3a 	bl	8002ce0 <pqcrystals_dilithium_pack_pk>

  /* Compute H(rho, t1) and write secret key */
  shake256(tr, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 800406c:	462a      	mov	r2, r5
 800406e:	a804      	add	r0, sp, #16
 8004070:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8004074:	2120      	movs	r1, #32
 8004076:	f7fd fa55 	bl	8001524 <shake256>
  pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 800407a:	4630      	mov	r0, r6
 800407c:	e9cd 4701 	strd	r4, r7, [sp, #4]
 8004080:	f8cd 8000 	str.w	r8, [sp]
 8004084:	ab24      	add	r3, sp, #144	@ 0x90
 8004086:	aa04      	add	r2, sp, #16
 8004088:	a90c      	add	r1, sp, #48	@ 0x30
 800408a:	f7fe fe8d 	bl	8002da8 <pqcrystals_dilithium_pack_sk>

  return 0;
}
 800408e:	2000      	movs	r0, #0
 8004090:	f50d 4d10 	add.w	sp, sp, #36864	@ 0x9000
 8004094:	b02c      	add	sp, #176	@ 0xb0
 8004096:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800409a:	bf00      	nop

0800409c <crypto_sign_signature>:
                          size_t *siglen,
                          const uint8_t *m,
                          size_t mlen,
                          const uint8_t *sk,int trigger_rej_idx,
						  int poly_idx, int* rej_num)
{
 800409c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040a0:	f5ad 4d45 	sub.w	sp, sp, #50432	@ 0xc500
 80040a4:	b0b5      	sub	sp, #212	@ 0xd4
 80040a6:	f50d 4445 	add.w	r4, sp, #50432	@ 0xc500
 80040aa:	34f8      	adds	r4, #248	@ 0xf8
 80040ac:	461d      	mov	r5, r3
 80040ae:	6824      	ldr	r4, [r4, #0]
  rho = seedbuf;
  tr = rho + SEEDBYTES;
  key = tr + SEEDBYTES;
  mu = key + SEEDBYTES;
  rhoprime = mu + CRHBYTES;
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 80040b0:	9402      	str	r4, [sp, #8]
 80040b2:	ab74      	add	r3, sp, #464	@ 0x1d0
 80040b4:	f1a3 07c0 	sub.w	r7, r3, #192	@ 0xc0
{
 80040b8:	f50d 4c46 	add.w	ip, sp, #50688	@ 0xc600
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 80040bc:	f50d 63ba 	add.w	r3, sp, #1488	@ 0x5d0
 80040c0:	f50d 448b 	add.w	r4, sp, #17792	@ 0x4580
{
 80040c4:	f10c 0c04 	add.w	ip, ip, #4
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 80040c8:	ae4c      	add	r6, sp, #304	@ 0x130
 80040ca:	9300      	str	r3, [sp, #0]
 80040cc:	3450      	adds	r4, #80	@ 0x50
 80040ce:	f50d 5357 	add.w	r3, sp, #13760	@ 0x35c0
 80040d2:	3310      	adds	r3, #16
 80040d4:	9401      	str	r4, [sp, #4]
{
 80040d6:	9107      	str	r1, [sp, #28]
 80040d8:	4614      	mov	r4, r2
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 80040da:	4639      	mov	r1, r7
 80040dc:	4632      	mov	r2, r6
{
 80040de:	4680      	mov	r8, r0
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 80040e0:	a83c      	add	r0, sp, #240	@ 0xf0
{
 80040e2:	f8dc b000 	ldr.w	fp, [ip]
	rej_cnt+=1;

  /* Sample intermediate vector y */
//  polyvecl_uniform_gamma1(&y, rhoprime, nonce++);

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80040e6:	f8df 9504 	ldr.w	r9, [pc, #1284]	@ 80045ec <crypto_sign_signature+0x550>
  unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 80040ea:	f7fe feeb 	bl	8002ec4 <pqcrystals_dilithium_unpack_sk>
  shake256_inc_init(&state);
 80040ee:	a808      	add	r0, sp, #32
 80040f0:	f7fd f95e 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, tr, SEEDBYTES);
 80040f4:	2220      	movs	r2, #32
 80040f6:	4639      	mov	r1, r7
 80040f8:	eb0d 0002 	add.w	r0, sp, r2
 80040fc:	f7fd f964 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(&state, m, mlen);
 8004100:	462a      	mov	r2, r5
 8004102:	4621      	mov	r1, r4
 8004104:	a808      	add	r0, sp, #32
 8004106:	f7fd f95f 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 800410a:	a808      	add	r0, sp, #32
 800410c:	f7fd f998 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeeze(mu, CRHBYTES, &state);
 8004110:	aa08      	add	r2, sp, #32
 8004112:	2140      	movs	r1, #64	@ 0x40
 8004114:	a854      	add	r0, sp, #336	@ 0x150
 8004116:	f7fd f9bf 	bl	8001498 <shake256_inc_squeeze>
  shake256(rhoprime, CRHBYTES, key, SEEDBYTES + CRHBYTES);
 800411a:	4632      	mov	r2, r6
 800411c:	2360      	movs	r3, #96	@ 0x60
 800411e:	2140      	movs	r1, #64	@ 0x40
 8004120:	a864      	add	r0, sp, #400	@ 0x190
 8004122:	f7fd f9ff 	bl	8001524 <shake256>
  polyvec_matrix_expand(mat, rho);
 8004126:	f50d 4005 	add.w	r0, sp, #34048	@ 0x8500
 800412a:	a93c      	add	r1, sp, #240	@ 0xf0
 800412c:	30d0      	adds	r0, #208	@ 0xd0
 800412e:	f7ff fca5 	bl	8003a7c <pqcrystals_dilithium_polyvec_matrix_expand>
  polyvecl_ntt(&s1);
 8004132:	f50d 60ba 	add.w	r0, sp, #1488	@ 0x5d0
 8004136:	f7ff fd3b 	bl	8003bb0 <pqcrystals_dilithium_polyvecl_ntt>
  polyveck_ntt(&s2);
 800413a:	f50d 408b 	add.w	r0, sp, #17792	@ 0x4580
 800413e:	3050      	adds	r0, #80	@ 0x50
 8004140:	f7ff fe06 	bl	8003d50 <pqcrystals_dilithium_polyveck_ntt>
  polyveck_ntt(&t0);
 8004144:	f50d 5057 	add.w	r0, sp, #13760	@ 0x35c0
 8004148:	3010      	adds	r0, #16
 800414a:	f7ff fe01 	bl	8003d50 <pqcrystals_dilithium_polyveck_ntt>
  int rej_cnt = 0;
 800414e:	f50d 4345 	add.w	r3, sp, #50432	@ 0xc500
 8004152:	33fc      	adds	r3, #252	@ 0xfc
 8004154:	f50d 5417 	add.w	r4, sp, #9664	@ 0x25c0
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	3301      	adds	r3, #1
 800415c:	f50d 53ae 	add.w	r3, sp, #5568	@ 0x15c0
 8004160:	f103 0310 	add.w	r3, r3, #16
 8004164:	f50d 45ab 	add.w	r5, sp, #21888	@ 0x5580
 8004168:	f50d 46cb 	add.w	r6, sp, #25984	@ 0x6580
 800416c:	f50d 47eb 	add.w	r7, sp, #30080	@ 0x7580
 8004170:	f04f 0a00 	mov.w	sl, #0
 8004174:	9305      	str	r3, [sp, #20]
 8004176:	f104 0410 	add.w	r4, r4, #16
 800417a:	f105 0550 	add.w	r5, r5, #80	@ 0x50
 800417e:	f106 0650 	add.w	r6, r6, #80	@ 0x50
 8004182:	f107 0750 	add.w	r7, r7, #80	@ 0x50
 8004186:	f000 80e0 	beq.w	800434a <crypto_sign_signature+0x2ae>
	*rej_num += 1;
 800418a:	f8db 3000 	ldr.w	r3, [fp]
 800418e:	3301      	adds	r3, #1
 8004190:	f8cb 3000 	str.w	r3, [fp]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8004194:	2108      	movs	r1, #8
 8004196:	fa1f f38a 	uxth.w	r3, sl
 800419a:	2200      	movs	r2, #0
 800419c:	4648      	mov	r0, r9
 800419e:	9306      	str	r3, [sp, #24]
 80041a0:	f000 fede 	bl	8004f60 <HAL_GPIO_WritePin>
	if(trigger_rej_idx == -1){
		  polyvecl_uniform_gamma1(&y, rhoprime, nonce++,1,poly_idx);
	}
	else{
		  if(rej_cnt==trigger_rej_idx){
 80041a4:	f50d 4145 	add.w	r1, sp, #50432	@ 0xc500
 80041a8:	31fc      	adds	r1, #252	@ 0xfc
	rej_cnt+=1;
 80041aa:	f10a 0a01 	add.w	sl, sl, #1
		  if(rej_cnt==trigger_rej_idx){
 80041ae:	6809      	ldr	r1, [r1, #0]
 80041b0:	458a      	cmp	sl, r1
 80041b2:	f000 8198 	beq.w	80044e6 <crypto_sign_signature+0x44a>
//			  for(int i=0;i<N;++i){
//				  HAL_UART_Transmit(&huart2,(unsigned char*)&y.vec[poly_idx].coeffs[i],4,1000);
//			  }
		  }
		  else
			  polyvecl_uniform_gamma1(&y, rhoprime, nonce++,0,poly_idx);
 80041b6:	f50d 4146 	add.w	r1, sp, #50688	@ 0xc600
 80041ba:	2300      	movs	r3, #0
 80041bc:	6809      	ldr	r1, [r1, #0]
 80041be:	9a06      	ldr	r2, [sp, #24]
 80041c0:	9805      	ldr	r0, [sp, #20]
 80041c2:	9100      	str	r1, [sp, #0]
 80041c4:	a964      	add	r1, sp, #400	@ 0x190
 80041c6:	f7ff fca9 	bl	8003b1c <pqcrystals_dilithium_polyvecl_uniform_gamma1>
	}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80041ca:	2201      	movs	r2, #1
 80041cc:	2108      	movs	r1, #8
 80041ce:	4648      	mov	r0, r9
 80041d0:	f000 fec6 	bl	8004f60 <HAL_GPIO_WritePin>

  /* Matrix-vector multiplication */
  z = y;
 80041d4:	9905      	ldr	r1, [sp, #20]
 80041d6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80041da:	4620      	mov	r0, r4
 80041dc:	f001 fbb8 	bl	8005950 <memcpy>
  polyvecl_ntt(&z);
 80041e0:	4620      	mov	r0, r4
 80041e2:	f7ff fce5 	bl	8003bb0 <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 80041e6:	f50d 4305 	add.w	r3, sp, #34048	@ 0x8500
 80041ea:	33d0      	adds	r3, #208	@ 0xd0
 80041ec:	4619      	mov	r1, r3
 80041ee:	4622      	mov	r2, r4
 80041f0:	4628      	mov	r0, r5
 80041f2:	f7ff fc61 	bl	8003ab8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 80041f6:	4628      	mov	r0, r5
 80041f8:	f7ff fd54 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 80041fc:	4628      	mov	r0, r5
 80041fe:	f7ff fdb9 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Decompose w and call the random oracle */
  polyveck_caddq(&w1);
 8004202:	4628      	mov	r0, r5
 8004204:	f7ff fd60 	bl	8003cc8 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 8004208:	462a      	mov	r2, r5
 800420a:	4631      	mov	r1, r6
 800420c:	4628      	mov	r0, r5
 800420e:	f7ff fdf5 	bl	8003dfc <pqcrystals_dilithium_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 8004212:	4629      	mov	r1, r5
 8004214:	4640      	mov	r0, r8
 8004216:	f7ff fe27 	bl	8003e68 <pqcrystals_dilithium_polyveck_pack_w1>

  shake256_inc_init(&state);
 800421a:	a808      	add	r0, sp, #32
 800421c:	f7fd f8c8 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 8004220:	2240      	movs	r2, #64	@ 0x40
 8004222:	a954      	add	r1, sp, #336	@ 0x150
 8004224:	a808      	add	r0, sp, #32
 8004226:	f7fd f8cf 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 800422a:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800422e:	4641      	mov	r1, r8
 8004230:	a808      	add	r0, sp, #32
 8004232:	f7fd f8c9 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 8004236:	a808      	add	r0, sp, #32
 8004238:	f7fd f902 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeeze(sig, SEEDBYTES, &state);
 800423c:	ab08      	add	r3, sp, #32
 800423e:	461a      	mov	r2, r3
 8004240:	2120      	movs	r1, #32
 8004242:	4640      	mov	r0, r8
 8004244:	f7fd f928 	bl	8001498 <shake256_inc_squeeze>
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
	  poly_challenge(&cp, sig);
//		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
  }
  else{
	  poly_challenge(&cp, sig);
 8004248:	4641      	mov	r1, r8
 800424a:	a874      	add	r0, sp, #464	@ 0x1d0
 800424c:	f7ff f910 	bl	8003470 <pqcrystals_dilithium_poly_challenge>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
		  poly_ntt(&cp);
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
	  }
	  else
		  poly_ntt(&cp);
 8004250:	a874      	add	r0, sp, #464	@ 0x1d0
 8004252:	f7fe ffcd 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
  }


  /* Compute z, reject if it reveals secret */
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 8004256:	f50d 63ba 	add.w	r3, sp, #1488	@ 0x5d0
 800425a:	461a      	mov	r2, r3
 800425c:	ab74      	add	r3, sp, #464	@ 0x1d0
 800425e:	4619      	mov	r1, r3
 8004260:	4620      	mov	r0, r4
 8004262:	f7ff fceb 	bl	8003c3c <pqcrystals_dilithium_polyvecl_pointwise_poly_montgomery>
//  polyvecl_invntt_tomont(&z);
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8004266:	2200      	movs	r2, #0
 8004268:	2108      	movs	r1, #8
 800426a:	4648      	mov	r0, r9
 800426c:	f000 fe78 	bl	8004f60 <HAL_GPIO_WritePin>
   }
   else{
 	  if(rej_cnt==trigger_rej_idx)
 		 polyvecl_invntt_tomont(&z,1,poly_idx);
 	  else
 		 polyvecl_invntt_tomont(&z,0,poly_idx);
 8004270:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8004274:	2100      	movs	r1, #0
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	4620      	mov	r0, r4
 800427a:	f7ff fcab 	bl	8003bd4 <pqcrystals_dilithium_polyvecl_invntt_tomont>
   }
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800427e:	2201      	movs	r2, #1
 8004280:	2108      	movs	r1, #8
 8004282:	4648      	mov	r0, r9
 8004284:	f000 fe6c 	bl	8004f60 <HAL_GPIO_WritePin>
   }
   else{
 	  if(rej_cnt==trigger_rej_idx)
 		 polyvecl_add(&z, &z, &y,1,poly_idx);
 	  else
 		 polyvecl_add(&z, &z, &y,0,poly_idx);
 8004288:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 800428c:	9a05      	ldr	r2, [sp, #20]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	9300      	str	r3, [sp, #0]
 8004292:	4621      	mov	r1, r4
 8004294:	2300      	movs	r3, #0
 8004296:	4620      	mov	r0, r4
 8004298:	f7ff fc7a 	bl	8003b90 <pqcrystals_dilithium_polyvecl_add>
   }

//  polyvecl_add(&z, &z, &y);
  polyvecl_reduce(&z);
 800429c:	4620      	mov	r0, r4
 800429e:	f7ff fc65 	bl	8003b6c <pqcrystals_dilithium_polyvecl_reduce>
//  	  for(int i=0;i<N;++i){
//  		  HAL_UART_Transmit(&huart2,(unsigned char*)&z.vec[poly_idx].coeffs[i],4,1000);
//  	  }
//    }

  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 80042a2:	49d0      	ldr	r1, [pc, #832]	@ (80045e4 <crypto_sign_signature+0x548>)
 80042a4:	4620      	mov	r0, r4
 80042a6:	f7ff fcd9 	bl	8003c5c <pqcrystals_dilithium_polyvecl_chknorm>
 80042aa:	2800      	cmp	r0, #0
 80042ac:	f47f af6d 	bne.w	800418a <crypto_sign_signature+0xee>
    goto rej;

  /* Check that subtracting cs2 does not change high bits of w and low bits
   * do not reveal secret information */
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 80042b0:	f50d 428b 	add.w	r2, sp, #17792	@ 0x4580
 80042b4:	3250      	adds	r2, #80	@ 0x50
 80042b6:	a974      	add	r1, sp, #464	@ 0x1d0
 80042b8:	4638      	mov	r0, r7
 80042ba:	f7ff fd6d 	bl	8003d98 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 80042be:	4638      	mov	r0, r7
 80042c0:	f7ff fd58 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_sub(&w0, &w0, &h);
 80042c4:	4631      	mov	r1, r6
 80042c6:	463a      	mov	r2, r7
 80042c8:	4630      	mov	r0, r6
 80042ca:	f7ff fd1f 	bl	8003d0c <pqcrystals_dilithium_polyveck_sub>
  polyveck_reduce(&w0);
 80042ce:	4630      	mov	r0, r6
 80042d0:	f7ff fce8 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 80042d4:	49c4      	ldr	r1, [pc, #784]	@ (80045e8 <crypto_sign_signature+0x54c>)
 80042d6:	4630      	mov	r0, r6
 80042d8:	f7ff fd6e 	bl	8003db8 <pqcrystals_dilithium_polyveck_chknorm>
 80042dc:	2800      	cmp	r0, #0
 80042de:	f47f af54 	bne.w	800418a <crypto_sign_signature+0xee>
    goto rej;

  /* Compute hints for w1 */
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 80042e2:	f50d 5257 	add.w	r2, sp, #13760	@ 0x35c0
 80042e6:	a974      	add	r1, sp, #464	@ 0x1d0
 80042e8:	3210      	adds	r2, #16
 80042ea:	4638      	mov	r0, r7
 80042ec:	f7ff fd54 	bl	8003d98 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 80042f0:	4638      	mov	r0, r7
 80042f2:	f7ff fd3f 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_reduce(&h);
 80042f6:	4638      	mov	r0, r7
 80042f8:	f7ff fcd4 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  if(polyveck_chknorm(&h, GAMMA2))
 80042fc:	f44f 31ba 	mov.w	r1, #95232	@ 0x17400
 8004300:	4638      	mov	r0, r7
 8004302:	f7ff fd59 	bl	8003db8 <pqcrystals_dilithium_polyveck_chknorm>
 8004306:	2800      	cmp	r0, #0
 8004308:	f47f af3f 	bne.w	800418a <crypto_sign_signature+0xee>
    goto rej;

  polyveck_add(&w0, &w0, &h);
 800430c:	463a      	mov	r2, r7
 800430e:	4631      	mov	r1, r6
 8004310:	4630      	mov	r0, r6
 8004312:	f7ff fceb 	bl	8003cec <pqcrystals_dilithium_polyveck_add>
  n = polyveck_make_hint(&h, &w0, &w1);
 8004316:	462a      	mov	r2, r5
 8004318:	4631      	mov	r1, r6
 800431a:	4638      	mov	r0, r7
 800431c:	f7ff fd7e 	bl	8003e1c <pqcrystals_dilithium_polyveck_make_hint>
  if(n > OMEGA)
 8004320:	2850      	cmp	r0, #80	@ 0x50
 8004322:	f63f af32 	bhi.w	800418a <crypto_sign_signature+0xee>
    goto rej;

  /* Write signature */
  pack_sig(sig, sig, &z, &h);
 8004326:	463b      	mov	r3, r7
 8004328:	4622      	mov	r2, r4
 800432a:	4640      	mov	r0, r8
 800432c:	4641      	mov	r1, r8
 800432e:	f7fe fe5f 	bl	8002ff0 <pqcrystals_dilithium_pack_sig>
  *siglen = CRYPTO_BYTES;
 8004332:	9a07      	ldr	r2, [sp, #28]
 8004334:	f640 1374 	movw	r3, #2420	@ 0x974
  return 0;
}
 8004338:	2000      	movs	r0, #0
  *siglen = CRYPTO_BYTES;
 800433a:	6013      	str	r3, [r2, #0]
}
 800433c:	f50d 4d45 	add.w	sp, sp, #50432	@ 0xc500
 8004340:	b035      	add	sp, #212	@ 0xd4
 8004342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004346:	f10a 0a01 	add.w	sl, sl, #1
	*rej_num += 1;
 800434a:	f8db 3000 	ldr.w	r3, [fp]
 800434e:	3301      	adds	r3, #1
 8004350:	f8cb 3000 	str.w	r3, [fp]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8004354:	2200      	movs	r2, #0
 8004356:	2108      	movs	r1, #8
 8004358:	4648      	mov	r0, r9
 800435a:	f000 fe01 	bl	8004f60 <HAL_GPIO_WritePin>
		  polyvecl_uniform_gamma1(&y, rhoprime, nonce++,1,poly_idx);
 800435e:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8004362:	9805      	ldr	r0, [sp, #20]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	fa1f f28a 	uxth.w	r2, sl
 800436c:	2301      	movs	r3, #1
 800436e:	a964      	add	r1, sp, #400	@ 0x190
 8004370:	f7ff fbd4 	bl	8003b1c <pqcrystals_dilithium_polyvecl_uniform_gamma1>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8004374:	2201      	movs	r2, #1
 8004376:	2108      	movs	r1, #8
 8004378:	4648      	mov	r0, r9
 800437a:	f000 fdf1 	bl	8004f60 <HAL_GPIO_WritePin>
  z = y;
 800437e:	9905      	ldr	r1, [sp, #20]
 8004380:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8004384:	4620      	mov	r0, r4
 8004386:	f001 fae3 	bl	8005950 <memcpy>
  polyvecl_ntt(&z);
 800438a:	4620      	mov	r0, r4
 800438c:	f7ff fc10 	bl	8003bb0 <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8004390:	f50d 4305 	add.w	r3, sp, #34048	@ 0x8500
 8004394:	33d0      	adds	r3, #208	@ 0xd0
 8004396:	4619      	mov	r1, r3
 8004398:	4622      	mov	r2, r4
 800439a:	4628      	mov	r0, r5
 800439c:	f7ff fb8c 	bl	8003ab8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 80043a0:	4628      	mov	r0, r5
 80043a2:	f7ff fc7f 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 80043a6:	4628      	mov	r0, r5
 80043a8:	f7ff fce4 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
 80043ac:	4628      	mov	r0, r5
 80043ae:	f7ff fc8b 	bl	8003cc8 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 80043b2:	462a      	mov	r2, r5
 80043b4:	4631      	mov	r1, r6
 80043b6:	4628      	mov	r0, r5
 80043b8:	f7ff fd20 	bl	8003dfc <pqcrystals_dilithium_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 80043bc:	4629      	mov	r1, r5
 80043be:	4640      	mov	r0, r8
 80043c0:	f7ff fd52 	bl	8003e68 <pqcrystals_dilithium_polyveck_pack_w1>
  shake256_inc_init(&state);
 80043c4:	a808      	add	r0, sp, #32
 80043c6:	f7fc fff3 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 80043ca:	2240      	movs	r2, #64	@ 0x40
 80043cc:	a954      	add	r1, sp, #336	@ 0x150
 80043ce:	a808      	add	r0, sp, #32
 80043d0:	f7fc fffa 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 80043d4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80043d8:	4641      	mov	r1, r8
 80043da:	a808      	add	r0, sp, #32
 80043dc:	f7fc fff4 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 80043e0:	a808      	add	r0, sp, #32
 80043e2:	f7fd f82d 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeeze(sig, SEEDBYTES, &state);
 80043e6:	ab08      	add	r3, sp, #32
 80043e8:	461a      	mov	r2, r3
 80043ea:	2120      	movs	r1, #32
 80043ec:	4640      	mov	r0, r8
 80043ee:	f7fd f853 	bl	8001498 <shake256_inc_squeeze>
	  poly_challenge(&cp, sig);
 80043f2:	4641      	mov	r1, r8
 80043f4:	a874      	add	r0, sp, #464	@ 0x1d0
 80043f6:	f7ff f83b 	bl	8003470 <pqcrystals_dilithium_poly_challenge>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80043fa:	2200      	movs	r2, #0
 80043fc:	2102      	movs	r1, #2
 80043fe:	4648      	mov	r0, r9
 8004400:	f000 fdae 	bl	8004f60 <HAL_GPIO_WritePin>
	  poly_ntt(&cp);
 8004404:	a874      	add	r0, sp, #464	@ 0x1d0
 8004406:	f7fe fef3 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 800440a:	2201      	movs	r2, #1
 800440c:	2102      	movs	r1, #2
 800440e:	4648      	mov	r0, r9
 8004410:	f000 fda6 	bl	8004f60 <HAL_GPIO_WritePin>
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 8004414:	f50d 63ba 	add.w	r3, sp, #1488	@ 0x5d0
 8004418:	461a      	mov	r2, r3
 800441a:	ab74      	add	r3, sp, #464	@ 0x1d0
 800441c:	4619      	mov	r1, r3
 800441e:	4620      	mov	r0, r4
 8004420:	f7ff fc0c 	bl	8003c3c <pqcrystals_dilithium_polyvecl_pointwise_poly_montgomery>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8004424:	2200      	movs	r2, #0
 8004426:	2108      	movs	r1, #8
 8004428:	4648      	mov	r0, r9
 800442a:	f000 fd99 	bl	8004f60 <HAL_GPIO_WritePin>
	   polyvecl_invntt_tomont(&z,1,poly_idx);
 800442e:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8004432:	2101      	movs	r1, #1
 8004434:	681a      	ldr	r2, [r3, #0]
 8004436:	4620      	mov	r0, r4
 8004438:	f7ff fbcc 	bl	8003bd4 <pqcrystals_dilithium_polyvecl_invntt_tomont>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 800443c:	2201      	movs	r2, #1
 800443e:	2108      	movs	r1, #8
 8004440:	4648      	mov	r0, r9
 8004442:	f000 fd8d 	bl	8004f60 <HAL_GPIO_WritePin>
	   polyvecl_add(&z, &z, &y,1,poly_idx);
 8004446:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 800444a:	4621      	mov	r1, r4
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	9a05      	ldr	r2, [sp, #20]
 8004450:	9300      	str	r3, [sp, #0]
 8004452:	4620      	mov	r0, r4
 8004454:	2301      	movs	r3, #1
 8004456:	f7ff fb9b 	bl	8003b90 <pqcrystals_dilithium_polyvecl_add>
  polyvecl_reduce(&z);
 800445a:	4620      	mov	r0, r4
 800445c:	f7ff fb86 	bl	8003b6c <pqcrystals_dilithium_polyvecl_reduce>
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 8004460:	4960      	ldr	r1, [pc, #384]	@ (80045e4 <crypto_sign_signature+0x548>)
 8004462:	4620      	mov	r0, r4
 8004464:	f7ff fbfa 	bl	8003c5c <pqcrystals_dilithium_polyvecl_chknorm>
 8004468:	2800      	cmp	r0, #0
 800446a:	f47f af6c 	bne.w	8004346 <crypto_sign_signature+0x2aa>
  polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 800446e:	f50d 428b 	add.w	r2, sp, #17792	@ 0x4580
 8004472:	3250      	adds	r2, #80	@ 0x50
 8004474:	a974      	add	r1, sp, #464	@ 0x1d0
 8004476:	4638      	mov	r0, r7
 8004478:	f7ff fc8e 	bl	8003d98 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 800447c:	4638      	mov	r0, r7
 800447e:	f7ff fc79 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_sub(&w0, &w0, &h);
 8004482:	4631      	mov	r1, r6
 8004484:	463a      	mov	r2, r7
 8004486:	4630      	mov	r0, r6
 8004488:	f7ff fc40 	bl	8003d0c <pqcrystals_dilithium_polyveck_sub>
  polyveck_reduce(&w0);
 800448c:	4630      	mov	r0, r6
 800448e:	f7ff fc09 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  if(polyveck_chknorm(&w0, GAMMA2 - BETA))
 8004492:	4955      	ldr	r1, [pc, #340]	@ (80045e8 <crypto_sign_signature+0x54c>)
 8004494:	4630      	mov	r0, r6
 8004496:	f7ff fc8f 	bl	8003db8 <pqcrystals_dilithium_polyveck_chknorm>
 800449a:	2800      	cmp	r0, #0
 800449c:	f47f af53 	bne.w	8004346 <crypto_sign_signature+0x2aa>
  polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 80044a0:	f50d 5257 	add.w	r2, sp, #13760	@ 0x35c0
 80044a4:	a974      	add	r1, sp, #464	@ 0x1d0
 80044a6:	3210      	adds	r2, #16
 80044a8:	4638      	mov	r0, r7
 80044aa:	f7ff fc75 	bl	8003d98 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>
  polyveck_invntt_tomont(&h);
 80044ae:	4638      	mov	r0, r7
 80044b0:	f7ff fc60 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_reduce(&h);
 80044b4:	4638      	mov	r0, r7
 80044b6:	f7ff fbf5 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  if(polyveck_chknorm(&h, GAMMA2))
 80044ba:	f44f 31ba 	mov.w	r1, #95232	@ 0x17400
 80044be:	4638      	mov	r0, r7
 80044c0:	f7ff fc7a 	bl	8003db8 <pqcrystals_dilithium_polyveck_chknorm>
 80044c4:	2800      	cmp	r0, #0
 80044c6:	f47f af3e 	bne.w	8004346 <crypto_sign_signature+0x2aa>
  polyveck_add(&w0, &w0, &h);
 80044ca:	463a      	mov	r2, r7
 80044cc:	4631      	mov	r1, r6
 80044ce:	4630      	mov	r0, r6
 80044d0:	f7ff fc0c 	bl	8003cec <pqcrystals_dilithium_polyveck_add>
  n = polyveck_make_hint(&h, &w0, &w1);
 80044d4:	462a      	mov	r2, r5
 80044d6:	4631      	mov	r1, r6
 80044d8:	4638      	mov	r0, r7
 80044da:	f7ff fc9f 	bl	8003e1c <pqcrystals_dilithium_polyveck_make_hint>
  if(n > OMEGA)
 80044de:	2850      	cmp	r0, #80	@ 0x50
 80044e0:	f63f af31 	bhi.w	8004346 <crypto_sign_signature+0x2aa>
 80044e4:	e71f      	b.n	8004326 <crypto_sign_signature+0x28a>
			  polyvecl_uniform_gamma1(&y, rhoprime, nonce++,1,poly_idx);
 80044e6:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80044ea:	9a06      	ldr	r2, [sp, #24]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	9805      	ldr	r0, [sp, #20]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	a964      	add	r1, sp, #400	@ 0x190
 80044f4:	2301      	movs	r3, #1
 80044f6:	f7ff fb11 	bl	8003b1c <pqcrystals_dilithium_polyvecl_uniform_gamma1>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80044fa:	4648      	mov	r0, r9
 80044fc:	2201      	movs	r2, #1
 80044fe:	2108      	movs	r1, #8
 8004500:	f000 fd2e 	bl	8004f60 <HAL_GPIO_WritePin>
  z = y;
 8004504:	9905      	ldr	r1, [sp, #20]
 8004506:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800450a:	4620      	mov	r0, r4
 800450c:	f001 fa20 	bl	8005950 <memcpy>
  polyvecl_ntt(&z);
 8004510:	4620      	mov	r0, r4
 8004512:	f7ff fb4d 	bl	8003bb0 <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8004516:	f50d 4305 	add.w	r3, sp, #34048	@ 0x8500
 800451a:	33d0      	adds	r3, #208	@ 0xd0
 800451c:	4619      	mov	r1, r3
 800451e:	4622      	mov	r2, r4
 8004520:	4628      	mov	r0, r5
 8004522:	f7ff fac9 	bl	8003ab8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>
  polyveck_reduce(&w1);
 8004526:	4628      	mov	r0, r5
 8004528:	f7ff fbbc 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 800452c:	4628      	mov	r0, r5
 800452e:	f7ff fc21 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>
  polyveck_caddq(&w1);
 8004532:	4628      	mov	r0, r5
 8004534:	f7ff fbc8 	bl	8003cc8 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_decompose(&w1, &w0, &w1);
 8004538:	462a      	mov	r2, r5
 800453a:	4631      	mov	r1, r6
 800453c:	4628      	mov	r0, r5
 800453e:	f7ff fc5d 	bl	8003dfc <pqcrystals_dilithium_polyveck_decompose>
  polyveck_pack_w1(sig, &w1);
 8004542:	4629      	mov	r1, r5
 8004544:	4640      	mov	r0, r8
 8004546:	f7ff fc8f 	bl	8003e68 <pqcrystals_dilithium_polyveck_pack_w1>
  shake256_inc_init(&state);
 800454a:	a808      	add	r0, sp, #32
 800454c:	f7fc ff30 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 8004550:	a954      	add	r1, sp, #336	@ 0x150
 8004552:	a808      	add	r0, sp, #32
 8004554:	2240      	movs	r2, #64	@ 0x40
 8004556:	f7fc ff37 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(&state, sig, K*POLYW1_PACKEDBYTES);
 800455a:	4641      	mov	r1, r8
 800455c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8004560:	a808      	add	r0, sp, #32
 8004562:	f7fc ff31 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 8004566:	a808      	add	r0, sp, #32
 8004568:	f7fc ff6a 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeeze(sig, SEEDBYTES, &state);
 800456c:	ab08      	add	r3, sp, #32
 800456e:	461a      	mov	r2, r3
 8004570:	4640      	mov	r0, r8
 8004572:	2120      	movs	r1, #32
 8004574:	f7fc ff90 	bl	8001498 <shake256_inc_squeeze>
	  poly_challenge(&cp, sig);
 8004578:	4641      	mov	r1, r8
 800457a:	a874      	add	r0, sp, #464	@ 0x1d0
 800457c:	f7fe ff78 	bl	8003470 <pqcrystals_dilithium_poly_challenge>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	2102      	movs	r1, #2
 8004584:	4648      	mov	r0, r9
 8004586:	f000 fceb 	bl	8004f60 <HAL_GPIO_WritePin>
		  poly_ntt(&cp);
 800458a:	a874      	add	r0, sp, #464	@ 0x1d0
 800458c:	f7fe fe30 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8004590:	4648      	mov	r0, r9
 8004592:	2201      	movs	r2, #1
 8004594:	2102      	movs	r1, #2
 8004596:	f000 fce3 	bl	8004f60 <HAL_GPIO_WritePin>
  polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 800459a:	f50d 63ba 	add.w	r3, sp, #1488	@ 0x5d0
 800459e:	461a      	mov	r2, r3
 80045a0:	ab74      	add	r3, sp, #464	@ 0x1d0
 80045a2:	4619      	mov	r1, r3
 80045a4:	4620      	mov	r0, r4
 80045a6:	f7ff fb49 	bl	8003c3c <pqcrystals_dilithium_polyvecl_pointwise_poly_montgomery>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80045aa:	4648      	mov	r0, r9
 80045ac:	2200      	movs	r2, #0
 80045ae:	2108      	movs	r1, #8
 80045b0:	f000 fcd6 	bl	8004f60 <HAL_GPIO_WritePin>
 		 polyvecl_invntt_tomont(&z,1,poly_idx);
 80045b4:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80045b8:	4620      	mov	r0, r4
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	2101      	movs	r1, #1
 80045be:	f7ff fb09 	bl	8003bd4 <pqcrystals_dilithium_polyvecl_invntt_tomont>
   HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 80045c2:	4648      	mov	r0, r9
 80045c4:	2201      	movs	r2, #1
 80045c6:	2108      	movs	r1, #8
 80045c8:	f000 fcca 	bl	8004f60 <HAL_GPIO_WritePin>
 		 polyvecl_add(&z, &z, &y,1,poly_idx);
 80045cc:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80045d0:	9a05      	ldr	r2, [sp, #20]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	9300      	str	r3, [sp, #0]
 80045d6:	4621      	mov	r1, r4
 80045d8:	2301      	movs	r3, #1
 80045da:	4620      	mov	r0, r4
 80045dc:	f7ff fad8 	bl	8003b90 <pqcrystals_dilithium_polyvecl_add>
 80045e0:	e65c      	b.n	800429c <crypto_sign_signature+0x200>
 80045e2:	bf00      	nop
 80045e4:	0001ffb2 	.word	0x0001ffb2
 80045e8:	000173b2 	.word	0x000173b2
 80045ec:	40020800 	.word	0x40020800

080045f0 <crypto_sign>:
                size_t *smlen,
                const uint8_t *m,
                size_t mlen,
                const uint8_t *sk,int trigger_rej_idx,
				  int poly_idx, int* rej_num)
{
 80045f0:	b530      	push	{r4, r5, lr}
 80045f2:	460d      	mov	r5, r1
 80045f4:	b085      	sub	sp, #20
  size_t i;

  for(i = 0; i < mlen; ++i)
 80045f6:	461c      	mov	r4, r3
 80045f8:	b153      	cbz	r3, 8004610 <crypto_sign+0x20>
 80045fa:	f603 1e74 	addw	lr, r3, #2420	@ 0x974
 80045fe:	4486      	add	lr, r0
 8004600:	eb02 0c03 	add.w	ip, r2, r3
    sm[CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8004604:	f81c 3d01 	ldrb.w	r3, [ip, #-1]!
 8004608:	f80e 3d01 	strb.w	r3, [lr, #-1]!
  for(i = 0; i < mlen; ++i)
 800460c:	4594      	cmp	ip, r2
 800460e:	d1f9      	bne.n	8004604 <crypto_sign+0x14>
  crypto_sign_signature(sm, smlen, sm + CRYPTO_BYTES, mlen, sk,trigger_rej_idx,poly_idx,rej_num);
 8004610:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004612:	9303      	str	r3, [sp, #12]
 8004614:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004616:	9302      	str	r3, [sp, #8]
 8004618:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800461a:	9301      	str	r3, [sp, #4]
 800461c:	9b08      	ldr	r3, [sp, #32]
 800461e:	9300      	str	r3, [sp, #0]
 8004620:	f600 1274 	addw	r2, r0, #2420	@ 0x974
 8004624:	4623      	mov	r3, r4
 8004626:	4629      	mov	r1, r5
 8004628:	f7ff fd38 	bl	800409c <crypto_sign_signature>
  *smlen += mlen;
 800462c:	682b      	ldr	r3, [r5, #0]
  return 0;
}
 800462e:	2000      	movs	r0, #0
  *smlen += mlen;
 8004630:	4423      	add	r3, r4
 8004632:	602b      	str	r3, [r5, #0]
}
 8004634:	b005      	add	sp, #20
 8004636:	bd30      	pop	{r4, r5, pc}

08004638 <crypto_sign_verify>:
int crypto_sign_verify(const uint8_t *sig,
                       size_t siglen,
                       const uint8_t *m,
                       size_t mlen,
                       const uint8_t *pk)
{
 8004638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800463c:	f5ad 4d08 	sub.w	sp, sp, #34816	@ 0x8800
 8004640:	b09c      	sub	sp, #112	@ 0x70
 8004642:	f50d 4408 	add.w	r4, sp, #34816	@ 0x8800
 8004646:	3488      	adds	r4, #136	@ 0x88
 8004648:	6827      	ldr	r7, [r4, #0]
 800464a:	4604      	mov	r4, r0
  poly cp;
  polyvecl mat[K], z;
  polyveck t1, w1, h;
  shake256incctx state;

  if(siglen != CRYPTO_BYTES)
 800464c:	f640 1074 	movw	r0, #2420	@ 0x974
 8004650:	4281      	cmp	r1, r0
 8004652:	f040 80b2 	bne.w	80047ba <crypto_sign_verify+0x182>
    return -1;

  unpack_pk(rho, &t1, pk);
 8004656:	f50d 51c3 	add.w	r1, sp, #6240	@ 0x1860
 800465a:	3110      	adds	r1, #16
 800465c:	4668      	mov	r0, sp
 800465e:	4690      	mov	r8, r2
 8004660:	463a      	mov	r2, r7
 8004662:	461e      	mov	r6, r3
 8004664:	f7fe fb6e 	bl	8002d44 <pqcrystals_dilithium_unpack_pk>
  if(unpack_sig(c, &z, &h, sig))
 8004668:	f50d 5261 	add.w	r2, sp, #14400	@ 0x3840
 800466c:	4623      	mov	r3, r4
 800466e:	3230      	adds	r2, #48	@ 0x30
 8004670:	f50d 6107 	add.w	r1, sp, #2160	@ 0x870
 8004674:	a808      	add	r0, sp, #32
 8004676:	f7fe fd0b 	bl	8003090 <pqcrystals_dilithium_unpack_sig>
 800467a:	2800      	cmp	r0, #0
 800467c:	f040 809d 	bne.w	80047ba <crypto_sign_verify+0x182>
    return -1;
  if(polyvecl_chknorm(&z, GAMMA1 - BETA))
 8004680:	4952      	ldr	r1, [pc, #328]	@ (80047cc <crypto_sign_verify+0x194>)
 8004682:	f50d 6007 	add.w	r0, sp, #2160	@ 0x870
 8004686:	f7ff fae9 	bl	8003c5c <pqcrystals_dilithium_polyvecl_chknorm>
 800468a:	4605      	mov	r5, r0
 800468c:	2800      	cmp	r0, #0
 800468e:	f040 8094 	bne.w	80047ba <crypto_sign_verify+0x182>
    return -1;

  /* Compute CRH(h(rho, t1), msg) */
  shake256(mu, SEEDBYTES, pk, CRYPTO_PUBLICKEYBYTES);
 8004692:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8004696:	463a      	mov	r2, r7
 8004698:	2120      	movs	r1, #32
 800469a:	a818      	add	r0, sp, #96	@ 0x60
 800469c:	f7fc ff42 	bl	8001524 <shake256>
  shake256_inc_init(&state);
 80046a0:	a828      	add	r0, sp, #160	@ 0xa0
 80046a2:	f7fc fe85 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, SEEDBYTES);
 80046a6:	2220      	movs	r2, #32
 80046a8:	a918      	add	r1, sp, #96	@ 0x60
 80046aa:	a828      	add	r0, sp, #160	@ 0xa0
 80046ac:	f7fc fe8c 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(&state, m, mlen);
 80046b0:	4632      	mov	r2, r6
 80046b2:	4641      	mov	r1, r8
 80046b4:	a828      	add	r0, sp, #160	@ 0xa0
 80046b6:	f7fc fe87 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
 80046ba:	a828      	add	r0, sp, #160	@ 0xa0
 80046bc:	f7fc fec0 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeeze(mu, CRHBYTES, &state);
 80046c0:	aa28      	add	r2, sp, #160	@ 0xa0
 80046c2:	2140      	movs	r1, #64	@ 0x40
 80046c4:	a818      	add	r0, sp, #96	@ 0x60
 80046c6:	f7fc fee7 	bl	8001498 <shake256_inc_squeeze>

  /* Matrix-vector multiplication; compute Az - c2^dt1 */
  poly_challenge(&cp, c);
 80046ca:	a908      	add	r1, sp, #32
 80046cc:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 80046d0:	f7fe fece 	bl	8003470 <pqcrystals_dilithium_poly_challenge>
  polyvec_matrix_expand(mat, rho);
 80046d4:	f50d 4090 	add.w	r0, sp, #18432	@ 0x4800
 80046d8:	4669      	mov	r1, sp
 80046da:	3070      	adds	r0, #112	@ 0x70
 80046dc:	f7ff f9ce 	bl	8003a7c <pqcrystals_dilithium_polyvec_matrix_expand>

  polyvecl_ntt(&z);
 80046e0:	f50d 6007 	add.w	r0, sp, #2160	@ 0x870
 80046e4:	f7ff fa64 	bl	8003bb0 <pqcrystals_dilithium_polyvecl_ntt>
  polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 80046e8:	f50d 4190 	add.w	r1, sp, #18432	@ 0x4800
 80046ec:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 80046f0:	f50d 6207 	add.w	r2, sp, #2160	@ 0x870
 80046f4:	3170      	adds	r1, #112	@ 0x70
 80046f6:	3030      	adds	r0, #48	@ 0x30
 80046f8:	f7ff f9de 	bl	8003ab8 <pqcrystals_dilithium_polyvec_matrix_pointwise_montgomery>

  poly_ntt(&cp);
 80046fc:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8004700:	f7fe fd76 	bl	80031f0 <pqcrystals_dilithium_poly_ntt>
  polyveck_shiftl(&t1);
 8004704:	f50d 50c3 	add.w	r0, sp, #6240	@ 0x1860
 8004708:	3010      	adds	r0, #16
 800470a:	f7ff fb0f 	bl	8003d2c <pqcrystals_dilithium_polyveck_shiftl>
  polyveck_ntt(&t1);
 800470e:	f50d 50c3 	add.w	r0, sp, #6240	@ 0x1860
 8004712:	3010      	adds	r0, #16
 8004714:	f7ff fb1c 	bl	8003d50 <pqcrystals_dilithium_polyveck_ntt>
  polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 8004718:	f50d 52c3 	add.w	r2, sp, #6240	@ 0x1860
 800471c:	3210      	adds	r2, #16
 800471e:	4610      	mov	r0, r2
 8004720:	f50d 618e 	add.w	r1, sp, #1136	@ 0x470
 8004724:	f7ff fb38 	bl	8003d98 <pqcrystals_dilithium_polyveck_pointwise_poly_montgomery>

  polyveck_sub(&w1, &w1, &t1);
 8004728:	f50d 5121 	add.w	r1, sp, #10304	@ 0x2840
 800472c:	3130      	adds	r1, #48	@ 0x30
 800472e:	f50d 52c3 	add.w	r2, sp, #6240	@ 0x1860
 8004732:	4608      	mov	r0, r1
 8004734:	3210      	adds	r2, #16
 8004736:	f7ff fae9 	bl	8003d0c <pqcrystals_dilithium_polyveck_sub>
  polyveck_reduce(&w1);
 800473a:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 800473e:	3030      	adds	r0, #48	@ 0x30
 8004740:	f7ff fab0 	bl	8003ca4 <pqcrystals_dilithium_polyveck_reduce>
  polyveck_invntt_tomont(&w1);
 8004744:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 8004748:	3030      	adds	r0, #48	@ 0x30
 800474a:	f7ff fb13 	bl	8003d74 <pqcrystals_dilithium_polyveck_invntt_tomont>

  /* Reconstruct w1 */
  polyveck_caddq(&w1);
 800474e:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 8004752:	3030      	adds	r0, #48	@ 0x30
 8004754:	f7ff fab8 	bl	8003cc8 <pqcrystals_dilithium_polyveck_caddq>
  polyveck_use_hint(&w1, &w1, &h);
 8004758:	f50d 5121 	add.w	r1, sp, #10304	@ 0x2840
 800475c:	3130      	adds	r1, #48	@ 0x30
 800475e:	f50d 5261 	add.w	r2, sp, #14400	@ 0x3840
 8004762:	3230      	adds	r2, #48	@ 0x30
 8004764:	4608      	mov	r0, r1
 8004766:	f7ff fb6f 	bl	8003e48 <pqcrystals_dilithium_polyveck_use_hint>
  polyveck_pack_w1(buf, &w1);
 800476a:	f50d 5121 	add.w	r1, sp, #10304	@ 0x2840
 800476e:	3130      	adds	r1, #48	@ 0x30
 8004770:	a85c      	add	r0, sp, #368	@ 0x170
 8004772:	f7ff fb79 	bl	8003e68 <pqcrystals_dilithium_polyveck_pack_w1>

  /* Call random oracle and verify challenge */
  shake256_inc_init(&state);
 8004776:	a828      	add	r0, sp, #160	@ 0xa0
 8004778:	f7fc fe1a 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(&state, mu, CRHBYTES);
 800477c:	a918      	add	r1, sp, #96	@ 0x60
 800477e:	2240      	movs	r2, #64	@ 0x40
 8004780:	a828      	add	r0, sp, #160	@ 0xa0
 8004782:	f7fc fe21 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(&state, buf, K*POLYW1_PACKEDBYTES);
 8004786:	a95c      	add	r1, sp, #368	@ 0x170
 8004788:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800478c:	a828      	add	r0, sp, #160	@ 0xa0
 800478e:	f7fc fe1b 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(&state);
  shake256_inc_squeeze(c2, SEEDBYTES, &state);
 8004792:	ac10      	add	r4, sp, #64	@ 0x40
  shake256_inc_finalize(&state);
 8004794:	a828      	add	r0, sp, #160	@ 0xa0
 8004796:	f7fc fe53 	bl	8001440 <shake256_inc_finalize>
  shake256_inc_squeeze(c2, SEEDBYTES, &state);
 800479a:	aa28      	add	r2, sp, #160	@ 0xa0
 800479c:	2120      	movs	r1, #32
 800479e:	4620      	mov	r0, r4
 80047a0:	f7fc fe7a 	bl	8001498 <shake256_inc_squeeze>
  for(i = 0; i < SEEDBYTES; ++i)
 80047a4:	ab08      	add	r3, sp, #32
 80047a6:	4622      	mov	r2, r4
 80047a8:	e001      	b.n	80047ae <crypto_sign_verify+0x176>
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	d007      	beq.n	80047be <crypto_sign_verify+0x186>
    if(c[i] != c2[i])
 80047ae:	f813 cb01 	ldrb.w	ip, [r3], #1
 80047b2:	f812 1b01 	ldrb.w	r1, [r2], #1
 80047b6:	458c      	cmp	ip, r1
 80047b8:	d0f7      	beq.n	80047aa <crypto_sign_verify+0x172>
    return -1;
 80047ba:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
      return -1;

  return 0;
}
 80047be:	4628      	mov	r0, r5
 80047c0:	f50d 4d08 	add.w	sp, sp, #34816	@ 0x8800
 80047c4:	b01c      	add	sp, #112	@ 0x70
 80047c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047ca:	bf00      	nop
 80047cc:	0001ffb2 	.word	0x0001ffb2

080047d0 <crypto_sign_open>:
int crypto_sign_open(uint8_t *m,
                     size_t *mlen,
                     const uint8_t *sm,
                     size_t smlen,
                     const uint8_t *pk)
{
 80047d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047d2:	461c      	mov	r4, r3
  size_t i;

  if(smlen < CRYPTO_BYTES)
 80047d4:	f640 1373 	movw	r3, #2419	@ 0x973
 80047d8:	429c      	cmp	r4, r3
{
 80047da:	b083      	sub	sp, #12
 80047dc:	4607      	mov	r7, r0
 80047de:	460d      	mov	r5, r1
  if(smlen < CRYPTO_BYTES)
 80047e0:	d80c      	bhi.n	80047fc <crypto_sign_open+0x2c>
    return 0;
  }

badsig:
  /* Signature verification failed */
  *mlen = -1;
 80047e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80047e6:	600b      	str	r3, [r1, #0]
  for(i = 0; i < smlen; ++i)
 80047e8:	b124      	cbz	r4, 80047f4 <crypto_sign_open+0x24>
    m[i] = 0;
 80047ea:	4622      	mov	r2, r4
 80047ec:	2100      	movs	r1, #0
 80047ee:	4638      	mov	r0, r7
 80047f0:	f001 f882 	bl	80058f8 <memset>

  return -1;
 80047f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
}
 80047f8:	b003      	add	sp, #12
 80047fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *mlen = smlen - CRYPTO_BYTES;
 80047fc:	4616      	mov	r6, r2
 80047fe:	f6a4 1374 	subw	r3, r4, #2420	@ 0x974
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 8004802:	9a08      	ldr	r2, [sp, #32]
  *mlen = smlen - CRYPTO_BYTES;
 8004804:	600b      	str	r3, [r1, #0]
  if(crypto_sign_verify(sm, CRYPTO_BYTES, sm + CRYPTO_BYTES, *mlen, pk))
 8004806:	4630      	mov	r0, r6
 8004808:	9200      	str	r2, [sp, #0]
 800480a:	f640 1174 	movw	r1, #2420	@ 0x974
 800480e:	f606 1274 	addw	r2, r6, #2420	@ 0x974
 8004812:	f7ff ff11 	bl	8004638 <crypto_sign_verify>
 8004816:	b990      	cbnz	r0, 800483e <crypto_sign_open+0x6e>
    for(i = 0; i < *mlen; ++i)
 8004818:	682b      	ldr	r3, [r5, #0]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0ec      	beq.n	80047f8 <crypto_sign_open+0x28>
 800481e:	f606 1c73 	addw	ip, r6, #2419	@ 0x973
 8004822:	1e7c      	subs	r4, r7, #1
      m[i] = sm[CRYPTO_BYTES + i];
 8004824:	4663      	mov	r3, ip
 8004826:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 800482a:	f804 2f01 	strb.w	r2, [r4, #1]!
    for(i = 0; i < *mlen; ++i)
 800482e:	f6a3 1372 	subw	r3, r3, #2418	@ 0x972
 8004832:	682a      	ldr	r2, [r5, #0]
 8004834:	1b9b      	subs	r3, r3, r6
 8004836:	429a      	cmp	r2, r3
 8004838:	d8f4      	bhi.n	8004824 <crypto_sign_open+0x54>
}
 800483a:	b003      	add	sp, #12
 800483c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  *mlen = -1;
 800483e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004842:	602b      	str	r3, [r5, #0]
  for(i = 0; i < smlen; ++i)
 8004844:	e7d1      	b.n	80047ea <crypto_sign_open+0x1a>
 8004846:	bf00      	nop

08004848 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004848:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800484a:	4b0c      	ldr	r3, [pc, #48]	@ (800487c <HAL_MspInit+0x34>)
 800484c:	2100      	movs	r1, #0
 800484e:	9100      	str	r1, [sp, #0]
 8004850:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004852:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004856:	645a      	str	r2, [r3, #68]	@ 0x44
 8004858:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800485a:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 800485e:	9200      	str	r2, [sp, #0]
 8004860:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004862:	9101      	str	r1, [sp, #4]
 8004864:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004866:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40
 800486c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800486e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004872:	9301      	str	r3, [sp, #4]
 8004874:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004876:	b002      	add	sp, #8
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	40023800 	.word	0x40023800

08004880 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004880:	e7fe      	b.n	8004880 <NMI_Handler>
 8004882:	bf00      	nop

08004884 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004884:	e7fe      	b.n	8004884 <HardFault_Handler>
 8004886:	bf00      	nop

08004888 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004888:	e7fe      	b.n	8004888 <MemManage_Handler>
 800488a:	bf00      	nop

0800488c <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800488c:	e7fe      	b.n	800488c <BusFault_Handler>
 800488e:	bf00      	nop

08004890 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	e7fe      	b.n	8004890 <UsageFault_Handler>
 8004892:	bf00      	nop

08004894 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop

0800489c <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop

080048a0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a0:	f000 b8fa 	b.w	8004a98 <HAL_IncTick>

080048a4 <pqcrystals_dilithium_dilithium_shake128_stream_init>:
#include "params.h"
#include "symmetric.h"
#include "fips202.h"

void dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce)
{
 80048a4:	b530      	push	{r4, r5, lr}
 80048a6:	b083      	sub	sp, #12
 80048a8:	4604      	mov	r4, r0
 80048aa:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 80048ac:	f8ad 2004 	strh.w	r2, [sp, #4]
  t[1] = nonce >> 8;

  shake128_inc_init(state);
 80048b0:	f7fc fcc4 	bl	800123c <shake128_inc_init>
  shake128_inc_absorb(state, seed, SEEDBYTES);
 80048b4:	4629      	mov	r1, r5
 80048b6:	4620      	mov	r0, r4
 80048b8:	2220      	movs	r2, #32
 80048ba:	f7fc fccb 	bl	8001254 <shake128_inc_absorb>
  shake128_inc_absorb(state, t, 2);
 80048be:	2202      	movs	r2, #2
 80048c0:	a901      	add	r1, sp, #4
 80048c2:	4620      	mov	r0, r4
 80048c4:	f7fc fcc6 	bl	8001254 <shake128_inc_absorb>
  shake128_inc_finalize(state);
 80048c8:	4620      	mov	r0, r4
 80048ca:	f7fc fcff 	bl	80012cc <shake128_inc_finalize>
}
 80048ce:	b003      	add	sp, #12
 80048d0:	bd30      	pop	{r4, r5, pc}
 80048d2:	bf00      	nop

080048d4 <pqcrystals_dilithium_dilithium_shake256_stream_init>:

void dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce)
{
 80048d4:	b530      	push	{r4, r5, lr}
 80048d6:	b083      	sub	sp, #12
 80048d8:	4604      	mov	r4, r0
 80048da:	460d      	mov	r5, r1
  uint8_t t[2];
  t[0] = nonce;
 80048dc:	f8ad 2004 	strh.w	r2, [sp, #4]
  t[1] = nonce >> 8;

  shake256_inc_init(state);
 80048e0:	f7fc fd66 	bl	80013b0 <shake256_inc_init>
  shake256_inc_absorb(state, seed, CRHBYTES);
 80048e4:	4629      	mov	r1, r5
 80048e6:	4620      	mov	r0, r4
 80048e8:	2240      	movs	r2, #64	@ 0x40
 80048ea:	f7fc fd6d 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_absorb(state, t, 2);
 80048ee:	2202      	movs	r2, #2
 80048f0:	a901      	add	r1, sp, #4
 80048f2:	4620      	mov	r0, r4
 80048f4:	f7fc fd68 	bl	80013c8 <shake256_inc_absorb>
  shake256_inc_finalize(state);
 80048f8:	4620      	mov	r0, r4
 80048fa:	f7fc fda1 	bl	8001440 <shake256_inc_finalize>
}
 80048fe:	b003      	add	sp, #12
 8004900:	bd30      	pop	{r4, r5, pc}
 8004902:	bf00      	nop

08004904 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004904:	4a03      	ldr	r2, [pc, #12]	@ (8004914 <SystemInit+0x10>)
 8004906:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 800490a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800490e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004912:	4770      	bx	lr
 8004914:	e000ed00 	.word	0xe000ed00

08004918 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004918:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800491a:	480b      	ldr	r0, [pc, #44]	@ (8004948 <MX_USART2_UART_Init+0x30>)
 800491c:	4c0b      	ldr	r4, [pc, #44]	@ (800494c <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 256000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800491e:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 256000;
 8004920:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004924:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 256000;
 8004926:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800492a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800492e:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004932:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004936:	f000 fdeb 	bl	8005510 <HAL_UART_Init>
 800493a:	b900      	cbnz	r0, 800493e <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800493c:	bd10      	pop	{r4, pc}
 800493e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8004942:	f7fe b9cb 	b.w	8002cdc <Error_Handler>
 8004946:	bf00      	nop
 8004948:	200024c8 	.word	0x200024c8
 800494c:	40004400 	.word	0x40004400

08004950 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004950:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8004952:	4a1b      	ldr	r2, [pc, #108]	@ (80049c0 <HAL_UART_MspInit+0x70>)
 8004954:	6801      	ldr	r1, [r0, #0]
{
 8004956:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004958:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 800495a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800495c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004960:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004964:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==USART2)
 8004966:	d001      	beq.n	800496c <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004968:	b008      	add	sp, #32
 800496a:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 800496c:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8004974:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8004978:	6410      	str	r0, [r2, #64]	@ 0x40
 800497a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 800497c:	f400 3000 	and.w	r0, r0, #131072	@ 0x20000
 8004980:	9000      	str	r0, [sp, #0]
 8004982:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004984:	9301      	str	r3, [sp, #4]
 8004986:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004988:	480e      	ldr	r0, [pc, #56]	@ (80049c4 <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800498a:	f043 0301 	orr.w	r3, r3, #1
 800498e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004990:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004992:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 80049b8 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004996:	f003 0301 	and.w	r3, r3, #1
 800499a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800499c:	2203      	movs	r2, #3
 800499e:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049a0:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80049a2:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80049aa:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80049ac:	f000 f8ee 	bl	8004b8c <HAL_GPIO_Init>
}
 80049b0:	b008      	add	sp, #32
 80049b2:	bd10      	pop	{r4, pc}
 80049b4:	f3af 8000 	nop.w
 80049b8:	0000000c 	.word	0x0000000c
 80049bc:	00000002 	.word	0x00000002
 80049c0:	40004400 	.word	0x40004400
 80049c4:	40020000 	.word	0x40020000

080049c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80049c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004a00 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80049cc:	f7ff ff9a 	bl	8004904 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80049d0:	480c      	ldr	r0, [pc, #48]	@ (8004a04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80049d2:	490d      	ldr	r1, [pc, #52]	@ (8004a08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80049d4:	4a0d      	ldr	r2, [pc, #52]	@ (8004a0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80049d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049d8:	e002      	b.n	80049e0 <LoopCopyDataInit>

080049da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049de:	3304      	adds	r3, #4

080049e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80049e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80049e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80049e4:	d3f9      	bcc.n	80049da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80049e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004a10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80049e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004a14 <LoopFillZerobss+0x22>)
  movs r3, #0
 80049ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80049ec:	e001      	b.n	80049f2 <LoopFillZerobss>

080049ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80049ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80049f0:	3204      	adds	r2, #4

080049f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80049f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80049f4:	d3fb      	bcc.n	80049ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80049f6:	f000 ff87 	bl	8005908 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80049fa:	f7fe f8bb 	bl	8002b74 <main>
  bx  lr    
 80049fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004a00:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004a04:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a08:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8004a0c:	08005ed4 	.word	0x08005ed4
  ldr r2, =_sbss
 8004a10:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8004a14:	20002514 	.word	0x20002514

08004a18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004a18:	e7fe      	b.n	8004a18 <ADC_IRQHandler>
	...

08004a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a1c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a1e:	4a0e      	ldr	r2, [pc, #56]	@ (8004a58 <HAL_InitTick+0x3c>)
 8004a20:	4b0e      	ldr	r3, [pc, #56]	@ (8004a5c <HAL_InitTick+0x40>)
 8004a22:	7812      	ldrb	r2, [r2, #0]
{
 8004a24:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a26:	6818      	ldr	r0, [r3, #0]
 8004a28:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a2c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a30:	fbb0 f0f3 	udiv	r0, r0, r3
 8004a34:	f000 f890 	bl	8004b58 <HAL_SYSTICK_Config>
 8004a38:	b908      	cbnz	r0, 8004a3e <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a3a:	2d0f      	cmp	r5, #15
 8004a3c:	d901      	bls.n	8004a42 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004a3e:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a44:	4602      	mov	r2, r0
 8004a46:	4629      	mov	r1, r5
 8004a48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a4c:	f000 f848 	bl	8004ae0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004a50:	4b03      	ldr	r3, [pc, #12]	@ (8004a60 <HAL_InitTick+0x44>)
 8004a52:	4620      	mov	r0, r4
 8004a54:	601d      	str	r5, [r3, #0]
}
 8004a56:	bd38      	pop	{r3, r4, r5, pc}
 8004a58:	20000010 	.word	0x20000010
 8004a5c:	2000000c 	.word	0x2000000c
 8004a60:	20000014 	.word	0x20000014

08004a64 <HAL_Init>:
{
 8004a64:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a66:	4b0b      	ldr	r3, [pc, #44]	@ (8004a94 <HAL_Init+0x30>)
 8004a68:	681a      	ldr	r2, [r3, #0]
 8004a6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004a6e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004a76:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a78:	681a      	ldr	r2, [r3, #0]
 8004a7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a7e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a80:	2003      	movs	r0, #3
 8004a82:	f000 f81b 	bl	8004abc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a86:	200f      	movs	r0, #15
 8004a88:	f7ff ffc8 	bl	8004a1c <HAL_InitTick>
  HAL_MspInit();
 8004a8c:	f7ff fedc 	bl	8004848 <HAL_MspInit>
}
 8004a90:	2000      	movs	r0, #0
 8004a92:	bd08      	pop	{r3, pc}
 8004a94:	40023c00 	.word	0x40023c00

08004a98 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004a98:	4a03      	ldr	r2, [pc, #12]	@ (8004aa8 <HAL_IncTick+0x10>)
 8004a9a:	4b04      	ldr	r3, [pc, #16]	@ (8004aac <HAL_IncTick+0x14>)
 8004a9c:	6811      	ldr	r1, [r2, #0]
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	440b      	add	r3, r1
 8004aa2:	6013      	str	r3, [r2, #0]
}
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	20002510 	.word	0x20002510
 8004aac:	20000010 	.word	0x20000010

08004ab0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004ab0:	4b01      	ldr	r3, [pc, #4]	@ (8004ab8 <HAL_GetTick+0x8>)
 8004ab2:	6818      	ldr	r0, [r3, #0]
}
 8004ab4:	4770      	bx	lr
 8004ab6:	bf00      	nop
 8004ab8:	20002510 	.word	0x20002510

08004abc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004abc:	4907      	ldr	r1, [pc, #28]	@ (8004adc <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004abe:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac0:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ac2:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004ac6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004aca:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004acc:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004ace:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004ad2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8004ad6:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	e000ed00 	.word	0xe000ed00

08004ae0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ae0:	4b1b      	ldr	r3, [pc, #108]	@ (8004b50 <HAL_NVIC_SetPriority+0x70>)
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ae8:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004aea:	f1c3 0e07 	rsb	lr, r3, #7
 8004aee:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004af2:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004af6:	bf28      	it	cs
 8004af8:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004afc:	f1bc 0f06 	cmp.w	ip, #6
 8004b00:	d91c      	bls.n	8004b3c <HAL_NVIC_SetPriority+0x5c>
 8004b02:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b0a:	fa03 f30c 	lsl.w	r3, r3, ip
 8004b0e:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b12:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b16:	fa03 f30e 	lsl.w	r3, r3, lr
 8004b1a:	ea21 0303 	bic.w	r3, r1, r3
 8004b1e:	fa03 f30c 	lsl.w	r3, r3, ip
 8004b22:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b24:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 8004b26:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b28:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004b2a:	db0a      	blt.n	8004b42 <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b2c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004b30:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8004b34:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004b38:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b3c:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b3e:	4694      	mov	ip, r2
 8004b40:	e7e7      	b.n	8004b12 <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b42:	4a04      	ldr	r2, [pc, #16]	@ (8004b54 <HAL_NVIC_SetPriority+0x74>)
 8004b44:	f000 000f 	and.w	r0, r0, #15
 8004b48:	4402      	add	r2, r0
 8004b4a:	7613      	strb	r3, [r2, #24]
 8004b4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b50:	e000ed00 	.word	0xe000ed00
 8004b54:	e000ecfc 	.word	0xe000ecfc

08004b58 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004b58:	3801      	subs	r0, #1
 8004b5a:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004b5e:	d301      	bcc.n	8004b64 <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004b60:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004b62:	4770      	bx	lr
{
 8004b64:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b66:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6a:	4c07      	ldr	r4, [pc, #28]	@ (8004b88 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004b6c:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b6e:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 8004b72:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b76:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b78:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004b7a:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004b7c:	619a      	str	r2, [r3, #24]
}
 8004b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004b82:	6119      	str	r1, [r3, #16]
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b90:	4aa4      	ldr	r2, [pc, #656]	@ (8004e24 <HAL_GPIO_Init+0x298>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004b92:	680b      	ldr	r3, [r1, #0]
 8004b94:	4290      	cmp	r0, r2
{
 8004b96:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f000 80d4 	beq.w	8004d48 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004ba0:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 8004e34 <HAL_GPIO_Init+0x2a8>
    ioposition = 0x01U << position;
 8004ba4:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ba8:	468a      	mov	sl, r1
 8004baa:	e003      	b.n	8004bb4 <HAL_GPIO_Init+0x28>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004bac:	3201      	adds	r2, #1
 8004bae:	2a10      	cmp	r2, #16
 8004bb0:	f000 809e 	beq.w	8004cf0 <HAL_GPIO_Init+0x164>
    ioposition = 0x01U << position;
 8004bb4:	fa0b f102 	lsl.w	r1, fp, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004bb8:	ea01 0603 	and.w	r6, r1, r3
    if(iocurrent == ioposition)
 8004bbc:	4399      	bics	r1, r3
 8004bbe:	d1f5      	bne.n	8004bac <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bc0:	f8da 4004 	ldr.w	r4, [sl, #4]
 8004bc4:	f004 0c03 	and.w	ip, r4, #3
 8004bc8:	0051      	lsls	r1, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bca:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bcc:	f10c 37ff 	add.w	r7, ip, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bd0:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bd2:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004bd4:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004bd8:	d950      	bls.n	8004c7c <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004bda:	f1bc 0f03 	cmp.w	ip, #3
 8004bde:	f040 81a5 	bne.w	8004f2c <HAL_GPIO_Init+0x3a0>
      temp = GPIOx->MODER;
 8004be2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004be4:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004be8:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004bea:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bec:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004bf0:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004bf2:	d0db      	beq.n	8004bac <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bf4:	4d8c      	ldr	r5, [pc, #560]	@ (8004e28 <HAL_GPIO_Init+0x29c>)
 8004bf6:	2100      	movs	r1, #0
 8004bf8:	9103      	str	r1, [sp, #12]
 8004bfa:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8004bfc:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 8004c00:	6469      	str	r1, [r5, #68]	@ 0x44
 8004c02:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 8004c04:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 8004c08:	9103      	str	r1, [sp, #12]
 8004c0a:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c0c:	f022 0103 	bic.w	r1, r2, #3
 8004c10:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 8004c14:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c18:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c1c:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c1e:	00bf      	lsls	r7, r7, #2
 8004c20:	f04f 0c0f 	mov.w	ip, #15
 8004c24:	fa0c fc07 	lsl.w	ip, ip, r7
 8004c28:	ea25 0e0c 	bic.w	lr, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c2c:	4d7f      	ldr	r5, [pc, #508]	@ (8004e2c <HAL_GPIO_Init+0x2a0>)
 8004c2e:	42a8      	cmp	r0, r5
 8004c30:	d061      	beq.n	8004cf6 <HAL_GPIO_Init+0x16a>
 8004c32:	4d7f      	ldr	r5, [pc, #508]	@ (8004e30 <HAL_GPIO_Init+0x2a4>)
 8004c34:	42a8      	cmp	r0, r5
 8004c36:	f000 8156 	beq.w	8004ee6 <HAL_GPIO_Init+0x35a>
 8004c3a:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 8004e38 <HAL_GPIO_Init+0x2ac>
 8004c3e:	4560      	cmp	r0, ip
 8004c40:	f000 8158 	beq.w	8004ef4 <HAL_GPIO_Init+0x368>
 8004c44:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 8004e3c <HAL_GPIO_Init+0x2b0>
 8004c48:	4560      	cmp	r0, ip
 8004c4a:	f000 8161 	beq.w	8004f10 <HAL_GPIO_Init+0x384>
 8004c4e:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 8004e40 <HAL_GPIO_Init+0x2b4>
 8004c52:	4560      	cmp	r0, ip
 8004c54:	f000 8163 	beq.w	8004f1e <HAL_GPIO_Init+0x392>
 8004c58:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 8004e44 <HAL_GPIO_Init+0x2b8>
 8004c5c:	4560      	cmp	r0, ip
 8004c5e:	f000 8150 	beq.w	8004f02 <HAL_GPIO_Init+0x376>
 8004c62:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8004e48 <HAL_GPIO_Init+0x2bc>
 8004c66:	4560      	cmp	r0, ip
 8004c68:	bf0c      	ite	eq
 8004c6a:	f04f 0c07 	moveq.w	ip, #7
 8004c6e:	f04f 0c08 	movne.w	ip, #8
 8004c72:	fa0c f707 	lsl.w	r7, ip, r7
 8004c76:	ea4e 0507 	orr.w	r5, lr, r7
 8004c7a:	e042      	b.n	8004d02 <HAL_GPIO_Init+0x176>
        temp = GPIOx->OSPEEDR; 
 8004c7c:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c7e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004c82:	f8da 700c 	ldr.w	r7, [sl, #12]
 8004c86:	408f      	lsls	r7, r1
 8004c88:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004c8c:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004c8e:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004c90:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004c94:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004c98:	4097      	lsls	r7, r2
 8004c9a:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004c9e:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004ca0:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ca2:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004ca6:	f8da 7008 	ldr.w	r7, [sl, #8]
 8004caa:	408f      	lsls	r7, r1
 8004cac:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb0:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 8004cb4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004cb6:	d194      	bne.n	8004be2 <HAL_GPIO_Init+0x56>
        temp = GPIOx->AFR[position >> 3U];
 8004cb8:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8004cbc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cc0:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8004cc4:	f8d9 7020 	ldr.w	r7, [r9, #32]
 8004cc8:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cca:	f8da 7010 	ldr.w	r7, [sl, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cce:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004cd2:	fa07 f70e 	lsl.w	r7, r7, lr
 8004cd6:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004cd8:	270f      	movs	r7, #15
 8004cda:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004cde:	9f00      	ldr	r7, [sp, #0]
 8004ce0:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ce4:	9f01      	ldr	r7, [sp, #4]
 8004ce6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004cea:	f8c9 7020 	str.w	r7, [r9, #32]
 8004cee:	e778      	b.n	8004be2 <HAL_GPIO_Init+0x56>
        }
        EXTI->IMR = temp;
      }
    }
  }
}
 8004cf0:	b005      	add	sp, #20
 8004cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004cf6:	f04f 0c01 	mov.w	ip, #1
 8004cfa:	fa0c f707 	lsl.w	r7, ip, r7
 8004cfe:	ea4e 0507 	orr.w	r5, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d02:	608d      	str	r5, [r1, #8]
        temp = EXTI->RTSR;
 8004d04:	f8d8 1008 	ldr.w	r1, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 8004d08:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d0a:	02e7      	lsls	r7, r4, #11
        temp &= ~((uint32_t)iocurrent);
 8004d0c:	bf54      	ite	pl
 8004d0e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004d10:	4331      	orrmi	r1, r6
        EXTI->RTSR = temp;
 8004d12:	f8c8 1008 	str.w	r1, [r8, #8]
        temp = EXTI->FTSR;
 8004d16:	f8d8 100c 	ldr.w	r1, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d1a:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8004d1c:	bf54      	ite	pl
 8004d1e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004d20:	4331      	orrmi	r1, r6
        EXTI->FTSR = temp;
 8004d22:	f8c8 100c 	str.w	r1, [r8, #12]
        temp = EXTI->EMR;
 8004d26:	f8d8 1004 	ldr.w	r1, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d2a:	03a7      	lsls	r7, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8004d2c:	bf54      	ite	pl
 8004d2e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004d30:	4331      	orrmi	r1, r6
        EXTI->EMR = temp;
 8004d32:	f8c8 1004 	str.w	r1, [r8, #4]
        temp = EXTI->IMR;
 8004d36:	f8d8 1000 	ldr.w	r1, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d3a:	03e4      	lsls	r4, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8004d3c:	bf54      	ite	pl
 8004d3e:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004d40:	4331      	orrmi	r1, r6
        EXTI->IMR = temp;
 8004d42:	f8c8 1000 	str.w	r1, [r8]
 8004d46:	e731      	b.n	8004bac <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d48:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8004e28 <HAL_GPIO_Init+0x29c>
    ioposition = 0x01U << position;
 8004d4c:	f04f 0a01 	mov.w	sl, #1
 8004d50:	e002      	b.n	8004d58 <HAL_GPIO_Init+0x1cc>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d52:	3201      	adds	r2, #1
 8004d54:	2a10      	cmp	r2, #16
 8004d56:	d0cb      	beq.n	8004cf0 <HAL_GPIO_Init+0x164>
    ioposition = 0x01U << position;
 8004d58:	fa0a f402 	lsl.w	r4, sl, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d5c:	ea03 0604 	and.w	r6, r3, r4
    if(iocurrent == ioposition)
 8004d60:	439c      	bics	r4, r3
 8004d62:	d1f6      	bne.n	8004d52 <HAL_GPIO_Init+0x1c6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d64:	684d      	ldr	r5, [r1, #4]
 8004d66:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d68:	2703      	movs	r7, #3
 8004d6a:	fa07 fc04 	lsl.w	ip, r7, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d6e:	f005 0803 	and.w	r8, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d72:	ea6f 090c 	mvn.w	r9, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d76:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8004d7a:	f1bc 0f01 	cmp.w	ip, #1
 8004d7e:	d965      	bls.n	8004e4c <HAL_GPIO_Init+0x2c0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004d80:	f1b8 0f03 	cmp.w	r8, #3
 8004d84:	f040 80dc 	bne.w	8004f40 <HAL_GPIO_Init+0x3b4>
      temp = GPIOx->MODER;
 8004d88:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d8c:	fa08 f404 	lsl.w	r4, r8, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004d90:	ea0c 0c09 	and.w	ip, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004d94:	ea44 040c 	orr.w	r4, r4, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d98:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004d9c:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004d9e:	d0d8      	beq.n	8004d52 <HAL_GPIO_Init+0x1c6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004da0:	2400      	movs	r4, #0
 8004da2:	9403      	str	r4, [sp, #12]
 8004da4:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 8004da8:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004dac:	f8cb 4044 	str.w	r4, [fp, #68]	@ 0x44
 8004db0:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 8004db4:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004db8:	9403      	str	r4, [sp, #12]
 8004dba:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004dbc:	f022 0403 	bic.w	r4, r2, #3
 8004dc0:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 8004dc4:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dc8:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004dcc:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004dd0:	270f      	movs	r7, #15
 8004dd2:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004dd6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8004dda:	ea2e 0c0c 	bic.w	ip, lr, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004dde:	f8c4 c008 	str.w	ip, [r4, #8]
        temp = EXTI->RTSR;
 8004de2:	4c14      	ldr	r4, [pc, #80]	@ (8004e34 <HAL_GPIO_Init+0x2a8>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004de4:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR;
 8004de6:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 8004de8:	ea6f 0c06 	mvn.w	ip, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004dec:	d479      	bmi.n	8004ee2 <HAL_GPIO_Init+0x356>
        temp &= ~((uint32_t)iocurrent);
 8004dee:	ea04 040c 	and.w	r4, r4, ip
        EXTI->RTSR = temp;
 8004df2:	4f10      	ldr	r7, [pc, #64]	@ (8004e34 <HAL_GPIO_Init+0x2a8>)
 8004df4:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 8004df6:	68fc      	ldr	r4, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004df8:	02af      	lsls	r7, r5, #10
 8004dfa:	d470      	bmi.n	8004ede <HAL_GPIO_Init+0x352>
        temp &= ~((uint32_t)iocurrent);
 8004dfc:	ea04 040c 	and.w	r4, r4, ip
        EXTI->FTSR = temp;
 8004e00:	4f0c      	ldr	r7, [pc, #48]	@ (8004e34 <HAL_GPIO_Init+0x2a8>)
 8004e02:	60fc      	str	r4, [r7, #12]
        temp = EXTI->EMR;
 8004e04:	687c      	ldr	r4, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004e06:	03af      	lsls	r7, r5, #14
 8004e08:	d467      	bmi.n	8004eda <HAL_GPIO_Init+0x34e>
        temp &= ~((uint32_t)iocurrent);
 8004e0a:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->EMR = temp;
 8004e0e:	4f09      	ldr	r7, [pc, #36]	@ (8004e34 <HAL_GPIO_Init+0x2a8>)
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e10:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 8004e12:	607c      	str	r4, [r7, #4]
        temp = EXTI->IMR;
 8004e14:	683c      	ldr	r4, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004e16:	d45e      	bmi.n	8004ed6 <HAL_GPIO_Init+0x34a>
        temp &= ~((uint32_t)iocurrent);
 8004e18:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->IMR = temp;
 8004e1c:	4d05      	ldr	r5, [pc, #20]	@ (8004e34 <HAL_GPIO_Init+0x2a8>)
 8004e1e:	602c      	str	r4, [r5, #0]
 8004e20:	e797      	b.n	8004d52 <HAL_GPIO_Init+0x1c6>
 8004e22:	bf00      	nop
 8004e24:	40020000 	.word	0x40020000
 8004e28:	40023800 	.word	0x40023800
 8004e2c:	40020400 	.word	0x40020400
 8004e30:	40020800 	.word	0x40020800
 8004e34:	40013c00 	.word	0x40013c00
 8004e38:	40020c00 	.word	0x40020c00
 8004e3c:	40021000 	.word	0x40021000
 8004e40:	40021400 	.word	0x40021400
 8004e44:	40021800 	.word	0x40021800
 8004e48:	40021c00 	.word	0x40021c00
        temp = GPIOx->OSPEEDR; 
 8004e4c:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e50:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e52:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e56:	fa07 fc04 	lsl.w	ip, r7, r4
 8004e5a:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 8004e5e:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 8004e62:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e66:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e6a:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e6e:	fa0c fc02 	lsl.w	ip, ip, r2
 8004e72:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 8004e76:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8004e7a:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e7e:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e80:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e84:	fa07 fc04 	lsl.w	ip, r7, r4
 8004e88:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e8c:	f1b8 0f02 	cmp.w	r8, #2
        GPIOx->PUPDR = temp;
 8004e90:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e94:	f47f af78 	bne.w	8004d88 <HAL_GPIO_Init+0x1fc>
        temp = GPIOx->AFR[position >> 3U];
 8004e98:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 8004e9c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004ea0:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8004ea4:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ea8:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8004eac:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8004eb0:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb2:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eb4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eb8:	fa07 f70e 	lsl.w	r7, r7, lr
 8004ebc:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004ebe:	270f      	movs	r7, #15
 8004ec0:	fa07 fe0e 	lsl.w	lr, r7, lr
 8004ec4:	9f00      	ldr	r7, [sp, #0]
 8004ec6:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004eca:	9f01      	ldr	r7, [sp, #4]
 8004ecc:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 8004ed0:	f8cc e020 	str.w	lr, [ip, #32]
 8004ed4:	e758      	b.n	8004d88 <HAL_GPIO_Init+0x1fc>
          temp |= iocurrent;
 8004ed6:	4334      	orrs	r4, r6
 8004ed8:	e7a0      	b.n	8004e1c <HAL_GPIO_Init+0x290>
          temp |= iocurrent;
 8004eda:	4334      	orrs	r4, r6
 8004edc:	e797      	b.n	8004e0e <HAL_GPIO_Init+0x282>
          temp |= iocurrent;
 8004ede:	4334      	orrs	r4, r6
 8004ee0:	e78e      	b.n	8004e00 <HAL_GPIO_Init+0x274>
          temp |= iocurrent;
 8004ee2:	4334      	orrs	r4, r6
 8004ee4:	e785      	b.n	8004df2 <HAL_GPIO_Init+0x266>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ee6:	f04f 0c02 	mov.w	ip, #2
 8004eea:	fa0c f707 	lsl.w	r7, ip, r7
 8004eee:	ea4e 0507 	orr.w	r5, lr, r7
 8004ef2:	e706      	b.n	8004d02 <HAL_GPIO_Init+0x176>
 8004ef4:	f04f 0c03 	mov.w	ip, #3
 8004ef8:	fa0c f707 	lsl.w	r7, ip, r7
 8004efc:	ea4e 0507 	orr.w	r5, lr, r7
 8004f00:	e6ff      	b.n	8004d02 <HAL_GPIO_Init+0x176>
 8004f02:	f04f 0c06 	mov.w	ip, #6
 8004f06:	fa0c f707 	lsl.w	r7, ip, r7
 8004f0a:	ea4e 0507 	orr.w	r5, lr, r7
 8004f0e:	e6f8      	b.n	8004d02 <HAL_GPIO_Init+0x176>
 8004f10:	f04f 0c04 	mov.w	ip, #4
 8004f14:	fa0c f707 	lsl.w	r7, ip, r7
 8004f18:	ea4e 0507 	orr.w	r5, lr, r7
 8004f1c:	e6f1      	b.n	8004d02 <HAL_GPIO_Init+0x176>
 8004f1e:	f04f 0c05 	mov.w	ip, #5
 8004f22:	fa0c f707 	lsl.w	r7, ip, r7
 8004f26:	ea4e 0507 	orr.w	r5, lr, r7
 8004f2a:	e6ea      	b.n	8004d02 <HAL_GPIO_Init+0x176>
        temp = GPIOx->PUPDR;
 8004f2c:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f2e:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f32:	f8da 7008 	ldr.w	r7, [sl, #8]
 8004f36:	408f      	lsls	r7, r1
 8004f38:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004f3c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f3e:	e650      	b.n	8004be2 <HAL_GPIO_Init+0x56>
        temp = GPIOx->PUPDR;
 8004f40:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8004f5c <HAL_GPIO_Init+0x3d0>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f44:	688f      	ldr	r7, [r1, #8]
        temp = GPIOx->PUPDR;
 8004f46:	f8dc e00c 	ldr.w	lr, [ip, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f4a:	40a7      	lsls	r7, r4
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f4c:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f50:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->PUPDR = temp;
 8004f54:	f8cc e00c 	str.w	lr, [ip, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f58:	e716      	b.n	8004d88 <HAL_GPIO_Init+0x1fc>
 8004f5a:	bf00      	nop
 8004f5c:	40020000 	.word	0x40020000

08004f60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004f60:	b902      	cbnz	r2, 8004f64 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004f62:	0409      	lsls	r1, r1, #16
 8004f64:	6181      	str	r1, [r0, #24]
  }
}
 8004f66:	4770      	bx	lr

08004f68 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004f68:	2800      	cmp	r0, #0
 8004f6a:	f000 81d8 	beq.w	800531e <HAL_RCC_OscConfig+0x3b6>
{
 8004f6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f72:	6803      	ldr	r3, [r0, #0]
 8004f74:	07dd      	lsls	r5, r3, #31
{
 8004f76:	b082      	sub	sp, #8
 8004f78:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f7a:	d52f      	bpl.n	8004fdc <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f7c:	499d      	ldr	r1, [pc, #628]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8004f7e:	688a      	ldr	r2, [r1, #8]
 8004f80:	f002 020c 	and.w	r2, r2, #12
 8004f84:	2a04      	cmp	r2, #4
 8004f86:	f000 80ec 	beq.w	8005162 <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f8a:	688a      	ldr	r2, [r1, #8]
 8004f8c:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004f90:	2a08      	cmp	r2, #8
 8004f92:	f000 80e2 	beq.w	800515a <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f96:	6863      	ldr	r3, [r4, #4]
 8004f98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f9c:	f000 80eb 	beq.w	8005176 <HAL_RCC_OscConfig+0x20e>
 8004fa0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004fa4:	f000 8173 	beq.w	800528e <HAL_RCC_OscConfig+0x326>
 8004fa8:	4d92      	ldr	r5, [pc, #584]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8004faa:	682a      	ldr	r2, [r5, #0]
 8004fac:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004fb0:	602a      	str	r2, [r5, #0]
 8004fb2:	682a      	ldr	r2, [r5, #0]
 8004fb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004fb8:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	f040 80e0 	bne.w	8005180 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc0:	f7ff fd76 	bl	8004ab0 <HAL_GetTick>
 8004fc4:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fc6:	e005      	b.n	8004fd4 <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004fc8:	f7ff fd72 	bl	8004ab0 <HAL_GetTick>
 8004fcc:	1b80      	subs	r0, r0, r6
 8004fce:	2864      	cmp	r0, #100	@ 0x64
 8004fd0:	f200 8100 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fd4:	682b      	ldr	r3, [r5, #0]
 8004fd6:	039f      	lsls	r7, r3, #14
 8004fd8:	d4f6      	bmi.n	8004fc8 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fda:	6823      	ldr	r3, [r4, #0]
 8004fdc:	079d      	lsls	r5, r3, #30
 8004fde:	d528      	bpl.n	8005032 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004fe0:	4a84      	ldr	r2, [pc, #528]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8004fe2:	6891      	ldr	r1, [r2, #8]
 8004fe4:	f011 0f0c 	tst.w	r1, #12
 8004fe8:	f000 809b 	beq.w	8005122 <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fec:	6891      	ldr	r1, [r2, #8]
 8004fee:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ff2:	2908      	cmp	r1, #8
 8004ff4:	f000 8091 	beq.w	800511a <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004ff8:	68e3      	ldr	r3, [r4, #12]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	f000 810c 	beq.w	8005218 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005000:	4b7d      	ldr	r3, [pc, #500]	@ (80051f8 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005002:	4e7c      	ldr	r6, [pc, #496]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 8005004:	2201      	movs	r2, #1
 8005006:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8005008:	f7ff fd52 	bl	8004ab0 <HAL_GetTick>
 800500c:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800500e:	e005      	b.n	800501c <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005010:	f7ff fd4e 	bl	8004ab0 <HAL_GetTick>
 8005014:	1b40      	subs	r0, r0, r5
 8005016:	2802      	cmp	r0, #2
 8005018:	f200 80dc 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800501c:	6833      	ldr	r3, [r6, #0]
 800501e:	079f      	lsls	r7, r3, #30
 8005020:	d5f6      	bpl.n	8005010 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	6833      	ldr	r3, [r6, #0]
 8005024:	6922      	ldr	r2, [r4, #16]
 8005026:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800502a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800502e:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	071a      	lsls	r2, r3, #28
 8005034:	d45c      	bmi.n	80050f0 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005036:	075d      	lsls	r5, r3, #29
 8005038:	d53a      	bpl.n	80050b0 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800503a:	4a6e      	ldr	r2, [pc, #440]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 800503c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800503e:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 8005042:	f040 8088 	bne.w	8005156 <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005046:	9301      	str	r3, [sp, #4]
 8005048:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800504a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800504e:	6413      	str	r3, [r2, #64]	@ 0x40
 8005050:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8005052:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005056:	9301      	str	r3, [sp, #4]
 8005058:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800505a:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800505c:	4e67      	ldr	r6, [pc, #412]	@ (80051fc <HAL_RCC_OscConfig+0x294>)
 800505e:	6833      	ldr	r3, [r6, #0]
 8005060:	05d8      	lsls	r0, r3, #23
 8005062:	f140 80a7 	bpl.w	80051b4 <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005066:	68a3      	ldr	r3, [r4, #8]
 8005068:	2b01      	cmp	r3, #1
 800506a:	f000 80b7 	beq.w	80051dc <HAL_RCC_OscConfig+0x274>
 800506e:	2b05      	cmp	r3, #5
 8005070:	f000 811d 	beq.w	80052ae <HAL_RCC_OscConfig+0x346>
 8005074:	4e5f      	ldr	r6, [pc, #380]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8005076:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8005078:	f022 0201 	bic.w	r2, r2, #1
 800507c:	6732      	str	r2, [r6, #112]	@ 0x70
 800507e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8005080:	f022 0204 	bic.w	r2, r2, #4
 8005084:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005086:	2b00      	cmp	r3, #0
 8005088:	f040 80ad 	bne.w	80051e6 <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800508c:	f7ff fd10 	bl	8004ab0 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005090:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8005094:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005096:	e005      	b.n	80050a4 <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005098:	f7ff fd0a 	bl	8004ab0 <HAL_GetTick>
 800509c:	1bc0      	subs	r0, r0, r7
 800509e:	4540      	cmp	r0, r8
 80050a0:	f200 8098 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80050a4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 80050a6:	079b      	lsls	r3, r3, #30
 80050a8:	d4f6      	bmi.n	8005098 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050aa:	2d00      	cmp	r5, #0
 80050ac:	f040 80f9 	bne.w	80052a2 <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050b0:	69a3      	ldr	r3, [r4, #24]
 80050b2:	b1cb      	cbz	r3, 80050e8 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050b4:	4d4f      	ldr	r5, [pc, #316]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 80050b6:	68aa      	ldr	r2, [r5, #8]
 80050b8:	f002 020c 	and.w	r2, r2, #12
 80050bc:	2a08      	cmp	r2, #8
 80050be:	f000 80bc 	beq.w	800523a <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050c2:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c4:	4b4c      	ldr	r3, [pc, #304]	@ (80051f8 <HAL_RCC_OscConfig+0x290>)
 80050c6:	f04f 0200 	mov.w	r2, #0
 80050ca:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050cc:	f000 80f9 	beq.w	80052c2 <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050d0:	f7ff fcee 	bl	8004ab0 <HAL_GetTick>
 80050d4:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050d6:	e004      	b.n	80050e2 <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050d8:	f7ff fcea 	bl	8004ab0 <HAL_GetTick>
 80050dc:	1b00      	subs	r0, r0, r4
 80050de:	2802      	cmp	r0, #2
 80050e0:	d878      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	682b      	ldr	r3, [r5, #0]
 80050e4:	019b      	lsls	r3, r3, #6
 80050e6:	d4f7      	bmi.n	80050d8 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80050e8:	2000      	movs	r0, #0
}
 80050ea:	b002      	add	sp, #8
 80050ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80050f0:	6963      	ldr	r3, [r4, #20]
 80050f2:	b1fb      	cbz	r3, 8005134 <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 80050f4:	4b40      	ldr	r3, [pc, #256]	@ (80051f8 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050f6:	4e3f      	ldr	r6, [pc, #252]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 80050f8:	2201      	movs	r2, #1
 80050fa:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80050fe:	f7ff fcd7 	bl	8004ab0 <HAL_GetTick>
 8005102:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005104:	e004      	b.n	8005110 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005106:	f7ff fcd3 	bl	8004ab0 <HAL_GetTick>
 800510a:	1b40      	subs	r0, r0, r5
 800510c:	2802      	cmp	r0, #2
 800510e:	d861      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005110:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005112:	079b      	lsls	r3, r3, #30
 8005114:	d5f7      	bpl.n	8005106 <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005116:	6823      	ldr	r3, [r4, #0]
 8005118:	e78d      	b.n	8005036 <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800511a:	6852      	ldr	r2, [r2, #4]
 800511c:	0251      	lsls	r1, r2, #9
 800511e:	f53f af6b 	bmi.w	8004ff8 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005122:	4a34      	ldr	r2, [pc, #208]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8005124:	6812      	ldr	r2, [r2, #0]
 8005126:	0792      	lsls	r2, r2, #30
 8005128:	d538      	bpl.n	800519c <HAL_RCC_OscConfig+0x234>
 800512a:	68e2      	ldr	r2, [r4, #12]
 800512c:	2a01      	cmp	r2, #1
 800512e:	d035      	beq.n	800519c <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8005130:	2001      	movs	r0, #1
 8005132:	e7da      	b.n	80050ea <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 8005134:	4a30      	ldr	r2, [pc, #192]	@ (80051f8 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005136:	4e2f      	ldr	r6, [pc, #188]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8005138:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 800513c:	f7ff fcb8 	bl	8004ab0 <HAL_GetTick>
 8005140:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005142:	e004      	b.n	800514e <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005144:	f7ff fcb4 	bl	8004ab0 <HAL_GetTick>
 8005148:	1b40      	subs	r0, r0, r5
 800514a:	2802      	cmp	r0, #2
 800514c:	d842      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800514e:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8005150:	079f      	lsls	r7, r3, #30
 8005152:	d4f7      	bmi.n	8005144 <HAL_RCC_OscConfig+0x1dc>
 8005154:	e7df      	b.n	8005116 <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 8005156:	2500      	movs	r5, #0
 8005158:	e780      	b.n	800505c <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800515a:	684a      	ldr	r2, [r1, #4]
 800515c:	0251      	lsls	r1, r2, #9
 800515e:	f57f af1a 	bpl.w	8004f96 <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005162:	4a24      	ldr	r2, [pc, #144]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8005164:	6812      	ldr	r2, [r2, #0]
 8005166:	0392      	lsls	r2, r2, #14
 8005168:	f57f af38 	bpl.w	8004fdc <HAL_RCC_OscConfig+0x74>
 800516c:	6862      	ldr	r2, [r4, #4]
 800516e:	2a00      	cmp	r2, #0
 8005170:	f47f af34 	bne.w	8004fdc <HAL_RCC_OscConfig+0x74>
 8005174:	e7dc      	b.n	8005130 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005176:	4a1f      	ldr	r2, [pc, #124]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 8005178:	6813      	ldr	r3, [r2, #0]
 800517a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800517e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005180:	f7ff fc96 	bl	8004ab0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005184:	4e1b      	ldr	r6, [pc, #108]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 8005186:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005188:	e004      	b.n	8005194 <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800518a:	f7ff fc91 	bl	8004ab0 <HAL_GetTick>
 800518e:	1b40      	subs	r0, r0, r5
 8005190:	2864      	cmp	r0, #100	@ 0x64
 8005192:	d81f      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005194:	6833      	ldr	r3, [r6, #0]
 8005196:	039b      	lsls	r3, r3, #14
 8005198:	d5f7      	bpl.n	800518a <HAL_RCC_OscConfig+0x222>
 800519a:	e71e      	b.n	8004fda <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800519c:	4915      	ldr	r1, [pc, #84]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 800519e:	6920      	ldr	r0, [r4, #16]
 80051a0:	680a      	ldr	r2, [r1, #0]
 80051a2:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 80051a6:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 80051aa:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80051ac:	071a      	lsls	r2, r3, #28
 80051ae:	f57f af42 	bpl.w	8005036 <HAL_RCC_OscConfig+0xce>
 80051b2:	e79d      	b.n	80050f0 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051b4:	6833      	ldr	r3, [r6, #0]
 80051b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80051ba:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80051bc:	f7ff fc78 	bl	8004ab0 <HAL_GetTick>
 80051c0:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	6833      	ldr	r3, [r6, #0]
 80051c4:	05d9      	lsls	r1, r3, #23
 80051c6:	f53f af4e 	bmi.w	8005066 <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051ca:	f7ff fc71 	bl	8004ab0 <HAL_GetTick>
 80051ce:	1bc0      	subs	r0, r0, r7
 80051d0:	2802      	cmp	r0, #2
 80051d2:	d9f6      	bls.n	80051c2 <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80051d4:	2003      	movs	r0, #3
}
 80051d6:	b002      	add	sp, #8
 80051d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051dc:	4a05      	ldr	r2, [pc, #20]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
 80051de:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80051e0:	f043 0301 	orr.w	r3, r3, #1
 80051e4:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80051e6:	f7ff fc63 	bl	8004ab0 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051ea:	4f02      	ldr	r7, [pc, #8]	@ (80051f4 <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80051ec:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051ee:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	e00a      	b.n	800520a <HAL_RCC_OscConfig+0x2a2>
 80051f4:	40023800 	.word	0x40023800
 80051f8:	42470000 	.word	0x42470000
 80051fc:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005200:	f7ff fc56 	bl	8004ab0 <HAL_GetTick>
 8005204:	1b80      	subs	r0, r0, r6
 8005206:	4540      	cmp	r0, r8
 8005208:	d8e4      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800520a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800520c:	079a      	lsls	r2, r3, #30
 800520e:	d5f7      	bpl.n	8005200 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 8005210:	2d00      	cmp	r5, #0
 8005212:	f43f af4d 	beq.w	80050b0 <HAL_RCC_OscConfig+0x148>
 8005216:	e044      	b.n	80052a2 <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 8005218:	4a42      	ldr	r2, [pc, #264]	@ (8005324 <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800521a:	4e43      	ldr	r6, [pc, #268]	@ (8005328 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 800521c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 800521e:	f7ff fc47 	bl	8004ab0 <HAL_GetTick>
 8005222:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005224:	e004      	b.n	8005230 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005226:	f7ff fc43 	bl	8004ab0 <HAL_GetTick>
 800522a:	1b40      	subs	r0, r0, r5
 800522c:	2802      	cmp	r0, #2
 800522e:	d8d1      	bhi.n	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005230:	6833      	ldr	r3, [r6, #0]
 8005232:	0799      	lsls	r1, r3, #30
 8005234:	d4f7      	bmi.n	8005226 <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005236:	6823      	ldr	r3, [r4, #0]
 8005238:	e6fb      	b.n	8005032 <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800523a:	2b01      	cmp	r3, #1
 800523c:	f43f af78 	beq.w	8005130 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8005240:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005242:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005244:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005248:	4291      	cmp	r1, r2
 800524a:	f47f af71 	bne.w	8005130 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800524e:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005250:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005254:	4291      	cmp	r1, r2
 8005256:	f47f af6b 	bne.w	8005130 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800525a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800525c:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8005260:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005262:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8005266:	f47f af63 	bne.w	8005130 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800526a:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800526c:	0852      	lsrs	r2, r2, #1
 800526e:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 8005272:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005274:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005278:	f47f af5a 	bne.w	8005130 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800527c:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800527e:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005282:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 8005286:	bf14      	ite	ne
 8005288:	2001      	movne	r0, #1
 800528a:	2000      	moveq	r0, #0
 800528c:	e72d      	b.n	80050ea <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800528e:	4b26      	ldr	r3, [pc, #152]	@ (8005328 <HAL_RCC_OscConfig+0x3c0>)
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800529e:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052a0:	e76e      	b.n	8005180 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 80052a2:	4a21      	ldr	r2, [pc, #132]	@ (8005328 <HAL_RCC_OscConfig+0x3c0>)
 80052a4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80052a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80052aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80052ac:	e700      	b.n	80050b0 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80052ae:	4b1e      	ldr	r3, [pc, #120]	@ (8005328 <HAL_RCC_OscConfig+0x3c0>)
 80052b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052b2:	f042 0204 	orr.w	r2, r2, #4
 80052b6:	671a      	str	r2, [r3, #112]	@ 0x70
 80052b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80052ba:	f042 0201 	orr.w	r2, r2, #1
 80052be:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80052c0:	e791      	b.n	80051e6 <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 80052c2:	f7ff fbf5 	bl	8004ab0 <HAL_GetTick>
 80052c6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052c8:	e005      	b.n	80052d6 <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80052ca:	f7ff fbf1 	bl	8004ab0 <HAL_GetTick>
 80052ce:	1b80      	subs	r0, r0, r6
 80052d0:	2802      	cmp	r0, #2
 80052d2:	f63f af7f 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052d6:	682b      	ldr	r3, [r5, #0]
 80052d8:	0199      	lsls	r1, r3, #6
 80052da:	d4f6      	bmi.n	80052ca <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052dc:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80052e0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80052e2:	430b      	orrs	r3, r1
 80052e4:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80052e8:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 80052ec:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 80052ee:	490d      	ldr	r1, [pc, #52]	@ (8005324 <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052f0:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80052f4:	3a01      	subs	r2, #1
 80052f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80052fa:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80052fc:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80052fe:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 8005300:	f7ff fbd6 	bl	8004ab0 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005304:	4d08      	ldr	r5, [pc, #32]	@ (8005328 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 8005306:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005308:	e005      	b.n	8005316 <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800530a:	f7ff fbd1 	bl	8004ab0 <HAL_GetTick>
 800530e:	1b00      	subs	r0, r0, r4
 8005310:	2802      	cmp	r0, #2
 8005312:	f63f af5f 	bhi.w	80051d4 <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005316:	682b      	ldr	r3, [r5, #0]
 8005318:	019a      	lsls	r2, r3, #6
 800531a:	d5f6      	bpl.n	800530a <HAL_RCC_OscConfig+0x3a2>
 800531c:	e6e4      	b.n	80050e8 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 800531e:	2001      	movs	r0, #1
}
 8005320:	4770      	bx	lr
 8005322:	bf00      	nop
 8005324:	42470000 	.word	0x42470000
 8005328:	40023800 	.word	0x40023800

0800532c <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800532c:	4916      	ldr	r1, [pc, #88]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 800532e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005330:	688b      	ldr	r3, [r1, #8]
 8005332:	f003 030c 	and.w	r3, r3, #12
 8005336:	2b04      	cmp	r3, #4
 8005338:	d01b      	beq.n	8005372 <HAL_RCC_GetSysClockFreq+0x46>
 800533a:	2b08      	cmp	r3, #8
 800533c:	d001      	beq.n	8005342 <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800533e:	4813      	ldr	r0, [pc, #76]	@ (800538c <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005340:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005342:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005344:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005346:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005348:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800534c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005350:	d111      	bne.n	8005376 <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005352:	480e      	ldr	r0, [pc, #56]	@ (800538c <HAL_RCC_GetSysClockFreq+0x60>)
 8005354:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005358:	fba1 0100 	umull	r0, r1, r1, r0
 800535c:	f7fb fdd8 	bl	8000f10 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005360:	4b09      	ldr	r3, [pc, #36]	@ (8005388 <HAL_RCC_GetSysClockFreq+0x5c>)
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8005368:	3301      	adds	r3, #1
 800536a:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 800536c:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8005370:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005372:	4807      	ldr	r0, [pc, #28]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005374:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005376:	4806      	ldr	r0, [pc, #24]	@ (8005390 <HAL_RCC_GetSysClockFreq+0x64>)
 8005378:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800537c:	2300      	movs	r3, #0
 800537e:	fba1 0100 	umull	r0, r1, r1, r0
 8005382:	f7fb fdc5 	bl	8000f10 <__aeabi_uldivmod>
 8005386:	e7eb      	b.n	8005360 <HAL_RCC_GetSysClockFreq+0x34>
 8005388:	40023800 	.word	0x40023800
 800538c:	00f42400 	.word	0x00f42400
 8005390:	007a1200 	.word	0x007a1200

08005394 <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 8005394:	2800      	cmp	r0, #0
 8005396:	f000 8087 	beq.w	80054a8 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800539a:	4a48      	ldr	r2, [pc, #288]	@ (80054bc <HAL_RCC_ClockConfig+0x128>)
 800539c:	6813      	ldr	r3, [r2, #0]
 800539e:	f003 0307 	and.w	r3, r3, #7
 80053a2:	428b      	cmp	r3, r1
{
 80053a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053a8:	460d      	mov	r5, r1
 80053aa:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	d209      	bcs.n	80053c2 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ae:	b2cb      	uxtb	r3, r1
 80053b0:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053b2:	6813      	ldr	r3, [r2, #0]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	428b      	cmp	r3, r1
 80053ba:	d002      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 80053bc:	2001      	movs	r0, #1
}
 80053be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053c2:	6823      	ldr	r3, [r4, #0]
 80053c4:	0798      	lsls	r0, r3, #30
 80053c6:	d514      	bpl.n	80053f2 <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053c8:	0759      	lsls	r1, r3, #29
 80053ca:	d504      	bpl.n	80053d6 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053cc:	493c      	ldr	r1, [pc, #240]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 80053ce:	688a      	ldr	r2, [r1, #8]
 80053d0:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80053d4:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d6:	071a      	lsls	r2, r3, #28
 80053d8:	d504      	bpl.n	80053e4 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053da:	4939      	ldr	r1, [pc, #228]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 80053dc:	688a      	ldr	r2, [r1, #8]
 80053de:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80053e2:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053e4:	4936      	ldr	r1, [pc, #216]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 80053e6:	68a0      	ldr	r0, [r4, #8]
 80053e8:	688a      	ldr	r2, [r1, #8]
 80053ea:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80053ee:	4302      	orrs	r2, r0
 80053f0:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053f2:	07df      	lsls	r7, r3, #31
 80053f4:	d521      	bpl.n	800543a <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053f6:	6862      	ldr	r2, [r4, #4]
 80053f8:	2a01      	cmp	r2, #1
 80053fa:	d057      	beq.n	80054ac <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053fc:	1e93      	subs	r3, r2, #2
 80053fe:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005400:	4b2f      	ldr	r3, [pc, #188]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 8005402:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005404:	d94d      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	0799      	lsls	r1, r3, #30
 8005408:	d5d8      	bpl.n	80053bc <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800540a:	4e2d      	ldr	r6, [pc, #180]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 800540c:	68b3      	ldr	r3, [r6, #8]
 800540e:	f023 0303 	bic.w	r3, r3, #3
 8005412:	4313      	orrs	r3, r2
 8005414:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005416:	f7ff fb4b 	bl	8004ab0 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800541a:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 800541e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005420:	e004      	b.n	800542c <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005422:	f7ff fb45 	bl	8004ab0 <HAL_GetTick>
 8005426:	1bc0      	subs	r0, r0, r7
 8005428:	4540      	cmp	r0, r8
 800542a:	d844      	bhi.n	80054b6 <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542c:	68b3      	ldr	r3, [r6, #8]
 800542e:	6862      	ldr	r2, [r4, #4]
 8005430:	f003 030c 	and.w	r3, r3, #12
 8005434:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8005438:	d1f3      	bne.n	8005422 <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800543a:	4a20      	ldr	r2, [pc, #128]	@ (80054bc <HAL_RCC_ClockConfig+0x128>)
 800543c:	6813      	ldr	r3, [r2, #0]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	42ab      	cmp	r3, r5
 8005444:	d906      	bls.n	8005454 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005446:	b2eb      	uxtb	r3, r5
 8005448:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544a:	6813      	ldr	r3, [r2, #0]
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	42ab      	cmp	r3, r5
 8005452:	d1b3      	bne.n	80053bc <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005454:	6823      	ldr	r3, [r4, #0]
 8005456:	075a      	lsls	r2, r3, #29
 8005458:	d506      	bpl.n	8005468 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800545a:	4919      	ldr	r1, [pc, #100]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 800545c:	68e0      	ldr	r0, [r4, #12]
 800545e:	688a      	ldr	r2, [r1, #8]
 8005460:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8005464:	4302      	orrs	r2, r0
 8005466:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	d507      	bpl.n	800547c <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800546c:	4a14      	ldr	r2, [pc, #80]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 800546e:	6921      	ldr	r1, [r4, #16]
 8005470:	6893      	ldr	r3, [r2, #8]
 8005472:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005476:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800547a:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800547c:	f7ff ff56 	bl	800532c <HAL_RCC_GetSysClockFreq>
 8005480:	4a0f      	ldr	r2, [pc, #60]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 8005482:	4c10      	ldr	r4, [pc, #64]	@ (80054c4 <HAL_RCC_ClockConfig+0x130>)
 8005484:	6892      	ldr	r2, [r2, #8]
 8005486:	4910      	ldr	r1, [pc, #64]	@ (80054c8 <HAL_RCC_ClockConfig+0x134>)
 8005488:	f3c2 1203 	ubfx	r2, r2, #4, #4
 800548c:	4603      	mov	r3, r0
 800548e:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8005490:	480e      	ldr	r0, [pc, #56]	@ (80054cc <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005492:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8005494:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005496:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8005498:	f7ff fac0 	bl	8004a1c <HAL_InitTick>
  return HAL_OK;
 800549c:	2000      	movs	r0, #0
}
 800549e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a2:	0198      	lsls	r0, r3, #6
 80054a4:	d4b1      	bmi.n	800540a <HAL_RCC_ClockConfig+0x76>
 80054a6:	e789      	b.n	80053bc <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 80054a8:	2001      	movs	r0, #1
}
 80054aa:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ac:	4b04      	ldr	r3, [pc, #16]	@ (80054c0 <HAL_RCC_ClockConfig+0x12c>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	039e      	lsls	r6, r3, #14
 80054b2:	d4aa      	bmi.n	800540a <HAL_RCC_ClockConfig+0x76>
 80054b4:	e782      	b.n	80053bc <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 80054b6:	2003      	movs	r0, #3
 80054b8:	e781      	b.n	80053be <HAL_RCC_ClockConfig+0x2a>
 80054ba:	bf00      	nop
 80054bc:	40023c00 	.word	0x40023c00
 80054c0:	40023800 	.word	0x40023800
 80054c4:	08005eb4 	.word	0x08005eb4
 80054c8:	2000000c 	.word	0x2000000c
 80054cc:	20000014 	.word	0x20000014

080054d0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d0:	4b04      	ldr	r3, [pc, #16]	@ (80054e4 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 80054d2:	4905      	ldr	r1, [pc, #20]	@ (80054e8 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80054d4:	689b      	ldr	r3, [r3, #8]
 80054d6:	4a05      	ldr	r2, [pc, #20]	@ (80054ec <HAL_RCC_GetPCLK1Freq+0x1c>)
 80054d8:	6808      	ldr	r0, [r1, #0]
 80054da:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80054de:	5cd3      	ldrb	r3, [r2, r3]
}
 80054e0:	40d8      	lsrs	r0, r3
 80054e2:	4770      	bx	lr
 80054e4:	40023800 	.word	0x40023800
 80054e8:	2000000c 	.word	0x2000000c
 80054ec:	08005eac 	.word	0x08005eac

080054f0 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f0:	4b04      	ldr	r3, [pc, #16]	@ (8005504 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 80054f2:	4905      	ldr	r1, [pc, #20]	@ (8005508 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	4a05      	ldr	r2, [pc, #20]	@ (800550c <HAL_RCC_GetPCLK2Freq+0x1c>)
 80054f8:	6808      	ldr	r0, [r1, #0]
 80054fa:	f3c3 3342 	ubfx	r3, r3, #13, #3
 80054fe:	5cd3      	ldrb	r3, [r2, r3]
}
 8005500:	40d8      	lsrs	r0, r3
 8005502:	4770      	bx	lr
 8005504:	40023800 	.word	0x40023800
 8005508:	2000000c 	.word	0x2000000c
 800550c:	08005eac 	.word	0x08005eac

08005510 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005510:	2800      	cmp	r0, #0
 8005512:	f000 8087 	beq.w	8005624 <HAL_UART_Init+0x114>
{
 8005516:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005518:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 800551c:	4604      	mov	r4, r0
 800551e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8005522:	2b00      	cmp	r3, #0
 8005524:	d079      	beq.n	800561a <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005526:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005528:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 800552a:	2224      	movs	r2, #36	@ 0x24
 800552c:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005536:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005538:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800553a:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800553c:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8005540:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005542:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005544:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005546:	4302      	orrs	r2, r0
 8005548:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800554a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800554c:	4302      	orrs	r2, r0
 800554e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8005550:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8005554:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005558:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800555a:	430a      	orrs	r2, r1
 800555c:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555e:	695a      	ldr	r2, [r3, #20]
 8005560:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005562:	4931      	ldr	r1, [pc, #196]	@ (8005628 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005564:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8005568:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800556a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800556c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800556e:	d036      	beq.n	80055de <HAL_UART_Init+0xce>
 8005570:	4a2e      	ldr	r2, [pc, #184]	@ (800562c <HAL_UART_Init+0x11c>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d033      	beq.n	80055de <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005576:	f7ff ffab 	bl	80054d0 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557a:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800557c:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800557e:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005582:	e9d4 5300 	ldrd	r5, r3, [r4]
 8005586:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800558a:	d02b      	beq.n	80055e4 <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800558c:	009a      	lsls	r2, r3, #2
 800558e:	0f9b      	lsrs	r3, r3, #30
 8005590:	f7fb fcbe 	bl	8000f10 <__aeabi_uldivmod>
 8005594:	4a26      	ldr	r2, [pc, #152]	@ (8005630 <HAL_UART_Init+0x120>)
 8005596:	fba2 1300 	umull	r1, r3, r2, r0
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2164      	movs	r1, #100	@ 0x64
 800559e:	fb01 0013 	mls	r0, r1, r3, r0
 80055a2:	0100      	lsls	r0, r0, #4
 80055a4:	3032      	adds	r0, #50	@ 0x32
 80055a6:	fba2 2000 	umull	r2, r0, r2, r0
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 80055b0:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055b2:	692a      	ldr	r2, [r5, #16]
 80055b4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80055b8:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055ba:	696a      	ldr	r2, [r5, #20]
 80055bc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80055c0:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 80055c2:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c4:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 80055c6:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80055c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80055cc:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ce:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80055d0:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80055d4:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 80055d8:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055da:	6363      	str	r3, [r4, #52]	@ 0x34
}
 80055dc:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80055de:	f7ff ff87 	bl	80054f0 <HAL_RCC_GetPCLK2Freq>
 80055e2:	e7ca      	b.n	800557a <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055e4:	18da      	adds	r2, r3, r3
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	415b      	adcs	r3, r3
 80055ec:	f7fb fc90 	bl	8000f10 <__aeabi_uldivmod>
 80055f0:	4a0f      	ldr	r2, [pc, #60]	@ (8005630 <HAL_UART_Init+0x120>)
 80055f2:	fba2 3100 	umull	r3, r1, r2, r0
 80055f6:	0949      	lsrs	r1, r1, #5
 80055f8:	2364      	movs	r3, #100	@ 0x64
 80055fa:	fb03 0311 	mls	r3, r3, r1, r0
 80055fe:	00db      	lsls	r3, r3, #3
 8005600:	3332      	adds	r3, #50	@ 0x32
 8005602:	fba2 2303 	umull	r2, r3, r2, r3
 8005606:	f3c3 1242 	ubfx	r2, r3, #5, #3
 800560a:	091b      	lsrs	r3, r3, #4
 800560c:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8005610:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005614:	4413      	add	r3, r2
 8005616:	60ab      	str	r3, [r5, #8]
 8005618:	e7cb      	b.n	80055b2 <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 800561a:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 800561e:	f7ff f997 	bl	8004950 <HAL_UART_MspInit>
 8005622:	e780      	b.n	8005526 <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8005624:	2001      	movs	r0, #1
}
 8005626:	4770      	bx	lr
 8005628:	40011000 	.word	0x40011000
 800562c:	40011400 	.word	0x40011400
 8005630:	51eb851f 	.word	0x51eb851f

08005634 <HAL_UART_Transmit>:
{
 8005634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005638:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800563a:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 800563e:	2820      	cmp	r0, #32
 8005640:	d155      	bne.n	80056ee <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8005642:	460d      	mov	r5, r1
 8005644:	b109      	cbz	r1, 800564a <HAL_UART_Transmit+0x16>
 8005646:	4616      	mov	r6, r2
 8005648:	b912      	cbnz	r2, 8005650 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 800564a:	2001      	movs	r0, #1
}
 800564c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005650:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005652:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005656:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800565c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8005660:	f7ff fa26 	bl	8004ab0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005664:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8005666:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800566c:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 800566e:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005670:	d040      	beq.n	80056f4 <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8005672:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005674:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8005676:	b29b      	uxth	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	d047      	beq.n	800570c <HAL_UART_Transmit+0xd8>
 800567c:	1c7b      	adds	r3, r7, #1
 800567e:	d124      	bne.n	80056ca <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005680:	6813      	ldr	r3, [r2, #0]
 8005682:	061f      	lsls	r7, r3, #24
 8005684:	d5fc      	bpl.n	8005680 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8005686:	2d00      	cmp	r5, #0
 8005688:	d02c      	beq.n	80056e4 <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800568a:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800568e:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8005690:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8005692:	3b01      	subs	r3, #1
 8005694:	b29b      	uxth	r3, r3
 8005696:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005698:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 800569a:	b29b      	uxth	r3, r3
 800569c:	2b00      	cmp	r3, #0
 800569e:	d1ef      	bne.n	8005680 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056a0:	6813      	ldr	r3, [r2, #0]
 80056a2:	0659      	lsls	r1, r3, #25
 80056a4:	d5fc      	bpl.n	80056a0 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 80056a6:	2320      	movs	r3, #32
 80056a8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 80056ac:	2000      	movs	r0, #0
}
 80056ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 80056b2:	2d00      	cmp	r5, #0
 80056b4:	d03d      	beq.n	8005732 <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80056b6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80056ba:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80056bc:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80056be:	3b01      	subs	r3, #1
 80056c0:	b29b      	uxth	r3, r3
 80056c2:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80056c4:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	b313      	cbz	r3, 8005710 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80056ca:	6813      	ldr	r3, [r2, #0]
 80056cc:	061e      	lsls	r6, r3, #24
 80056ce:	d4f0      	bmi.n	80056b2 <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056d0:	f7ff f9ee 	bl	8004ab0 <HAL_GetTick>
 80056d4:	eba0 0309 	sub.w	r3, r0, r9
 80056d8:	429f      	cmp	r7, r3
 80056da:	d311      	bcc.n	8005700 <HAL_UART_Transmit+0xcc>
 80056dc:	b187      	cbz	r7, 8005700 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80056de:	6822      	ldr	r2, [r4, #0]
 80056e0:	68d3      	ldr	r3, [r2, #12]
 80056e2:	e7f2      	b.n	80056ca <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e4:	f838 3b02 	ldrh.w	r3, [r8], #2
 80056e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80056ec:	e7cf      	b.n	800568e <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 80056ee:	2002      	movs	r0, #2
}
 80056f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056f4:	6923      	ldr	r3, [r4, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1bb      	bne.n	8005672 <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 80056fa:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 80056fc:	461d      	mov	r5, r3
 80056fe:	e7b8      	b.n	8005672 <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8005700:	2320      	movs	r3, #32
 8005702:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8005706:	2003      	movs	r0, #3
}
 8005708:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800570c:	1c78      	adds	r0, r7, #1
 800570e:	d0c7      	beq.n	80056a0 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005710:	6813      	ldr	r3, [r2, #0]
 8005712:	065b      	lsls	r3, r3, #25
 8005714:	d4c7      	bmi.n	80056a6 <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7ff f9cb 	bl	8004ab0 <HAL_GetTick>
 800571a:	eba0 0309 	sub.w	r3, r0, r9
 800571e:	429f      	cmp	r7, r3
 8005720:	d3ee      	bcc.n	8005700 <HAL_UART_Transmit+0xcc>
 8005722:	2f00      	cmp	r7, #0
 8005724:	d0ec      	beq.n	8005700 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005726:	6822      	ldr	r2, [r4, #0]
 8005728:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800572a:	6813      	ldr	r3, [r2, #0]
 800572c:	065b      	lsls	r3, r3, #25
 800572e:	d5f2      	bpl.n	8005716 <HAL_UART_Transmit+0xe2>
 8005730:	e7b9      	b.n	80056a6 <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005732:	f838 3b02 	ldrh.w	r3, [r8], #2
 8005736:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800573a:	e7be      	b.n	80056ba <HAL_UART_Transmit+0x86>

0800573c <HAL_UART_Receive>:
{
 800573c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005740:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8005742:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
 8005746:	2820      	cmp	r0, #32
{
 8005748:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 800574a:	d14a      	bne.n	80057e2 <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 800574c:	460d      	mov	r5, r1
 800574e:	b109      	cbz	r1, 8005754 <HAL_UART_Receive+0x18>
 8005750:	4616      	mov	r6, r2
 8005752:	b91a      	cbnz	r2, 800575c <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 8005754:	2001      	movs	r0, #1
}
 8005756:	b003      	add	sp, #12
 8005758:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800575c:	f04f 0800 	mov.w	r8, #0
 8005760:	461f      	mov	r7, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005762:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005764:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800576c:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8005770:	f7ff f99e 	bl	8004ab0 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005774:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8005776:	85a6      	strh	r6, [r4, #44]	@ 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005778:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 800577c:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 800577e:	85e6      	strh	r6, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005780:	f000 8099 	beq.w	80058b6 <HAL_UART_Receive+0x17a>
      pdata16bits = NULL;
 8005784:	4646      	mov	r6, r8
    while (huart->RxXferCount > 0U)
 8005786:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005788:	b29b      	uxth	r3, r3
 800578a:	b1cb      	cbz	r3, 80057c0 <HAL_UART_Receive+0x84>
 800578c:	1c7b      	adds	r3, r7, #1
 800578e:	d141      	bne.n	8005814 <HAL_UART_Receive+0xd8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005790:	6822      	ldr	r2, [r4, #0]
 8005792:	6813      	ldr	r3, [r2, #0]
 8005794:	069f      	lsls	r7, r3, #26
 8005796:	d5fc      	bpl.n	8005792 <HAL_UART_Receive+0x56>
      if (pdata8bits == NULL)
 8005798:	b1ed      	cbz	r5, 80057d6 <HAL_UART_Receive+0x9a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800579a:	68a3      	ldr	r3, [r4, #8]
 800579c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80057a0:	d002      	beq.n	80057a8 <HAL_UART_Receive+0x6c>
 80057a2:	b9a3      	cbnz	r3, 80057ce <HAL_UART_Receive+0x92>
 80057a4:	6923      	ldr	r3, [r4, #16]
 80057a6:	b993      	cbnz	r3, 80057ce <HAL_UART_Receive+0x92>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80057a8:	6853      	ldr	r3, [r2, #4]
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 80057b0:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80057b2:	3b01      	subs	r3, #1
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80057b8:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d1e7      	bne.n	8005790 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 80057c0:	2320      	movs	r3, #32
    return HAL_OK;
 80057c2:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 80057c4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 80057c8:	b003      	add	sp, #12
 80057ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057ce:	6853      	ldr	r3, [r2, #4]
 80057d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057d4:	e7ea      	b.n	80057ac <HAL_UART_Receive+0x70>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80057d6:	6853      	ldr	r3, [r2, #4]
 80057d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057dc:	f826 3b02 	strh.w	r3, [r6], #2
        pdata16bits++;
 80057e0:	e7e6      	b.n	80057b0 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 80057e2:	2002      	movs	r0, #2
}
 80057e4:	b003      	add	sp, #12
 80057e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 80057ea:	2d00      	cmp	r5, #0
 80057ec:	d070      	beq.n	80058d0 <HAL_UART_Receive+0x194>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80057ee:	68a2      	ldr	r2, [r4, #8]
 80057f0:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 80057f4:	d069      	beq.n	80058ca <HAL_UART_Receive+0x18e>
 80057f6:	2a00      	cmp	r2, #0
 80057f8:	d064      	beq.n	80058c4 <HAL_UART_Receive+0x188>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005800:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8005804:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8005806:	3b01      	subs	r3, #1
 8005808:	b29b      	uxth	r3, r3
 800580a:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 800580c:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 800580e:	b29b      	uxth	r3, r3
 8005810:	2b00      	cmp	r3, #0
 8005812:	d0d5      	beq.n	80057c0 <HAL_UART_Receive+0x84>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	f012 0820 	ands.w	r8, r2, #32
 800581c:	d1e5      	bne.n	80057ea <HAL_UART_Receive+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800581e:	f7ff f947 	bl	8004ab0 <HAL_GetTick>
 8005822:	eba0 0309 	sub.w	r3, r0, r9
 8005826:	429f      	cmp	r7, r3
 8005828:	d33e      	bcc.n	80058a8 <HAL_UART_Receive+0x16c>
 800582a:	2f00      	cmp	r7, #0
 800582c:	d03c      	beq.n	80058a8 <HAL_UART_Receive+0x16c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800582e:	6823      	ldr	r3, [r4, #0]
 8005830:	68d9      	ldr	r1, [r3, #12]
 8005832:	0748      	lsls	r0, r1, #29
 8005834:	461a      	mov	r2, r3
 8005836:	d5ee      	bpl.n	8005816 <HAL_UART_Receive+0xda>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005838:	6819      	ldr	r1, [r3, #0]
 800583a:	0709      	lsls	r1, r1, #28
 800583c:	d5eb      	bpl.n	8005816 <HAL_UART_Receive+0xda>
          __HAL_UART_CLEAR_OREFLAG(huart);
 800583e:	f8cd 8004 	str.w	r8, [sp, #4]
 8005842:	6819      	ldr	r1, [r3, #0]
 8005844:	9101      	str	r1, [sp, #4]
 8005846:	6859      	ldr	r1, [r3, #4]
 8005848:	9101      	str	r1, [sp, #4]
 800584a:	9901      	ldr	r1, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f103 010c 	add.w	r1, r3, #12
 8005850:	e851 1f00 	ldrex	r1, [r1]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005854:	f421 7190 	bic.w	r1, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005858:	330c      	adds	r3, #12
 800585a:	e843 1000 	strex	r0, r1, [r3]
 800585e:	b158      	cbz	r0, 8005878 <HAL_UART_Receive+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f102 030c 	add.w	r3, r2, #12
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	f102 000c 	add.w	r0, r2, #12
 8005870:	e840 3100 	strex	r1, r3, [r0]
 8005874:	2900      	cmp	r1, #0
 8005876:	d1f3      	bne.n	8005860 <HAL_UART_Receive+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005878:	f102 0314 	add.w	r3, r2, #20
 800587c:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005880:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005884:	f102 0014 	add.w	r0, r2, #20
 8005888:	e840 3100 	strex	r1, r3, [r0]
 800588c:	2900      	cmp	r1, #0
 800588e:	d1f3      	bne.n	8005878 <HAL_UART_Receive+0x13c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005890:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8005892:	2b01      	cmp	r3, #1
 8005894:	d022      	beq.n	80058dc <HAL_UART_Receive+0x1a0>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005896:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005898:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800589a:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 800589c:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
          __HAL_UNLOCK(huart);
 80058a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058a4:	6323      	str	r3, [r4, #48]	@ 0x30
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058a6:	6462      	str	r2, [r4, #68]	@ 0x44
        huart->RxState = HAL_UART_STATE_READY;
 80058a8:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 80058aa:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 80058ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 80058b0:	b003      	add	sp, #12
 80058b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058b6:	6923      	ldr	r3, [r4, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	f47f af63 	bne.w	8005784 <HAL_UART_Receive+0x48>
      pdata16bits = (uint16_t *) pData;
 80058be:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 80058c0:	461d      	mov	r5, r3
 80058c2:	e760      	b.n	8005786 <HAL_UART_Receive+0x4a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80058c4:	6922      	ldr	r2, [r4, #16]
 80058c6:	2a00      	cmp	r2, #0
 80058c8:	d197      	bne.n	80057fa <HAL_UART_Receive+0xbe>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	e797      	b.n	8005800 <HAL_UART_Receive+0xc4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058d6:	f826 3b02 	strh.w	r3, [r6], #2
        pdata16bits++;
 80058da:	e793      	b.n	8005804 <HAL_UART_Receive+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058dc:	f102 030c 	add.w	r3, r2, #12
 80058e0:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058e4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058e8:	f102 000c 	add.w	r0, r2, #12
 80058ec:	e840 3100 	strex	r1, r3, [r0]
 80058f0:	2900      	cmp	r1, #0
 80058f2:	d1f3      	bne.n	80058dc <HAL_UART_Receive+0x1a0>
 80058f4:	e7cf      	b.n	8005896 <HAL_UART_Receive+0x15a>
 80058f6:	bf00      	nop

080058f8 <memset>:
 80058f8:	4402      	add	r2, r0
 80058fa:	4603      	mov	r3, r0
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d100      	bne.n	8005902 <memset+0xa>
 8005900:	4770      	bx	lr
 8005902:	f803 1b01 	strb.w	r1, [r3], #1
 8005906:	e7f9      	b.n	80058fc <memset+0x4>

08005908 <__libc_init_array>:
 8005908:	b570      	push	{r4, r5, r6, lr}
 800590a:	4d0d      	ldr	r5, [pc, #52]	@ (8005940 <__libc_init_array+0x38>)
 800590c:	4c0d      	ldr	r4, [pc, #52]	@ (8005944 <__libc_init_array+0x3c>)
 800590e:	1b64      	subs	r4, r4, r5
 8005910:	10a4      	asrs	r4, r4, #2
 8005912:	2600      	movs	r6, #0
 8005914:	42a6      	cmp	r6, r4
 8005916:	d109      	bne.n	800592c <__libc_init_array+0x24>
 8005918:	4d0b      	ldr	r5, [pc, #44]	@ (8005948 <__libc_init_array+0x40>)
 800591a:	4c0c      	ldr	r4, [pc, #48]	@ (800594c <__libc_init_array+0x44>)
 800591c:	f000 f826 	bl	800596c <_init>
 8005920:	1b64      	subs	r4, r4, r5
 8005922:	10a4      	asrs	r4, r4, #2
 8005924:	2600      	movs	r6, #0
 8005926:	42a6      	cmp	r6, r4
 8005928:	d105      	bne.n	8005936 <__libc_init_array+0x2e>
 800592a:	bd70      	pop	{r4, r5, r6, pc}
 800592c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005930:	4798      	blx	r3
 8005932:	3601      	adds	r6, #1
 8005934:	e7ee      	b.n	8005914 <__libc_init_array+0xc>
 8005936:	f855 3b04 	ldr.w	r3, [r5], #4
 800593a:	4798      	blx	r3
 800593c:	3601      	adds	r6, #1
 800593e:	e7f2      	b.n	8005926 <__libc_init_array+0x1e>
 8005940:	08005ecc 	.word	0x08005ecc
 8005944:	08005ecc 	.word	0x08005ecc
 8005948:	08005ecc 	.word	0x08005ecc
 800594c:	08005ed0 	.word	0x08005ed0

08005950 <memcpy>:
 8005950:	440a      	add	r2, r1
 8005952:	4291      	cmp	r1, r2
 8005954:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005958:	d100      	bne.n	800595c <memcpy+0xc>
 800595a:	4770      	bx	lr
 800595c:	b510      	push	{r4, lr}
 800595e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005962:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005966:	4291      	cmp	r1, r2
 8005968:	d1f9      	bne.n	800595e <memcpy+0xe>
 800596a:	bd10      	pop	{r4, pc}

0800596c <_init>:
 800596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800596e:	bf00      	nop
 8005970:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005972:	bc08      	pop	{r3}
 8005974:	469e      	mov	lr, r3
 8005976:	4770      	bx	lr

08005978 <_fini>:
 8005978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800597a:	bf00      	nop
 800597c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800597e:	bc08      	pop	{r3}
 8005980:	469e      	mov	lr, r3
 8005982:	4770      	bx	lr
