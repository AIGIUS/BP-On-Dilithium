
stm32f407vgt6_ref.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd4  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000053c  08004f60  08004f60  00005f60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800549c  0800549c  00007018  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800549c  0800549c  0000649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054a4  080054a4  00007018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054a4  080054a4  000064a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054a8  080054a8  000064a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  080054ac  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007018  2**0
                  CONTENTS
 10 .bss          0000251c  20000018  20000018  00007018  2**3
                  ALLOC
 11 ._user_heap_stack 00008004  20002534  20002534  00007018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007018  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012ee3  00000000  00000000  00007048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002df7  00000000  00000000  00019f2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loclists 0000ae00  00000000  00000000  0001cd22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b00  00000000  00000000  00027b28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000d8a  00000000  00000000  00028628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002191a  00000000  00000000  000293b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000141be  00000000  00000000  0004accc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c41fc  00000000  00000000  0005ee8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  00123086  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00001f7c  00000000  00000000  001230cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  00125048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000018 	.word	0x20000018
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004f44 	.word	0x08004f44

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000001c 	.word	0x2000001c
 80001c4:	08004f44 	.word	0x08004f44

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b988 	b.w	8000500 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	468e      	mov	lr, r1
 8000210:	4604      	mov	r4, r0
 8000212:	4688      	mov	r8, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d962      	bls.n	80002e4 <__udivmoddi4+0xdc>
 800021e:	fab2 f682 	clz	r6, r2
 8000222:	b14e      	cbz	r6, 8000238 <__udivmoddi4+0x30>
 8000224:	f1c6 0320 	rsb	r3, r6, #32
 8000228:	fa01 f806 	lsl.w	r8, r1, r6
 800022c:	fa20 f303 	lsr.w	r3, r0, r3
 8000230:	40b7      	lsls	r7, r6
 8000232:	ea43 0808 	orr.w	r8, r3, r8
 8000236:	40b4      	lsls	r4, r6
 8000238:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800023c:	fa1f fc87 	uxth.w	ip, r7
 8000240:	fbb8 f1fe 	udiv	r1, r8, lr
 8000244:	0c23      	lsrs	r3, r4, #16
 8000246:	fb0e 8811 	mls	r8, lr, r1, r8
 800024a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024e:	fb01 f20c 	mul.w	r2, r1, ip
 8000252:	429a      	cmp	r2, r3
 8000254:	d909      	bls.n	800026a <__udivmoddi4+0x62>
 8000256:	18fb      	adds	r3, r7, r3
 8000258:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 800025c:	f080 80ea 	bcs.w	8000434 <__udivmoddi4+0x22c>
 8000260:	429a      	cmp	r2, r3
 8000262:	f240 80e7 	bls.w	8000434 <__udivmoddi4+0x22c>
 8000266:	3902      	subs	r1, #2
 8000268:	443b      	add	r3, r7
 800026a:	1a9a      	subs	r2, r3, r2
 800026c:	b2a3      	uxth	r3, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800027a:	fb00 fc0c 	mul.w	ip, r0, ip
 800027e:	459c      	cmp	ip, r3
 8000280:	d909      	bls.n	8000296 <__udivmoddi4+0x8e>
 8000282:	18fb      	adds	r3, r7, r3
 8000284:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000288:	f080 80d6 	bcs.w	8000438 <__udivmoddi4+0x230>
 800028c:	459c      	cmp	ip, r3
 800028e:	f240 80d3 	bls.w	8000438 <__udivmoddi4+0x230>
 8000292:	443b      	add	r3, r7
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029a:	eba3 030c 	sub.w	r3, r3, ip
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40f3      	lsrs	r3, r6
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xb6>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb0>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa2>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x14c>
 80002c6:	4573      	cmp	r3, lr
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xc8>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 8105 	bhi.w	80004da <__udivmoddi4+0x2d2>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4690      	mov	r8, r2
 80002da:	2d00      	cmp	r5, #0
 80002dc:	d0e5      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002de:	e9c5 4800 	strd	r4, r8, [r5]
 80002e2:	e7e2      	b.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f000 8090 	beq.w	800040a <__udivmoddi4+0x202>
 80002ea:	fab2 f682 	clz	r6, r2
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	f040 80a4 	bne.w	800043c <__udivmoddi4+0x234>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	0c03      	lsrs	r3, r0, #16
 80002f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002fc:	b280      	uxth	r0, r0
 80002fe:	b2bc      	uxth	r4, r7
 8000300:	2101      	movs	r1, #1
 8000302:	fbb2 fcfe 	udiv	ip, r2, lr
 8000306:	fb0e 221c 	mls	r2, lr, ip, r2
 800030a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030e:	fb04 f20c 	mul.w	r2, r4, ip
 8000312:	429a      	cmp	r2, r3
 8000314:	d907      	bls.n	8000326 <__udivmoddi4+0x11e>
 8000316:	18fb      	adds	r3, r7, r3
 8000318:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800031c:	d202      	bcs.n	8000324 <__udivmoddi4+0x11c>
 800031e:	429a      	cmp	r2, r3
 8000320:	f200 80e0 	bhi.w	80004e4 <__udivmoddi4+0x2dc>
 8000324:	46c4      	mov	ip, r8
 8000326:	1a9b      	subs	r3, r3, r2
 8000328:	fbb3 f2fe 	udiv	r2, r3, lr
 800032c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000330:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000334:	fb02 f404 	mul.w	r4, r2, r4
 8000338:	429c      	cmp	r4, r3
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x144>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x142>
 8000344:	429c      	cmp	r4, r3
 8000346:	f200 80ca 	bhi.w	80004de <__udivmoddi4+0x2d6>
 800034a:	4602      	mov	r2, r0
 800034c:	1b1b      	subs	r3, r3, r4
 800034e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x98>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa0e f401 	lsl.w	r4, lr, r1
 8000364:	fa20 f306 	lsr.w	r3, r0, r6
 8000368:	fa2e fe06 	lsr.w	lr, lr, r6
 800036c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000370:	4323      	orrs	r3, r4
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	fa1f fc87 	uxth.w	ip, r7
 800037a:	fbbe f0f9 	udiv	r0, lr, r9
 800037e:	0c1c      	lsrs	r4, r3, #16
 8000380:	fb09 ee10 	mls	lr, r9, r0, lr
 8000384:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000388:	fb00 fe0c 	mul.w	lr, r0, ip
 800038c:	45a6      	cmp	lr, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d909      	bls.n	80003a8 <__udivmoddi4+0x1a0>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800039a:	f080 809c 	bcs.w	80004d6 <__udivmoddi4+0x2ce>
 800039e:	45a6      	cmp	lr, r4
 80003a0:	f240 8099 	bls.w	80004d6 <__udivmoddi4+0x2ce>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443c      	add	r4, r7
 80003a8:	eba4 040e 	sub.w	r4, r4, lr
 80003ac:	fa1f fe83 	uxth.w	lr, r3
 80003b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b4:	fb09 4413 	mls	r4, r9, r3, r4
 80003b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c0:	45a4      	cmp	ip, r4
 80003c2:	d908      	bls.n	80003d6 <__udivmoddi4+0x1ce>
 80003c4:	193c      	adds	r4, r7, r4
 80003c6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ca:	f080 8082 	bcs.w	80004d2 <__udivmoddi4+0x2ca>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d97f      	bls.n	80004d2 <__udivmoddi4+0x2ca>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	fba0 ec02 	umull	lr, ip, r0, r2
 80003e2:	4564      	cmp	r4, ip
 80003e4:	4673      	mov	r3, lr
 80003e6:	46e1      	mov	r9, ip
 80003e8:	d362      	bcc.n	80004b0 <__udivmoddi4+0x2a8>
 80003ea:	d05f      	beq.n	80004ac <__udivmoddi4+0x2a4>
 80003ec:	b15d      	cbz	r5, 8000406 <__udivmoddi4+0x1fe>
 80003ee:	ebb8 0203 	subs.w	r2, r8, r3
 80003f2:	eb64 0409 	sbc.w	r4, r4, r9
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	fa22 f301 	lsr.w	r3, r2, r1
 80003fe:	431e      	orrs	r6, r3
 8000400:	40cc      	lsrs	r4, r1
 8000402:	e9c5 6400 	strd	r6, r4, [r5]
 8000406:	2100      	movs	r1, #0
 8000408:	e74f      	b.n	80002aa <__udivmoddi4+0xa2>
 800040a:	fbb1 fcf2 	udiv	ip, r1, r2
 800040e:	0c01      	lsrs	r1, r0, #16
 8000410:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000414:	b280      	uxth	r0, r0
 8000416:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800041a:	463b      	mov	r3, r7
 800041c:	4638      	mov	r0, r7
 800041e:	463c      	mov	r4, r7
 8000420:	46b8      	mov	r8, r7
 8000422:	46be      	mov	lr, r7
 8000424:	2620      	movs	r6, #32
 8000426:	fbb1 f1f7 	udiv	r1, r1, r7
 800042a:	eba2 0208 	sub.w	r2, r2, r8
 800042e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000432:	e766      	b.n	8000302 <__udivmoddi4+0xfa>
 8000434:	4601      	mov	r1, r0
 8000436:	e718      	b.n	800026a <__udivmoddi4+0x62>
 8000438:	4610      	mov	r0, r2
 800043a:	e72c      	b.n	8000296 <__udivmoddi4+0x8e>
 800043c:	f1c6 0220 	rsb	r2, r6, #32
 8000440:	fa2e f302 	lsr.w	r3, lr, r2
 8000444:	40b7      	lsls	r7, r6
 8000446:	40b1      	lsls	r1, r6
 8000448:	fa20 f202 	lsr.w	r2, r0, r2
 800044c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000450:	430a      	orrs	r2, r1
 8000452:	fbb3 f8fe 	udiv	r8, r3, lr
 8000456:	b2bc      	uxth	r4, r7
 8000458:	fb0e 3318 	mls	r3, lr, r8, r3
 800045c:	0c11      	lsrs	r1, r2, #16
 800045e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000462:	fb08 f904 	mul.w	r9, r8, r4
 8000466:	40b0      	lsls	r0, r6
 8000468:	4589      	cmp	r9, r1
 800046a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046e:	b280      	uxth	r0, r0
 8000470:	d93e      	bls.n	80004f0 <__udivmoddi4+0x2e8>
 8000472:	1879      	adds	r1, r7, r1
 8000474:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000478:	d201      	bcs.n	800047e <__udivmoddi4+0x276>
 800047a:	4589      	cmp	r9, r1
 800047c:	d81f      	bhi.n	80004be <__udivmoddi4+0x2b6>
 800047e:	eba1 0109 	sub.w	r1, r1, r9
 8000482:	fbb1 f9fe 	udiv	r9, r1, lr
 8000486:	fb09 f804 	mul.w	r8, r9, r4
 800048a:	fb0e 1119 	mls	r1, lr, r9, r1
 800048e:	b292      	uxth	r2, r2
 8000490:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000494:	4542      	cmp	r2, r8
 8000496:	d229      	bcs.n	80004ec <__udivmoddi4+0x2e4>
 8000498:	18ba      	adds	r2, r7, r2
 800049a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049e:	d2c4      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a0:	4542      	cmp	r2, r8
 80004a2:	d2c2      	bcs.n	800042a <__udivmoddi4+0x222>
 80004a4:	f1a9 0102 	sub.w	r1, r9, #2
 80004a8:	443a      	add	r2, r7
 80004aa:	e7be      	b.n	800042a <__udivmoddi4+0x222>
 80004ac:	45f0      	cmp	r8, lr
 80004ae:	d29d      	bcs.n	80003ec <__udivmoddi4+0x1e4>
 80004b0:	ebbe 0302 	subs.w	r3, lr, r2
 80004b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b8:	3801      	subs	r0, #1
 80004ba:	46e1      	mov	r9, ip
 80004bc:	e796      	b.n	80003ec <__udivmoddi4+0x1e4>
 80004be:	eba7 0909 	sub.w	r9, r7, r9
 80004c2:	4449      	add	r1, r9
 80004c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004cc:	fb09 f804 	mul.w	r8, r9, r4
 80004d0:	e7db      	b.n	800048a <__udivmoddi4+0x282>
 80004d2:	4673      	mov	r3, lr
 80004d4:	e77f      	b.n	80003d6 <__udivmoddi4+0x1ce>
 80004d6:	4650      	mov	r0, sl
 80004d8:	e766      	b.n	80003a8 <__udivmoddi4+0x1a0>
 80004da:	4608      	mov	r0, r1
 80004dc:	e6fd      	b.n	80002da <__udivmoddi4+0xd2>
 80004de:	443b      	add	r3, r7
 80004e0:	3a02      	subs	r2, #2
 80004e2:	e733      	b.n	800034c <__udivmoddi4+0x144>
 80004e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e8:	443b      	add	r3, r7
 80004ea:	e71c      	b.n	8000326 <__udivmoddi4+0x11e>
 80004ec:	4649      	mov	r1, r9
 80004ee:	e79c      	b.n	800042a <__udivmoddi4+0x222>
 80004f0:	eba1 0109 	sub.w	r1, r1, r9
 80004f4:	46c4      	mov	ip, r8
 80004f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004fa:	fb09 f804 	mul.w	r8, r9, r4
 80004fe:	e7c4      	b.n	800048a <__udivmoddi4+0x282>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <shake128_inc_init>:
        outlen -= len;
        s_inc[25] = r - len;
    }
}

void shake128_inc_init(shake128incctx *state) {
 8000504:	b510      	push	{r4, lr}
        s_inc[i] = 0;
 8000506:	22c8      	movs	r2, #200	@ 0xc8
 8000508:	2100      	movs	r1, #0
void shake128_inc_init(shake128incctx *state) {
 800050a:	4604      	mov	r4, r0
        s_inc[i] = 0;
 800050c:	f004 fce0 	bl	8004ed0 <memset>
    s_inc[25] = 0;
 8000510:	2200      	movs	r2, #0
 8000512:	2300      	movs	r3, #0
 8000514:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_init(state->ctx);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8000518:	bd10      	pop	{r4, pc}
 800051a:	bf00      	nop

0800051c <shake128_inc_absorb>:

void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 800051c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000520:	4615      	mov	r5, r2
 8000522:	4604      	mov	r4, r0
    while (mlen + s_inc[25] >= r) {
 8000524:	e9d0 2032 	ldrd	r2, r0, [r0, #200]	@ 0xc8
 8000528:	18ab      	adds	r3, r5, r2
 800052a:	f140 0000 	adc.w	r0, r0, #0
 800052e:	2ba8      	cmp	r3, #168	@ 0xa8
 8000530:	f170 0000 	sbcs.w	r0, r0, #0
void shake128_inc_absorb(shake128incctx *state, const uint8_t *input, size_t inlen) {
 8000534:	460e      	mov	r6, r1
    while (mlen + s_inc[25] >= r) {
 8000536:	d31f      	bcc.n	8000578 <shake128_inc_absorb+0x5c>
        s_inc[25] = 0;
 8000538:	f04f 0800 	mov.w	r8, #0
 800053c:	f04f 0900 	mov.w	r9, #0
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8000540:	f1c2 03a8 	rsb	r3, r2, #168	@ 0xa8
 8000544:	4631      	mov	r1, r6
 8000546:	4620      	mov	r0, r4
 8000548:	f000 fa3e 	bl	80009c8 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 800054c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
        KeccakF1600_StatePermute(s_inc);
 8000550:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 8000552:	f1a3 02a8 	sub.w	r2, r3, #168	@ 0xa8
        s_inc[25] = 0;
 8000556:	e9c4 8932 	strd	r8, r9, [r4, #200]	@ 0xc8
        m += r - s_inc[25];
 800055a:	f1c3 03a8 	rsb	r3, r3, #168	@ 0xa8
        mlen -= (size_t)(r - s_inc[25]);
 800055e:	4415      	add	r5, r2
        m += r - s_inc[25];
 8000560:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 8000562:	f000 fa5b 	bl	8000a1c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8000566:	e9d4 2032 	ldrd	r2, r0, [r4, #200]	@ 0xc8
 800056a:	1953      	adds	r3, r2, r5
 800056c:	f140 0000 	adc.w	r0, r0, #0
 8000570:	2ba8      	cmp	r3, #168	@ 0xa8
 8000572:	f170 0000 	sbcs.w	r0, r0, #0
 8000576:	d2e3      	bcs.n	8000540 <shake128_inc_absorb+0x24>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8000578:	462b      	mov	r3, r5
 800057a:	4631      	mov	r1, r6
 800057c:	4620      	mov	r0, r4
 800057e:	f000 fa23 	bl	80009c8 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8000582:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	@ 0xc8
 8000586:	195b      	adds	r3, r3, r5
 8000588:	f142 0200 	adc.w	r2, r2, #0
 800058c:	e9c4 3232 	strd	r3, r2, [r4, #200]	@ 0xc8
    keccak_inc_absorb(state->ctx, SHAKE128_RATE, input, inlen);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8000590:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

08000594 <shake128_inc_finalize>:

void shake128_inc_finalize(shake128incctx *state) {
 8000594:	b510      	push	{r4, lr}
    if(s_inc[25] == r-1){
 8000596:	e9d0 2132 	ldrd	r2, r1, [r0, #200]	@ 0xc8
void shake128_inc_finalize(shake128incctx *state) {
 800059a:	b082      	sub	sp, #8
 800059c:	231f      	movs	r3, #31
 800059e:	f88d 3007 	strb.w	r3, [sp, #7]
    if(s_inc[25] == r-1){
 80005a2:	f1a2 03a7 	sub.w	r3, r2, #167	@ 0xa7
 80005a6:	430b      	orrs	r3, r1
void shake128_inc_finalize(shake128incctx *state) {
 80005a8:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 80005aa:	d014      	beq.n	80005d6 <shake128_inc_finalize+0x42>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80005ac:	2301      	movs	r3, #1
 80005ae:	f10d 0107 	add.w	r1, sp, #7
 80005b2:	f000 fa09 	bl	80009c8 <KeccakF1600_StateXORBytes>
      p = 128;
 80005b6:	2080      	movs	r0, #128	@ 0x80
 80005b8:	f88d 0007 	strb.w	r0, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 80005bc:	2301      	movs	r3, #1
 80005be:	22a7      	movs	r2, #167	@ 0xa7
 80005c0:	f10d 0107 	add.w	r1, sp, #7
 80005c4:	4620      	mov	r0, r4
 80005c6:	f000 f9ff 	bl	80009c8 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 80005ca:	2200      	movs	r2, #0
 80005cc:	2300      	movs	r3, #0
 80005ce:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_finalize(state->ctx, SHAKE128_RATE, 0x1F);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80005d2:	b002      	add	sp, #8
 80005d4:	bd10      	pop	{r4, pc}
      p |= 128;
 80005d6:	219f      	movs	r1, #159	@ 0x9f
 80005d8:	f88d 1007 	strb.w	r1, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80005dc:	2301      	movs	r3, #1
 80005de:	22a7      	movs	r2, #167	@ 0xa7
 80005e0:	f10d 0107 	add.w	r1, sp, #7
 80005e4:	f000 f9f0 	bl	80009c8 <KeccakF1600_StateXORBytes>
 80005e8:	e7ef      	b.n	80005ca <shake128_inc_finalize+0x36>
 80005ea:	bf00      	nop

080005ec <shake128_inc_squeeze>:

void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 80005ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(outlen < s_inc[25])
 80005f0:	e9d2 6932 	ldrd	r6, r9, [r2, #200]	@ 0xc8
 80005f4:	f04f 0800 	mov.w	r8, #0
 80005f8:	42b1      	cmp	r1, r6
 80005fa:	eb78 0309 	sbcs.w	r3, r8, r9
void shake128_inc_squeeze(uint8_t *output, size_t outlen, shake128incctx *state) {
 80005fe:	4615      	mov	r5, r2
 8000600:	460c      	mov	r4, r1
 8000602:	4607      	mov	r7, r0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8000604:	f1c6 02a8 	rsb	r2, r6, #168	@ 0xa8
    if(outlen < s_inc[25])
 8000608:	d20d      	bcs.n	8000626 <shake128_inc_squeeze+0x3a>
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800060a:	460b      	mov	r3, r1
 800060c:	4601      	mov	r1, r0
 800060e:	4628      	mov	r0, r5
 8000610:	f000 f9b2 	bl	8000978 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 8000614:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	@ 0xc8
 8000618:	1b1b      	subs	r3, r3, r4
 800061a:	f162 0200 	sbc.w	r2, r2, #0
 800061e:	e9c5 3232 	strd	r3, r2, [r5, #200]	@ 0xc8
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE128_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8000622:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8000626:	4633      	mov	r3, r6
 8000628:	4601      	mov	r1, r0
 800062a:	4628      	mov	r0, r5
 800062c:	f000 f9a4 	bl	8000978 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 8000630:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 8000634:	1b9b      	subs	r3, r3, r6
 8000636:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
 800063a:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
    h += len;
 800063e:	4437      	add	r7, r6
    s_inc[25] -= len;
 8000640:	eb63 0309 	sbc.w	r3, r3, r9
    while (outlen > 0) {
 8000644:	1ba6      	subs	r6, r4, r6
    s_inc[25] -= len;
 8000646:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    while (outlen > 0) {
 800064a:	d0ea      	beq.n	8000622 <shake128_inc_squeeze+0x36>
        KeccakF1600_StatePermute(s_inc);
 800064c:	4628      	mov	r0, r5
 800064e:	f000 f9e5 	bl	8000a1c <KeccakF1600_StatePermute>
        if(outlen < r)
 8000652:	2ea8      	cmp	r6, #168	@ 0xa8
 8000654:	4634      	mov	r4, r6
 8000656:	bf28      	it	cs
 8000658:	24a8      	movcs	r4, #168	@ 0xa8
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 800065a:	4623      	mov	r3, r4
 800065c:	4639      	mov	r1, r7
 800065e:	2200      	movs	r2, #0
 8000660:	4628      	mov	r0, r5
 8000662:	f000 f989 	bl	8000978 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 8000666:	f1c4 03a8 	rsb	r3, r4, #168	@ 0xa8
    while (outlen > 0) {
 800066a:	1b36      	subs	r6, r6, r4
        s_inc[25] = r - len;
 800066c:	e9c5 3832 	strd	r3, r8, [r5, #200]	@ 0xc8
        h += len;
 8000670:	4427      	add	r7, r4
    while (outlen > 0) {
 8000672:	d1eb      	bne.n	800064c <shake128_inc_squeeze+0x60>
}
 8000674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08000678 <shake128_inc_ctx_release>:

void shake128_inc_ctx_clone(shake128incctx* dest, const shake128incctx *src) {
    memcpy(dest, src, sizeof(shake128incctx));
}

void shake128_inc_ctx_release(shake128incctx *state) {
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <shake256_inc_init>:
    (void) state;
}

void shake256_inc_init(shake256incctx *state) {
 800067c:	b510      	push	{r4, lr}
 800067e:	22c8      	movs	r2, #200	@ 0xc8
 8000680:	2100      	movs	r1, #0
 8000682:	4604      	mov	r4, r0
 8000684:	f004 fc24 	bl	8004ed0 <memset>
 8000688:	2200      	movs	r2, #0
 800068a:	2300      	movs	r3, #0
 800068c:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
 8000690:	bd10      	pop	{r4, pc}
 8000692:	bf00      	nop

08000694 <shake256_inc_absorb>:
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}

void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 8000694:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 8000698:	4615      	mov	r5, r2
 800069a:	4604      	mov	r4, r0
    while (mlen + s_inc[25] >= r) {
 800069c:	e9d0 2032 	ldrd	r2, r0, [r0, #200]	@ 0xc8
 80006a0:	18ab      	adds	r3, r5, r2
 80006a2:	f140 0000 	adc.w	r0, r0, #0
 80006a6:	2b88      	cmp	r3, #136	@ 0x88
 80006a8:	f170 0000 	sbcs.w	r0, r0, #0
void shake256_inc_absorb(shake256incctx *state, const uint8_t *input, size_t inlen) {
 80006ac:	460e      	mov	r6, r1
    while (mlen + s_inc[25] >= r) {
 80006ae:	d31f      	bcc.n	80006f0 <shake256_inc_absorb+0x5c>
        s_inc[25] = 0;
 80006b0:	f04f 0800 	mov.w	r8, #0
 80006b4:	f04f 0900 	mov.w	r9, #0
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 80006b8:	f1c2 0388 	rsb	r3, r2, #136	@ 0x88
 80006bc:	4631      	mov	r1, r6
 80006be:	4620      	mov	r0, r4
 80006c0:	f000 f982 	bl	80009c8 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 80006c4:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
        KeccakF1600_StatePermute(s_inc);
 80006c8:	4620      	mov	r0, r4
        mlen -= (size_t)(r - s_inc[25]);
 80006ca:	f1a3 0288 	sub.w	r2, r3, #136	@ 0x88
        s_inc[25] = 0;
 80006ce:	e9c4 8932 	strd	r8, r9, [r4, #200]	@ 0xc8
        m += r - s_inc[25];
 80006d2:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
        mlen -= (size_t)(r - s_inc[25]);
 80006d6:	4415      	add	r5, r2
        m += r - s_inc[25];
 80006d8:	441e      	add	r6, r3
        KeccakF1600_StatePermute(s_inc);
 80006da:	f000 f99f 	bl	8000a1c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 80006de:	e9d4 2032 	ldrd	r2, r0, [r4, #200]	@ 0xc8
 80006e2:	1953      	adds	r3, r2, r5
 80006e4:	f140 0000 	adc.w	r0, r0, #0
 80006e8:	2b88      	cmp	r3, #136	@ 0x88
 80006ea:	f170 0000 	sbcs.w	r0, r0, #0
 80006ee:	d2e3      	bcs.n	80006b8 <shake256_inc_absorb+0x24>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 80006f0:	462b      	mov	r3, r5
 80006f2:	4631      	mov	r1, r6
 80006f4:	4620      	mov	r0, r4
 80006f6:	f000 f967 	bl	80009c8 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 80006fa:	e9d4 3232 	ldrd	r3, r2, [r4, #200]	@ 0xc8
 80006fe:	195b      	adds	r3, r3, r5
 8000700:	f142 0200 	adc.w	r2, r2, #0
 8000704:	e9c4 3232 	strd	r3, r2, [r4, #200]	@ 0xc8
    keccak_inc_absorb(state->ctx, SHAKE256_RATE, input, inlen);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 8000708:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}

0800070c <shake256_inc_finalize>:

void shake256_inc_finalize(shake256incctx *state) {
 800070c:	b510      	push	{r4, lr}
    if(s_inc[25] == r-1){
 800070e:	e9d0 2132 	ldrd	r2, r1, [r0, #200]	@ 0xc8
void shake256_inc_finalize(shake256incctx *state) {
 8000712:	b082      	sub	sp, #8
 8000714:	231f      	movs	r3, #31
 8000716:	f88d 3007 	strb.w	r3, [sp, #7]
    if(s_inc[25] == r-1){
 800071a:	f1a2 0387 	sub.w	r3, r2, #135	@ 0x87
 800071e:	430b      	orrs	r3, r1
void shake256_inc_finalize(shake256incctx *state) {
 8000720:	4604      	mov	r4, r0
    if(s_inc[25] == r-1){
 8000722:	d014      	beq.n	800074e <shake256_inc_finalize+0x42>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8000724:	2301      	movs	r3, #1
 8000726:	f10d 0107 	add.w	r1, sp, #7
 800072a:	f000 f94d 	bl	80009c8 <KeccakF1600_StateXORBytes>
      p = 128;
 800072e:	2080      	movs	r0, #128	@ 0x80
 8000730:	f88d 0007 	strb.w	r0, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8000734:	2301      	movs	r3, #1
 8000736:	2287      	movs	r2, #135	@ 0x87
 8000738:	f10d 0107 	add.w	r1, sp, #7
 800073c:	4620      	mov	r0, r4
 800073e:	f000 f943 	bl	80009c8 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 8000742:	2200      	movs	r2, #0
 8000744:	2300      	movs	r3, #0
 8000746:	e9c4 2332 	strd	r2, r3, [r4, #200]	@ 0xc8
    keccak_inc_finalize(state->ctx, SHAKE256_RATE, 0x1F);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800074a:	b002      	add	sp, #8
 800074c:	bd10      	pop	{r4, pc}
      p |= 128;
 800074e:	219f      	movs	r1, #159	@ 0x9f
 8000750:	f88d 1007 	strb.w	r1, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 8000754:	2301      	movs	r3, #1
 8000756:	2287      	movs	r2, #135	@ 0x87
 8000758:	f10d 0107 	add.w	r1, sp, #7
 800075c:	f000 f934 	bl	80009c8 <KeccakF1600_StateXORBytes>
 8000760:	e7ef      	b.n	8000742 <shake256_inc_finalize+0x36>
 8000762:	bf00      	nop

08000764 <shake256_inc_squeeze>:

void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8000764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    if(outlen < s_inc[25])
 8000768:	e9d2 6932 	ldrd	r6, r9, [r2, #200]	@ 0xc8
 800076c:	f04f 0800 	mov.w	r8, #0
 8000770:	42b1      	cmp	r1, r6
 8000772:	eb78 0309 	sbcs.w	r3, r8, r9
void shake256_inc_squeeze(uint8_t *output, size_t outlen, shake256incctx *state) {
 8000776:	4615      	mov	r5, r2
 8000778:	460c      	mov	r4, r1
 800077a:	4607      	mov	r7, r0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800077c:	f1c6 0288 	rsb	r2, r6, #136	@ 0x88
    if(outlen < s_inc[25])
 8000780:	d20d      	bcs.n	800079e <shake256_inc_squeeze+0x3a>
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 8000782:	460b      	mov	r3, r1
 8000784:	4601      	mov	r1, r0
 8000786:	4628      	mov	r0, r5
 8000788:	f000 f8f6 	bl	8000978 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 800078c:	e9d5 3232 	ldrd	r3, r2, [r5, #200]	@ 0xc8
 8000790:	1b1b      	subs	r3, r3, r4
 8000792:	f162 0200 	sbc.w	r2, r2, #0
 8000796:	e9c5 3232 	strd	r3, r2, [r5, #200]	@ 0xc8
    keccak_inc_squeeze(output, outlen, state->ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 800079a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 800079e:	4633      	mov	r3, r6
 80007a0:	4601      	mov	r1, r0
 80007a2:	4628      	mov	r0, r5
 80007a4:	f000 f8e8 	bl	8000978 <KeccakF1600_StateExtractBytes>
    s_inc[25] -= len;
 80007a8:	f8d5 30c8 	ldr.w	r3, [r5, #200]	@ 0xc8
 80007ac:	1b9b      	subs	r3, r3, r6
 80007ae:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
 80007b2:	f8d5 30cc 	ldr.w	r3, [r5, #204]	@ 0xcc
    h += len;
 80007b6:	4437      	add	r7, r6
    s_inc[25] -= len;
 80007b8:	eb63 0309 	sbc.w	r3, r3, r9
    while (outlen > 0) {
 80007bc:	1ba6      	subs	r6, r4, r6
    s_inc[25] -= len;
 80007be:	f8c5 30cc 	str.w	r3, [r5, #204]	@ 0xcc
    while (outlen > 0) {
 80007c2:	d0ea      	beq.n	800079a <shake256_inc_squeeze+0x36>
        KeccakF1600_StatePermute(s_inc);
 80007c4:	4628      	mov	r0, r5
 80007c6:	f000 f929 	bl	8000a1c <KeccakF1600_StatePermute>
        if(outlen < r)
 80007ca:	2e88      	cmp	r6, #136	@ 0x88
 80007cc:	4634      	mov	r4, r6
 80007ce:	bf28      	it	cs
 80007d0:	2488      	movcs	r4, #136	@ 0x88
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 80007d2:	4623      	mov	r3, r4
 80007d4:	4639      	mov	r1, r7
 80007d6:	2200      	movs	r2, #0
 80007d8:	4628      	mov	r0, r5
 80007da:	f000 f8cd 	bl	8000978 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 80007de:	f1c4 0388 	rsb	r3, r4, #136	@ 0x88
    while (outlen > 0) {
 80007e2:	1b36      	subs	r6, r6, r4
        s_inc[25] = r - len;
 80007e4:	e9c5 3832 	strd	r3, r8, [r5, #200]	@ 0xc8
        h += len;
 80007e8:	4427      	add	r7, r4
    while (outlen > 0) {
 80007ea:	d1eb      	bne.n	80007c4 <shake256_inc_squeeze+0x60>
}
 80007ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080007f0 <shake256_inc_ctx_release>:

void shake256_inc_ctx_clone(shake256incctx* dest, const shake256incctx *src) {
    memcpy(dest, src, sizeof(shake256incctx));
}

void shake256_inc_ctx_release(shake256incctx *state) {
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <shake256>:
 *              - const uint8_t *input: pointer to input
 *              - size_t inlen:         length of input in bytes
 **************************************************/
void shake256(uint8_t *output, size_t outlen,
    const uint8_t *input, size_t inlen)
{
 80007f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80007f8:	b0b7      	sub	sp, #220	@ 0xdc
 80007fa:	461c      	mov	r4, r3
 80007fc:	4606      	mov	r6, r0
 80007fe:	460d      	mov	r5, r1
 8000800:	4617      	mov	r7, r2
        s_inc[i] = 0;
 8000802:	2100      	movs	r1, #0
 8000804:	22c8      	movs	r2, #200	@ 0xc8
 8000806:	a802      	add	r0, sp, #8
 8000808:	f004 fb62 	bl	8004ed0 <memset>
    s_inc[25] = 0;
 800080c:	f04f 0800 	mov.w	r8, #0
 8000810:	f04f 0900 	mov.w	r9, #0
    while (mlen + s_inc[25] >= r) {
 8000814:	2c87      	cmp	r4, #135	@ 0x87
    s_inc[25] = 0;
 8000816:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
    while (mlen + s_inc[25] >= r) {
 800081a:	f04f 0200 	mov.w	r2, #0
 800081e:	d91a      	bls.n	8000856 <shake256+0x62>
        KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], r-s_inc[25]);
 8000820:	4639      	mov	r1, r7
 8000822:	f1c2 0388 	rsb	r3, r2, #136	@ 0x88
 8000826:	a802      	add	r0, sp, #8
 8000828:	f000 f8ce 	bl	80009c8 <KeccakF1600_StateXORBytes>
        mlen -= (size_t)(r - s_inc[25]);
 800082c:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
        KeccakF1600_StatePermute(s_inc);
 800082e:	a802      	add	r0, sp, #8
        mlen -= (size_t)(r - s_inc[25]);
 8000830:	f1a3 0288 	sub.w	r2, r3, #136	@ 0x88
        m += r - s_inc[25];
 8000834:	f1c3 0388 	rsb	r3, r3, #136	@ 0x88
        mlen -= (size_t)(r - s_inc[25]);
 8000838:	4414      	add	r4, r2
        m += r - s_inc[25];
 800083a:	441f      	add	r7, r3
        s_inc[25] = 0;
 800083c:	e9cd 8934 	strd	r8, r9, [sp, #208]	@ 0xd0
        KeccakF1600_StatePermute(s_inc);
 8000840:	f000 f8ec 	bl	8000a1c <KeccakF1600_StatePermute>
    while (mlen + s_inc[25] >= r) {
 8000844:	e9dd 2334 	ldrd	r2, r3, [sp, #208]	@ 0xd0
 8000848:	1911      	adds	r1, r2, r4
 800084a:	f143 0300 	adc.w	r3, r3, #0
 800084e:	2988      	cmp	r1, #136	@ 0x88
 8000850:	f173 0300 	sbcs.w	r3, r3, #0
 8000854:	d2e4      	bcs.n	8000820 <shake256+0x2c>
    KeccakF1600_StateXORBytes(s_inc, m, s_inc[25], mlen);
 8000856:	4639      	mov	r1, r7
 8000858:	4623      	mov	r3, r4
 800085a:	a802      	add	r0, sp, #8
 800085c:	f000 f8b4 	bl	80009c8 <KeccakF1600_StateXORBytes>
    s_inc[25] += mlen;
 8000860:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8000862:	18e2      	adds	r2, r4, r3
 8000864:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8000866:	9234      	str	r2, [sp, #208]	@ 0xd0
 8000868:	f04f 011f 	mov.w	r1, #31
 800086c:	f143 0300 	adc.w	r3, r3, #0
 8000870:	f88d 1007 	strb.w	r1, [sp, #7]
    if(s_inc[25] == r-1){
 8000874:	f1a2 0187 	sub.w	r1, r2, #135	@ 0x87
 8000878:	4319      	orrs	r1, r3
    s_inc[25] += mlen;
 800087a:	9335      	str	r3, [sp, #212]	@ 0xd4
    if(s_inc[25] == r-1){
 800087c:	d032      	beq.n	80008e4 <shake256+0xf0>
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 800087e:	2301      	movs	r3, #1
 8000880:	f10d 0107 	add.w	r1, sp, #7
 8000884:	a802      	add	r0, sp, #8
 8000886:	f000 f89f 	bl	80009c8 <KeccakF1600_StateXORBytes>
      p = 128;
 800088a:	2380      	movs	r3, #128	@ 0x80
 800088c:	f88d 3007 	strb.w	r3, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, r-1, 1);
 8000890:	f10d 0107 	add.w	r1, sp, #7
 8000894:	2301      	movs	r3, #1
 8000896:	2287      	movs	r2, #135	@ 0x87
 8000898:	a802      	add	r0, sp, #8
 800089a:	f000 f895 	bl	80009c8 <KeccakF1600_StateXORBytes>
    s_inc[25] = 0;
 800089e:	2200      	movs	r2, #0
 80008a0:	2300      	movs	r3, #0
 80008a2:	e9cd 2334 	strd	r2, r3, [sp, #208]	@ 0xd0
    KeccakF1600_StateExtractBytes(s_inc, h, r-s_inc[25], len);
 80008a6:	4631      	mov	r1, r6
 80008a8:	2300      	movs	r3, #0
 80008aa:	2288      	movs	r2, #136	@ 0x88
 80008ac:	a802      	add	r0, sp, #8
 80008ae:	f000 f863 	bl	8000978 <KeccakF1600_StateExtractBytes>
    while (outlen > 0) {
 80008b2:	b1a5      	cbz	r5, 80008de <shake256+0xea>
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 80008b4:	2700      	movs	r7, #0
        KeccakF1600_StatePermute(s_inc);
 80008b6:	a802      	add	r0, sp, #8
 80008b8:	f000 f8b0 	bl	8000a1c <KeccakF1600_StatePermute>
        if(outlen < r)
 80008bc:	2d88      	cmp	r5, #136	@ 0x88
 80008be:	462c      	mov	r4, r5
 80008c0:	bf28      	it	cs
 80008c2:	2488      	movcs	r4, #136	@ 0x88
        KeccakF1600_StateExtractBytes(s_inc, h, 0, len);
 80008c4:	4623      	mov	r3, r4
 80008c6:	4631      	mov	r1, r6
 80008c8:	2200      	movs	r2, #0
 80008ca:	a802      	add	r0, sp, #8
 80008cc:	f000 f854 	bl	8000978 <KeccakF1600_StateExtractBytes>
        s_inc[25] = r - len;
 80008d0:	f1c4 0388 	rsb	r3, r4, #136	@ 0x88
    while (outlen > 0) {
 80008d4:	1b2d      	subs	r5, r5, r4
        s_inc[25] = r - len;
 80008d6:	e9cd 3734 	strd	r3, r7, [sp, #208]	@ 0xd0
        h += len;
 80008da:	4426      	add	r6, r4
    while (outlen > 0) {
 80008dc:	d1eb      	bne.n	80008b6 <shake256+0xc2>
  keccak_inc_squeeze(output, outlen, state.ctx, SHAKE256_RATE);
#ifdef PROFILE_HASHING
  uint64_t t1 = hal_get_time();
  hash_cycles += (t1-t0);
#endif
}
 80008de:	b037      	add	sp, #220	@ 0xdc
 80008e0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      p |= 128;
 80008e4:	229f      	movs	r2, #159	@ 0x9f
 80008e6:	f88d 2007 	strb.w	r2, [sp, #7]
      KeccakF1600_StateXORBytes(s_inc, &p, s_inc[25], 1);
 80008ea:	2301      	movs	r3, #1
 80008ec:	2287      	movs	r2, #135	@ 0x87
 80008ee:	f10d 0107 	add.w	r1, sp, #7
 80008f2:	a802      	add	r0, sp, #8
 80008f4:	f000 f868 	bl	80009c8 <KeccakF1600_StateXORBytes>
 80008f8:	e7d1      	b.n	800089e <shake256+0xaa>
 80008fa:	bf00      	nop

080008fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008fc:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008fe:	2200      	movs	r2, #0
{
 8000900:	b08a      	sub	sp, #40	@ 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	e9cd 2204 	strd	r2, r2, [sp, #16]
 8000906:	e9cd 2206 	strd	r2, r2, [sp, #24]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <MX_GPIO_Init+0x74>)
 800090c:	9201      	str	r2, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090e:	9208      	str	r2, [sp, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000910:	6b19      	ldr	r1, [r3, #48]	@ 0x30
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000912:	4c18      	ldr	r4, [pc, #96]	@ (8000974 <MX_GPIO_Init+0x78>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000914:	f041 0180 	orr.w	r1, r1, #128	@ 0x80
 8000918:	6319      	str	r1, [r3, #48]	@ 0x30
 800091a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800091c:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 8000920:	9101      	str	r1, [sp, #4]
 8000922:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000924:	9202      	str	r2, [sp, #8]
 8000926:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000928:	f041 0104 	orr.w	r1, r1, #4
 800092c:	6319      	str	r1, [r3, #48]	@ 0x30
 800092e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000930:	f001 0104 	and.w	r1, r1, #4
 8000934:	9102      	str	r1, [sp, #8]
 8000936:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000938:	9203      	str	r2, [sp, #12]
 800093a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800093c:	f041 0101 	orr.w	r1, r1, #1
 8000940:	6319      	str	r1, [r3, #48]	@ 0x30
 8000942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000944:	f003 0301 	and.w	r3, r3, #1
 8000948:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800094a:	4620      	mov	r0, r4
 800094c:	210f      	movs	r1, #15
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000950:	f003 fdf2 	bl	8004538 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000954:	220f      	movs	r2, #15
 8000956:	2301      	movs	r3, #1
 8000958:	e9cd 2304 	strd	r2, r3, [sp, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095c:	a904      	add	r1, sp, #16
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800095e:	2200      	movs	r2, #0
 8000960:	2300      	movs	r3, #0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000962:	4620      	mov	r0, r4
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000964:	e9cd 2306 	strd	r2, r3, [sp, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000968:	f003 fbfc 	bl	8004164 <HAL_GPIO_Init>

}
 800096c:	b00a      	add	sp, #40	@ 0x28
 800096e:	bd10      	pop	{r4, pc}
 8000970:	40023800 	.word	0x40023800
 8000974:	40020800 	.word	0x40020800

08000978 <KeccakF1600_StateExtractBytes>:
};

void KeccakF1600_StateExtractBytes(uint64_t *state, unsigned char *data, unsigned int offset, unsigned int length)
{
    unsigned int i;
    for(i=0;i<length;i++)
 8000978:	b323      	cbz	r3, 80009c4 <KeccakF1600_StateExtractBytes+0x4c>
 800097a:	f101 3cff 	add.w	ip, r1, #4294967295	@ 0xffffffff
 800097e:	1a52      	subs	r2, r2, r1
{
 8000980:	b570      	push	{r4, r5, r6, lr}
 8000982:	eb0c 0603 	add.w	r6, ip, r3
    {
        data[i] = state[(offset + i) >> 3] >> (8*((offset + i) & 0x07));
 8000986:	1c55      	adds	r5, r2, #1
 8000988:	eb05 030c 	add.w	r3, r5, ip
 800098c:	f023 0207 	bic.w	r2, r3, #7
 8000990:	08d9      	lsrs	r1, r3, #3
 8000992:	4402      	add	r2, r0
 8000994:	f003 0307 	and.w	r3, r3, #7
 8000998:	6854      	ldr	r4, [r2, #4]
 800099a:	f850 2031 	ldr.w	r2, [r0, r1, lsl #3]
 800099e:	00db      	lsls	r3, r3, #3
 80009a0:	f1c3 0e20 	rsb	lr, r3, #32
 80009a4:	f1a3 0120 	sub.w	r1, r3, #32
 80009a8:	fa04 fe0e 	lsl.w	lr, r4, lr
 80009ac:	fa22 f303 	lsr.w	r3, r2, r3
 80009b0:	ea43 030e 	orr.w	r3, r3, lr
 80009b4:	fa24 f101 	lsr.w	r1, r4, r1
 80009b8:	430b      	orrs	r3, r1
 80009ba:	f80c 3f01 	strb.w	r3, [ip, #1]!
    for(i=0;i<length;i++)
 80009be:	4566      	cmp	r6, ip
 80009c0:	d1e2      	bne.n	8000988 <KeccakF1600_StateExtractBytes+0x10>
    }
}
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	4770      	bx	lr
 80009c6:	bf00      	nop

080009c8 <KeccakF1600_StateXORBytes>:

void KeccakF1600_StateXORBytes(uint64_t *state, const unsigned char *data, unsigned int offset, unsigned int length)
{
    unsigned int i;
    for(i = 0; i < length; i++)
 80009c8:	b33b      	cbz	r3, 8000a1a <KeccakF1600_StateXORBytes+0x52>
{
 80009ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009cc:	1a52      	subs	r2, r2, r1
 80009ce:	1e4c      	subs	r4, r1, #1
 80009d0:	18e6      	adds	r6, r4, r3
    {
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 80009d2:	1c55      	adds	r5, r2, #1
 80009d4:	192b      	adds	r3, r5, r4
 80009d6:	f003 0c07 	and.w	ip, r3, #7
 80009da:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 80009de:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
 80009e2:	f023 0e07 	bic.w	lr, r3, #7
 80009e6:	f1ac 0220 	sub.w	r2, ip, #32
 80009ea:	08db      	lsrs	r3, r3, #3
 80009ec:	f1cc 0720 	rsb	r7, ip, #32
 80009f0:	fa21 f707 	lsr.w	r7, r1, r7
 80009f4:	fa01 f202 	lsl.w	r2, r1, r2
 80009f8:	4486      	add	lr, r0
 80009fa:	433a      	orrs	r2, r7
 80009fc:	f850 7033 	ldr.w	r7, [r0, r3, lsl #3]
 8000a00:	fa01 f10c 	lsl.w	r1, r1, ip
 8000a04:	4079      	eors	r1, r7
 8000a06:	f8de 7004 	ldr.w	r7, [lr, #4]
 8000a0a:	f840 1033 	str.w	r1, [r0, r3, lsl #3]
 8000a0e:	407a      	eors	r2, r7
    for(i = 0; i < length; i++)
 8000a10:	42a6      	cmp	r6, r4
        state[(offset + i) >> 3] ^= (uint64_t)data[i] << (8 * ((offset + i) & 0x07));
 8000a12:	f8ce 2004 	str.w	r2, [lr, #4]
    for(i = 0; i < length; i++)
 8000a16:	d1dd      	bne.n	80009d4 <KeccakF1600_StateXORBytes+0xc>
    }
}
 8000a18:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a1a:	4770      	bx	lr

08000a1c <KeccakF1600_StatePermute>:

void KeccakF1600_StatePermute(uint64_t * state)
{
 8000a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a20:	b0bf      	sub	sp, #252	@ 0xfc
        uint64_t Eka, Eke, Eki, Eko, Eku;
        uint64_t Ema, Eme, Emi, Emo, Emu;
        uint64_t Esa, Ese, Esi, Eso, Esu;

        //copyFromState(A, state)
        Aba = state[ 0];
 8000a22:	6803      	ldr	r3, [r0, #0]
 8000a24:	9306      	str	r3, [sp, #24]
 8000a26:	6843      	ldr	r3, [r0, #4]
 8000a28:	9307      	str	r3, [sp, #28]
        Abe = state[ 1];
 8000a2a:	6883      	ldr	r3, [r0, #8]
 8000a2c:	9308      	str	r3, [sp, #32]
 8000a2e:	68c3      	ldr	r3, [r0, #12]
 8000a30:	9309      	str	r3, [sp, #36]	@ 0x24
        Abi = state[ 2];
 8000a32:	4b35      	ldr	r3, [pc, #212]	@ (8000b08 <KeccakF1600_StatePermute+0xec>)
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	6903      	ldr	r3, [r0, #16]
 8000a38:	930a      	str	r3, [sp, #40]	@ 0x28
 8000a3a:	6943      	ldr	r3, [r0, #20]
 8000a3c:	9302      	str	r3, [sp, #8]
        Abo = state[ 3];
 8000a3e:	6983      	ldr	r3, [r0, #24]
 8000a40:	930b      	str	r3, [sp, #44]	@ 0x2c
 8000a42:	69c3      	ldr	r3, [r0, #28]
 8000a44:	930c      	str	r3, [sp, #48]	@ 0x30
        Abu = state[ 4];
 8000a46:	6a03      	ldr	r3, [r0, #32]
 8000a48:	930d      	str	r3, [sp, #52]	@ 0x34
 8000a4a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8000a4c:	9303      	str	r3, [sp, #12]
        Aga = state[ 5];
 8000a4e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8000a50:	930e      	str	r3, [sp, #56]	@ 0x38
 8000a52:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8000a54:	930f      	str	r3, [sp, #60]	@ 0x3c
        Age = state[ 6];
 8000a56:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8000a58:	9310      	str	r3, [sp, #64]	@ 0x40
        Agi = state[ 7];
 8000a5a:	e9d0 320d 	ldrd	r3, r2, [r0, #52]	@ 0x34
 8000a5e:	9204      	str	r2, [sp, #16]
 8000a60:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8000a62:	9211      	str	r2, [sp, #68]	@ 0x44
        Ago = state[ 8];
 8000a64:	6c02      	ldr	r2, [r0, #64]	@ 0x40
 8000a66:	9212      	str	r2, [sp, #72]	@ 0x48
 8000a68:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8000a6a:	9213      	str	r2, [sp, #76]	@ 0x4c
        Agu = state[ 9];
 8000a6c:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 8000a6e:	9214      	str	r2, [sp, #80]	@ 0x50
 8000a70:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8000a72:	9215      	str	r2, [sp, #84]	@ 0x54
        Aka = state[10];
 8000a74:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 8000a76:	9216      	str	r2, [sp, #88]	@ 0x58
 8000a78:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8000a7a:	9217      	str	r2, [sp, #92]	@ 0x5c
        Ake = state[11];
 8000a7c:	6d82      	ldr	r2, [r0, #88]	@ 0x58
 8000a7e:	9218      	str	r2, [sp, #96]	@ 0x60
 8000a80:	6dc2      	ldr	r2, [r0, #92]	@ 0x5c
 8000a82:	9205      	str	r2, [sp, #20]
        Aki = state[12];
 8000a84:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8000a86:	9219      	str	r2, [sp, #100]	@ 0x64
 8000a88:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8000a8a:	921a      	str	r2, [sp, #104]	@ 0x68
        Ako = state[13];
 8000a8c:	6e82      	ldr	r2, [r0, #104]	@ 0x68
 8000a8e:	921b      	str	r2, [sp, #108]	@ 0x6c
 8000a90:	6ec2      	ldr	r2, [r0, #108]	@ 0x6c
 8000a92:	921c      	str	r2, [sp, #112]	@ 0x70
        Aku = state[14];
 8000a94:	6f02      	ldr	r2, [r0, #112]	@ 0x70
 8000a96:	921d      	str	r2, [sp, #116]	@ 0x74
 8000a98:	6f42      	ldr	r2, [r0, #116]	@ 0x74
 8000a9a:	921e      	str	r2, [sp, #120]	@ 0x78
        Ama = state[15];
 8000a9c:	6f82      	ldr	r2, [r0, #120]	@ 0x78
 8000a9e:	921f      	str	r2, [sp, #124]	@ 0x7c
        Ame = state[16];
 8000aa0:	e9d0 a21f 	ldrd	sl, r2, [r0, #124]	@ 0x7c
 8000aa4:	9220      	str	r2, [sp, #128]	@ 0x80
 8000aa6:	f8d0 2084 	ldr.w	r2, [r0, #132]	@ 0x84
 8000aaa:	9221      	str	r2, [sp, #132]	@ 0x84
        Ami = state[17];
 8000aac:	f8d0 2088 	ldr.w	r2, [r0, #136]	@ 0x88
 8000ab0:	9222      	str	r2, [sp, #136]	@ 0x88
 8000ab2:	f8d0 208c 	ldr.w	r2, [r0, #140]	@ 0x8c
 8000ab6:	9223      	str	r2, [sp, #140]	@ 0x8c
        Amo = state[18];
 8000ab8:	f8d0 2090 	ldr.w	r2, [r0, #144]	@ 0x90
 8000abc:	9224      	str	r2, [sp, #144]	@ 0x90
 8000abe:	f8d0 2094 	ldr.w	r2, [r0, #148]	@ 0x94
 8000ac2:	9225      	str	r2, [sp, #148]	@ 0x94
        Amu = state[19];
 8000ac4:	f8d0 2098 	ldr.w	r2, [r0, #152]	@ 0x98
 8000ac8:	9226      	str	r2, [sp, #152]	@ 0x98
 8000aca:	f8d0 209c 	ldr.w	r2, [r0, #156]	@ 0x9c
 8000ace:	9227      	str	r2, [sp, #156]	@ 0x9c
        Asa = state[20];
        Ase = state[21];
 8000ad0:	f8d0 20a8 	ldr.w	r2, [r0, #168]	@ 0xa8
 8000ad4:	9228      	str	r2, [sp, #160]	@ 0xa0
 8000ad6:	f8d0 20ac 	ldr.w	r2, [r0, #172]	@ 0xac
 8000ada:	9229      	str	r2, [sp, #164]	@ 0xa4
        Asi = state[22];
 8000adc:	e9d0 212c 	ldrd	r2, r1, [r0, #176]	@ 0xb0
 8000ae0:	912a      	str	r1, [sp, #168]	@ 0xa8
        Aso = state[23];
 8000ae2:	f8d0 10b8 	ldr.w	r1, [r0, #184]	@ 0xb8
 8000ae6:	912b      	str	r1, [sp, #172]	@ 0xac
 8000ae8:	f8d0 10bc 	ldr.w	r1, [r0, #188]	@ 0xbc
 8000aec:	912c      	str	r1, [sp, #176]	@ 0xb0
        Asu = state[24];
 8000aee:	f8d0 10c0 	ldr.w	r1, [r0, #192]	@ 0xc0
 8000af2:	912d      	str	r1, [sp, #180]	@ 0xb4
        Asa = state[20];
 8000af4:	e9d0 9728 	ldrd	r9, r7, [r0, #160]	@ 0xa0
        Asu = state[24];
 8000af8:	f8d0 10c4 	ldr.w	r1, [r0, #196]	@ 0xc4
 8000afc:	912e      	str	r1, [sp, #184]	@ 0xb8

        for( round = 0; round < NROUNDS; round += 2 )
 8000afe:	903d      	str	r0, [sp, #244]	@ 0xf4
 8000b00:	469b      	mov	fp, r3
 8000b02:	4690      	mov	r8, r2
 8000b04:	e002      	b.n	8000b0c <KeccakF1600_StatePermute+0xf0>
 8000b06:	bf00      	nop
 8000b08:	08004f60 	.word	0x08004f60
        {
            //    prepareTheta
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000b0c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8000b0e:	9b06      	ldr	r3, [sp, #24]
 8000b10:	9816      	ldr	r0, [sp, #88]	@ 0x58
 8000b12:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
 8000b14:	9d07      	ldr	r5, [sp, #28]
 8000b16:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8000b18:	4053      	eors	r3, r2
 8000b1a:	4043      	eors	r3, r0
 8000b1c:	4063      	eors	r3, r4
 8000b1e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
            BCe = Abe^Age^Ake^Ame^Ase;
 8000b20:	9808      	ldr	r0, [sp, #32]
 8000b22:	9c10      	ldr	r4, [sp, #64]	@ 0x40
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000b24:	ea83 0309 	eor.w	r3, r3, r9
 8000b28:	932f      	str	r3, [sp, #188]	@ 0xbc
 8000b2a:	ea85 0306 	eor.w	r3, r5, r6
 8000b2e:	4053      	eors	r3, r2
 8000b30:	ea83 030a 	eor.w	r3, r3, sl
 8000b34:	ea83 0607 	eor.w	r6, r3, r7
            BCe = Abe^Age^Ake^Ame^Ase;
 8000b38:	9d18      	ldr	r5, [sp, #96]	@ 0x60
 8000b3a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
            BCa = Aba^Aga^Aka^Ama^Asa;
 8000b3c:	9630      	str	r6, [sp, #192]	@ 0xc0
            BCe = Abe^Age^Ake^Ame^Ase;
 8000b3e:	ea80 0604 	eor.w	r6, r0, r4
 8000b42:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8000b44:	9828      	ldr	r0, [sp, #160]	@ 0xa0
 8000b46:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8000b48:	406e      	eors	r6, r5
 8000b4a:	9d05      	ldr	r5, [sp, #20]
 8000b4c:	ea84 0c0b 	eor.w	ip, r4, fp
 8000b50:	4056      	eors	r6, r2
 8000b52:	4046      	eors	r6, r0
 8000b54:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b56:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8000b58:	9c04      	ldr	r4, [sp, #16]
            BCe = Abe^Age^Ake^Ame^Ase;
 8000b5a:	ea8c 0c05 	eor.w	ip, ip, r5
 8000b5e:	ea8c 0c03 	eor.w	ip, ip, r3
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b62:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8000b64:	9b22      	ldr	r3, [sp, #136]	@ 0x88
            BCe = Abe^Age^Ake^Ame^Ase;
 8000b66:	ea8c 0c02 	eor.w	ip, ip, r2
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b6a:	ea80 0104 	eor.w	r1, r0, r4
 8000b6e:	9a02      	ldr	r2, [sp, #8]
 8000b70:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8000b72:	4069      	eors	r1, r5
 8000b74:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 8000b76:	ea82 0400 	eor.w	r4, r2, r0
 8000b7a:	4059      	eors	r1, r3
 8000b7c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8000b7e:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000b80:	980b      	ldr	r0, [sp, #44]	@ 0x2c
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b82:	406c      	eors	r4, r5
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000b84:	9d12      	ldr	r5, [sp, #72]	@ 0x48
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b86:	405c      	eors	r4, r3
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000b88:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b8a:	4054      	eors	r4, r2
 8000b8c:	ea81 0108 	eor.w	r1, r1, r8
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000b90:	ea80 0205 	eor.w	r2, r0, r5
 8000b94:	9824      	ldr	r0, [sp, #144]	@ 0x90
            BCi = Abi^Agi^Aki^Ami^Asi;
 8000b96:	9101      	str	r1, [sp, #4]
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000b98:	405a      	eors	r2, r3
 8000b9a:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 8000b9c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000b9e:	9915      	ldr	r1, [sp, #84]	@ 0x54
            BCo = Abo^Ago^Ako^Amo^Aso;
 8000ba0:	4042      	eors	r2, r0
 8000ba2:	406a      	eors	r2, r5
 8000ba4:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8000ba6:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8000ba8:	405d      	eors	r5, r3
 8000baa:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8000bac:	405d      	eors	r5, r3
 8000bae:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8000bb0:	4045      	eors	r5, r0
 8000bb2:	405d      	eors	r5, r3
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000bb4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8000bb6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8000bb8:	4043      	eors	r3, r0
 8000bba:	981d      	ldr	r0, [sp, #116]	@ 0x74
 8000bbc:	4043      	eors	r3, r0
 8000bbe:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8000bc0:	4043      	eors	r3, r0
 8000bc2:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8000bc4:	4043      	eors	r3, r0
 8000bc6:	9803      	ldr	r0, [sp, #12]
 8000bc8:	4048      	eors	r0, r1
 8000bca:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8000bcc:	4048      	eors	r0, r1
 8000bce:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8000bd0:	4048      	eors	r0, r1
 8000bd2:	992e      	ldr	r1, [sp, #184]	@ 0xb8

            //thetaRhoPiChiIotaPrepareTheta(round  , A, E)
            Da = BCu^ROL(BCe, 1);
 8000bd4:	ea4f 0e4c 	mov.w	lr, ip, lsl #1
            BCu = Abu^Agu^Aku^Amu^Asu;
 8000bd8:	4048      	eors	r0, r1
            Da = BCu^ROL(BCe, 1);
 8000bda:	ea4e 7ed6 	orr.w	lr, lr, r6, lsr #31
 8000bde:	ea8e 0e00 	eor.w	lr, lr, r0
            BCe = ROL(Agi,  6);
            Ako ^= Do;
            BCi = ROL(Ako, 25);
            Amu ^= Du;
            BCo = ROL(Amu,  8);
            Asa ^= Da;
 8000be2:	ea8e 0707 	eor.w	r7, lr, r7
 8000be6:	9731      	str	r7, [sp, #196]	@ 0xc4
            Aba ^= Da;
 8000be8:	9f07      	ldr	r7, [sp, #28]
            Aka ^= Da;
 8000bea:	9917      	ldr	r1, [sp, #92]	@ 0x5c
            Aba ^= Da;
 8000bec:	ea8e 0707 	eor.w	r7, lr, r7
 8000bf0:	9707      	str	r7, [sp, #28]
            Eko =   BCo ^((~BCu)&  BCa );
            Eku =   BCu ^((~BCa)&  BCe );

            Abu ^= Du;
            BCa = ROL(Abu, 27);
            Aga ^= Da;
 8000bf2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8000bf4:	ea8e 0707 	eor.w	r7, lr, r7
            Aka ^= Da;
 8000bf8:	ea8e 0101 	eor.w	r1, lr, r1
            Aga ^= Da;
 8000bfc:	9733      	str	r7, [sp, #204]	@ 0xcc
            Da = BCu^ROL(BCe, 1);
 8000bfe:	0077      	lsls	r7, r6, #1
            Aka ^= Da;
 8000c00:	9117      	str	r1, [sp, #92]	@ 0x5c
            Da = BCu^ROL(BCe, 1);
 8000c02:	ea47 77dc 	orr.w	r7, r7, ip, lsr #31
            Aka ^= Da;
 8000c06:	9916      	ldr	r1, [sp, #88]	@ 0x58
            Da = BCu^ROL(BCe, 1);
 8000c08:	405f      	eors	r7, r3
            BCa = ROL(Abi, 62);
            Ago ^= Do;
            BCe = ROL(Ago, 55);
            Aku ^= Du;
            BCi = ROL(Aku, 39);
            Ama ^= Da;
 8000c0a:	ea8e 0e0a 	eor.w	lr, lr, sl
 8000c0e:	f8cd e0e4 	str.w	lr, [sp, #228]	@ 0xe4
            Aka ^= Da;
 8000c12:	ea87 0e01 	eor.w	lr, r7, r1
            Aba ^= Da;
 8000c16:	9906      	ldr	r1, [sp, #24]
            Aka ^= Da;
 8000c18:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
            Asa ^= Da;
 8000c1c:	ea87 0e09 	eor.w	lr, r7, r9
 8000c20:	f8cd e058 	str.w	lr, [sp, #88]	@ 0x58
            Aba ^= Da;
 8000c24:	ea87 0e01 	eor.w	lr, r7, r1
            Aga ^= Da;
 8000c28:	990e      	ldr	r1, [sp, #56]	@ 0x38
            Aba ^= Da;
 8000c2a:	f8cd e018 	str.w	lr, [sp, #24]
            Aga ^= Da;
 8000c2e:	ea87 0e01 	eor.w	lr, r7, r1
            Ama ^= Da;
 8000c32:	991f      	ldr	r1, [sp, #124]	@ 0x7c
            Aga ^= Da;
 8000c34:	f8cd e0c8 	str.w	lr, [sp, #200]	@ 0xc8
            Ama ^= Da;
 8000c38:	ea87 0e01 	eor.w	lr, r7, r1
 8000c3c:	f8cd e0e0 	str.w	lr, [sp, #224]	@ 0xe0
            De = BCa^ROL(BCi, 1);
 8000c40:	9901      	ldr	r1, [sp, #4]
 8000c42:	0067      	lsls	r7, r4, #1
 8000c44:	ea47 77d1 	orr.w	r7, r7, r1, lsr #31
 8000c48:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 8000c4a:	404f      	eors	r7, r1
            Ame ^= De;
 8000c4c:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8000c4e:	ea87 0e01 	eor.w	lr, r7, r1
            Abe ^= De;
 8000c52:	9909      	ldr	r1, [sp, #36]	@ 0x24
            Ame ^= De;
 8000c54:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
            Abe ^= De;
 8000c58:	ea87 0e01 	eor.w	lr, r7, r1
            Ake ^= De;
 8000c5c:	9905      	ldr	r1, [sp, #20]
            Abe ^= De;
 8000c5e:	f8cd e084 	str.w	lr, [sp, #132]	@ 0x84
            Ake ^= De;
 8000c62:	ea87 0e01 	eor.w	lr, r7, r1
            BCo = ROL(Ama, 41);
            Ase ^= De;
 8000c66:	9929      	ldr	r1, [sp, #164]	@ 0xa4
            Ake ^= De;
 8000c68:	f8cd e0d0 	str.w	lr, [sp, #208]	@ 0xd0
            Ase ^= De;
 8000c6c:	ea87 0e01 	eor.w	lr, r7, r1
            De = BCa^ROL(BCi, 1);
 8000c70:	9901      	ldr	r1, [sp, #4]
            Ase ^= De;
 8000c72:	f8cd e0ec 	str.w	lr, [sp, #236]	@ 0xec
            Age ^= De;
 8000c76:	ea87 0b0b 	eor.w	fp, r7, fp
            De = BCa^ROL(BCi, 1);
 8000c7a:	004f      	lsls	r7, r1, #1
 8000c7c:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8000c7e:	ea47 77d4 	orr.w	r7, r7, r4, lsr #31
 8000c82:	404f      	eors	r7, r1
            Age ^= De;
 8000c84:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8000c86:	ea87 0a01 	eor.w	sl, r7, r1
            Ame ^= De;
 8000c8a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8000c8c:	ea87 0e01 	eor.w	lr, r7, r1
            Abe ^= De;
 8000c90:	9908      	ldr	r1, [sp, #32]
            Ame ^= De;
 8000c92:	f8cd e038 	str.w	lr, [sp, #56]	@ 0x38
            Abe ^= De;
 8000c96:	ea87 0e01 	eor.w	lr, r7, r1
            Ake ^= De;
 8000c9a:	9918      	ldr	r1, [sp, #96]	@ 0x60
            Abe ^= De;
 8000c9c:	f8cd e014 	str.w	lr, [sp, #20]
            Ake ^= De;
 8000ca0:	ea87 0e01 	eor.w	lr, r7, r1
            Ase ^= De;
 8000ca4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
            Ake ^= De;
 8000ca6:	f8cd e0a4 	str.w	lr, [sp, #164]	@ 0xa4
            Ase ^= De;
 8000caa:	ea87 0e01 	eor.w	lr, r7, r1
            Di = BCe^ROL(BCo, 1);
 8000cae:	006f      	lsls	r7, r5, #1
            Aki ^= Di;
 8000cb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
            Ase ^= De;
 8000cb2:	f8cd e0e8 	str.w	lr, [sp, #232]	@ 0xe8
            Di = BCe^ROL(BCo, 1);
 8000cb6:	ea47 77d2 	orr.w	r7, r7, r2, lsr #31
 8000cba:	ea87 070c 	eor.w	r7, r7, ip
            Aki ^= Di;
 8000cbe:	ea87 0901 	eor.w	r9, r7, r1
            Asi ^= Di;
 8000cc2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 8000cc4:	ea87 0c01 	eor.w	ip, r7, r1
            Agi ^= Di;
 8000cc8:	9911      	ldr	r1, [sp, #68]	@ 0x44
            Asi ^= Di;
 8000cca:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
            Agi ^= Di;
 8000cce:	ea87 0c01 	eor.w	ip, r7, r1
            Ami ^= Di;
 8000cd2:	9923      	ldr	r1, [sp, #140]	@ 0x8c
            Agi ^= Di;
 8000cd4:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
            Ami ^= Di;
 8000cd8:	ea87 0c01 	eor.w	ip, r7, r1
            Abi ^= Di;
 8000cdc:	9902      	ldr	r1, [sp, #8]
            Ami ^= Di;
 8000cde:	f8cd c0a8 	str.w	ip, [sp, #168]	@ 0xa8
            Abi ^= Di;
 8000ce2:	ea87 0c01 	eor.w	ip, r7, r1
            Di = BCe^ROL(BCo, 1);
 8000ce6:	0057      	lsls	r7, r2, #1
 8000ce8:	ea47 77d5 	orr.w	r7, r7, r5, lsr #31
 8000cec:	407e      	eors	r6, r7
            Aki ^= Di;
 8000cee:	9f19      	ldr	r7, [sp, #100]	@ 0x64
            Abi ^= Di;
 8000cf0:	f8cd c0d8 	str.w	ip, [sp, #216]	@ 0xd8
            Asi ^= Di;
 8000cf4:	ea86 0e08 	eor.w	lr, r6, r8
            Aki ^= Di;
 8000cf8:	ea86 0c07 	eor.w	ip, r6, r7
            Asi ^= Di;
 8000cfc:	f8cd e008 	str.w	lr, [sp, #8]
            Agi ^= Di;
 8000d00:	9f04      	ldr	r7, [sp, #16]
            Do = BCi^ROL(BCu, 1);
 8000d02:	9901      	ldr	r1, [sp, #4]
            Agi ^= Di;
 8000d04:	ea86 0e07 	eor.w	lr, r6, r7
            Ami ^= Di;
 8000d08:	9f22      	ldr	r7, [sp, #136]	@ 0x88
            Agi ^= Di;
 8000d0a:	f8cd e020 	str.w	lr, [sp, #32]
            Ami ^= Di;
 8000d0e:	ea86 0e07 	eor.w	lr, r6, r7
            Abi ^= Di;
 8000d12:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
            Ami ^= Di;
 8000d14:	f8cd e0a0 	str.w	lr, [sp, #160]	@ 0xa0
            Abi ^= Di;
 8000d18:	ea86 0e07 	eor.w	lr, r6, r7
            Do = BCi^ROL(BCu, 1);
 8000d1c:	0046      	lsls	r6, r0, #1
 8000d1e:	ea46 76d3 	orr.w	r6, r6, r3, lsr #31
 8000d22:	4066      	eors	r6, r4
            Amo ^= Do;
 8000d24:	9c25      	ldr	r4, [sp, #148]	@ 0x94
            Ako ^= Do;
 8000d26:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
            Abi ^= Di;
 8000d28:	f8cd e0d4 	str.w	lr, [sp, #212]	@ 0xd4
            Do = BCi^ROL(BCu, 1);
 8000d2c:	005b      	lsls	r3, r3, #1
            Amo ^= Do;
 8000d2e:	ea86 0804 	eor.w	r8, r6, r4
            Do = BCi^ROL(BCu, 1);
 8000d32:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
            Abo ^= Do;
 8000d36:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
            Amo ^= Do;
 8000d38:	9824      	ldr	r0, [sp, #144]	@ 0x90
            Do = BCi^ROL(BCu, 1);
 8000d3a:	404b      	eors	r3, r1
            Abo ^= Do;
 8000d3c:	ea83 0104 	eor.w	r1, r3, r4
 8000d40:	9101      	str	r1, [sp, #4]
            Ako ^= Do;
 8000d42:	991c      	ldr	r1, [sp, #112]	@ 0x70
            Abo ^= Do;
 8000d44:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
            Ako ^= Do;
 8000d46:	ea83 0e07 	eor.w	lr, r3, r7
            Aso ^= Do;
 8000d4a:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
            Ako ^= Do;
 8000d4c:	f8cd e064 	str.w	lr, [sp, #100]	@ 0x64
 8000d50:	ea86 0e01 	eor.w	lr, r6, r1
 8000d54:	f8cd e024 	str.w	lr, [sp, #36]	@ 0x24
            Aso ^= Do;
 8000d58:	ea83 0e07 	eor.w	lr, r3, r7
            Ago ^= Do;
 8000d5c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
            Aso ^= Do;
 8000d5e:	f8cd e094 	str.w	lr, [sp, #148]	@ 0x94
            Amo ^= Do;
 8000d62:	4058      	eors	r0, r3
            Ago ^= Do;
 8000d64:	ea83 0e07 	eor.w	lr, r3, r7
            Aso ^= Do;
 8000d68:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
            Ago ^= Do;
 8000d6a:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8000d6c:	f8cd e0dc 	str.w	lr, [sp, #220]	@ 0xdc
            Aso ^= Do;
 8000d70:	ea86 0e03 	eor.w	lr, r6, r3
            Abo ^= Do;
 8000d74:	4074      	eors	r4, r6
            Du = BCo^ROL(BCa, 1);
 8000d76:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
            Aso ^= Do;
 8000d78:	f8cd e0ac 	str.w	lr, [sp, #172]	@ 0xac
            Ago ^= Do;
 8000d7c:	ea86 0e07 	eor.w	lr, r6, r7
            Du = BCo^ROL(BCa, 1);
 8000d80:	9e30      	ldr	r6, [sp, #192]	@ 0xc0
            Ago ^= Do;
 8000d82:	f8cd e0b0 	str.w	lr, [sp, #176]	@ 0xb0
            Du = BCo^ROL(BCa, 1);
 8000d86:	005f      	lsls	r7, r3, #1
 8000d88:	ea4f 0e46 	mov.w	lr, r6, lsl #1
            Amu ^= Du;
 8000d8c:	9926      	ldr	r1, [sp, #152]	@ 0x98
            Du = BCo^ROL(BCa, 1);
 8000d8e:	ea4e 7ed3 	orr.w	lr, lr, r3, lsr #31
 8000d92:	ea47 77d6 	orr.w	r7, r7, r6, lsr #31
 8000d96:	ea8e 0e05 	eor.w	lr, lr, r5
 8000d9a:	4057      	eors	r7, r2
            Asu ^= Du;
 8000d9c:	9d2d      	ldr	r5, [sp, #180]	@ 0xb4
            Agu ^= Du;
 8000d9e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
            Amu ^= Du;
 8000da0:	4079      	eors	r1, r7
            Asu ^= Du;
 8000da2:	ea87 0605 	eor.w	r6, r7, r5
            Agu ^= Du;
 8000da6:	ea87 0203 	eor.w	r2, r7, r3
            Asu ^= Du;
 8000daa:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
            Agu ^= Du;
 8000dac:	9b15      	ldr	r3, [sp, #84]	@ 0x54
            Amu ^= Du;
 8000dae:	9113      	str	r1, [sp, #76]	@ 0x4c
 8000db0:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 8000db2:	ea8e 0101 	eor.w	r1, lr, r1
 8000db6:	910a      	str	r1, [sp, #40]	@ 0x28
            Abu ^= Du;
 8000db8:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8000dba:	4079      	eors	r1, r7
 8000dbc:	9123      	str	r1, [sp, #140]	@ 0x8c
            Aku ^= Du;
 8000dbe:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8000dc0:	404f      	eors	r7, r1
 8000dc2:	9726      	str	r7, [sp, #152]	@ 0x98
            Abu ^= Du;
 8000dc4:	9f03      	ldr	r7, [sp, #12]
            Aku ^= Du;
 8000dc6:	991e      	ldr	r1, [sp, #120]	@ 0x78
            Abu ^= Du;
 8000dc8:	ea8e 0707 	eor.w	r7, lr, r7
 8000dcc:	9724      	str	r7, [sp, #144]	@ 0x90
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000dce:	9f00      	ldr	r7, [sp, #0]
            Asu ^= Du;
 8000dd0:	ea8e 0505 	eor.w	r5, lr, r5
            Agu ^= Du;
 8000dd4:	ea8e 0303 	eor.w	r3, lr, r3
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000dd8:	683f      	ldr	r7, [r7, #0]
            Aku ^= Du;
 8000dda:	ea8e 0e01 	eor.w	lr, lr, r1
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000dde:	9906      	ldr	r1, [sp, #24]
            Aku ^= Du;
 8000de0:	f8cd e09c 	str.w	lr, [sp, #156]	@ 0x9c
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000de4:	ea81 0e07 	eor.w	lr, r1, r7
 8000de8:	9f00      	ldr	r7, [sp, #0]
 8000dea:	9907      	ldr	r1, [sp, #28]
 8000dec:	687f      	ldr	r7, [r7, #4]
 8000dee:	f8cd e02c 	str.w	lr, [sp, #44]	@ 0x2c
 8000df2:	ea81 0e07 	eor.w	lr, r1, r7
            BCe = ROL(Age, 44);
 8000df6:	ea4f 571b 	mov.w	r7, fp, lsr #20
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000dfa:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
            BCe = ROL(Age, 44);
 8000dfe:	ea4f 5e1a 	mov.w	lr, sl, lsr #20
 8000e02:	ea47 3a0a 	orr.w	sl, r7, sl, lsl #12
 8000e06:	f8cd a00c 	str.w	sl, [sp, #12]
            BCi = ROL(Aki, 43);
 8000e0a:	ea4f 5a5c 	mov.w	sl, ip, lsr #21
 8000e0e:	ea4a 2ac9 	orr.w	sl, sl, r9, lsl #11
 8000e12:	ea4f 5959 	mov.w	r9, r9, lsr #21
 8000e16:	ea49 2ccc 	orr.w	ip, r9, ip, lsl #11
            BCu = ROL(Asu, 14);
 8000e1a:	ea4f 3985 	mov.w	r9, r5, lsl #14
 8000e1e:	ea49 4996 	orr.w	r9, r9, r6, lsr #18
            BCa = ROL(Abo, 28);
 8000e22:	9901      	ldr	r1, [sp, #4]
            BCi = ROL(Aki, 43);
 8000e24:	f8cd c010 	str.w	ip, [sp, #16]
            BCu = ROL(Asu, 14);
 8000e28:	03b6      	lsls	r6, r6, #14
            BCo = ROL(Amo, 21);
 8000e2a:	ea4f 5c48 	mov.w	ip, r8, lsl #21
            BCu = ROL(Asu, 14);
 8000e2e:	ea46 4695 	orr.w	r6, r6, r5, lsr #18
            BCo = ROL(Amo, 21);
 8000e32:	ea4c 2cd0 	orr.w	ip, ip, r0, lsr #11
            BCa = ROL(Abo, 28);
 8000e36:	0725      	lsls	r5, r4, #28
            BCo = ROL(Amo, 21);
 8000e38:	0540      	lsls	r0, r0, #21
 8000e3a:	ea40 20d8 	orr.w	r0, r0, r8, lsr #11
            BCa = ROL(Abo, 28);
 8000e3e:	ea45 1811 	orr.w	r8, r5, r1, lsr #4
 8000e42:	0709      	lsls	r1, r1, #28
 8000e44:	ea41 1114 	orr.w	r1, r1, r4, lsr #4
            BCe = ROL(Agu, 20);
 8000e48:	051c      	lsls	r4, r3, #20
            BCa = ROL(Abo, 28);
 8000e4a:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
            BCe = ROL(Agu, 20);
 8000e4e:	ea44 3812 	orr.w	r8, r4, r2, lsr #12
 8000e52:	0512      	lsls	r2, r2, #20
 8000e54:	ea42 3213 	orr.w	r2, r2, r3, lsr #12
 8000e58:	9210      	str	r2, [sp, #64]	@ 0x40
            BCi = ROL(Aka,  3);
 8000e5a:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8000e5c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
            BCe = ROL(Agu, 20);
 8000e5e:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
            BCi = ROL(Aka,  3);
 8000e62:	00d3      	lsls	r3, r2, #3
 8000e64:	ea43 7855 	orr.w	r8, r3, r5, lsr #29
 8000e68:	00ed      	lsls	r5, r5, #3
 8000e6a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
            BCo = ROL(Ame, 45);
 8000e6e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8000e70:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
            BCi = ROL(Aka,  3);
 8000e72:	f8cd 803c 	str.w	r8, [sp, #60]	@ 0x3c
            BCo = ROL(Ame, 45);
 8000e76:	0cd7      	lsrs	r7, r2, #19
 8000e78:	ea47 3743 	orr.w	r7, r7, r3, lsl #13
 8000e7c:	0cdb      	lsrs	r3, r3, #19
 8000e7e:	ea43 3342 	orr.w	r3, r3, r2, lsl #13
            BCu = ROL(Asi, 61);
 8000e82:	9a02      	ldr	r2, [sp, #8]
 8000e84:	ea4f 08d2 	mov.w	r8, r2, lsr #3
 8000e88:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8000e8a:	ea48 7842 	orr.w	r8, r8, r2, lsl #29
 8000e8e:	08d4      	lsrs	r4, r2, #3
 8000e90:	9a02      	ldr	r2, [sp, #8]
 8000e92:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
 8000e96:	9414      	str	r4, [sp, #80]	@ 0x50
            BCa = ROL(Abe,  1);
 8000e98:	9c21      	ldr	r4, [sp, #132]	@ 0x84
 8000e9a:	9a05      	ldr	r2, [sp, #20]
            BCe = ROL(Age, 44);
 8000e9c:	ea4e 3e0b 	orr.w	lr, lr, fp, lsl #12
            BCa = ROL(Abe,  1);
 8000ea0:	ea4f 0b44 	mov.w	fp, r4, lsl #1
 8000ea4:	ea4b 7bd2 	orr.w	fp, fp, r2, lsr #31
 8000ea8:	9a05      	ldr	r2, [sp, #20]
 8000eaa:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
 8000eae:	ea4f 0b42 	mov.w	fp, r2, lsl #1
 8000eb2:	ea4b 7bd4 	orr.w	fp, fp, r4, lsr #31
            BCe = ROL(Agi,  6);
 8000eb6:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8000eb8:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Abe,  1);
 8000eba:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
            BCe = ROL(Agi,  6);
 8000ebe:	ea4f 1b84 	mov.w	fp, r4, lsl #6
 8000ec2:	ea4b 6b92 	orr.w	fp, fp, r2, lsr #26
 8000ec6:	9a08      	ldr	r2, [sp, #32]
 8000ec8:	f8cd b008 	str.w	fp, [sp, #8]
 8000ecc:	ea4f 1b82 	mov.w	fp, r2, lsl #6
            BCi = ROL(Ako, 25);
 8000ed0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
            BCe = ROL(Agi,  6);
 8000ed2:	ea4b 6b94 	orr.w	fp, fp, r4, lsr #26
            BCi = ROL(Ako, 25);
 8000ed6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            BCe = ROL(Agi,  6);
 8000ed8:	f8cd b004 	str.w	fp, [sp, #4]
            BCi = ROL(Ako, 25);
 8000edc:	ea4f 6b42 	mov.w	fp, r2, lsl #25
 8000ee0:	ea4b 1bd4 	orr.w	fp, fp, r4, lsr #7
 8000ee4:	f8cd b078 	str.w	fp, [sp, #120]	@ 0x78
 8000ee8:	ea4f 6b44 	mov.w	fp, r4, lsl #25
 8000eec:	9c09      	ldr	r4, [sp, #36]	@ 0x24
            BCo = ROL(Amu,  8);
 8000eee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            BCi = ROL(Ako, 25);
 8000ef0:	ea4b 1bd4 	orr.w	fp, fp, r4, lsr #7
            BCo = ROL(Amu,  8);
 8000ef4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
            BCi = ROL(Ako, 25);
 8000ef6:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
            BCo = ROL(Amu,  8);
 8000efa:	ea4f 2b02 	mov.w	fp, r2, lsl #8
 8000efe:	ea4b 6b14 	orr.w	fp, fp, r4, lsr #24
 8000f02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8000f04:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
 8000f08:	ea4f 2b04 	mov.w	fp, r4, lsl #8
            BCu = ROL(Asa, 18);
 8000f0c:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
            BCo = ROL(Amu,  8);
 8000f0e:	ea4b 6b12 	orr.w	fp, fp, r2, lsr #24
            BCu = ROL(Asa, 18);
 8000f12:	9a16      	ldr	r2, [sp, #88]	@ 0x58
            BCo = ROL(Amu,  8);
 8000f14:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
            BCu = ROL(Asa, 18);
 8000f18:	ea4f 4b84 	mov.w	fp, r4, lsl #18
 8000f1c:	ea4b 3b92 	orr.w	fp, fp, r2, lsr #14
 8000f20:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8000f22:	f8cd b068 	str.w	fp, [sp, #104]	@ 0x68
 8000f26:	ea4f 4b82 	mov.w	fp, r2, lsl #18
 8000f2a:	ea4b 3b94 	orr.w	fp, fp, r4, lsr #14
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000f2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
            BCu = ROL(Asa, 18);
 8000f30:	f8cd b064 	str.w	fp, [sp, #100]	@ 0x64
            Eba =   BCa ^((~BCe)&  BCi );
 8000f34:	ea2a 0b0e 	bic.w	fp, sl, lr
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000f38:	ea82 0b0b 	eor.w	fp, r2, fp
            Eba =   BCa ^((~BCe)&  BCi );
 8000f3c:	e9dd 2403 	ldrd	r2, r4, [sp, #12]
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000f40:	f8cd b014 	str.w	fp, [sp, #20]
            Eba =   BCa ^((~BCe)&  BCi );
 8000f44:	ea24 0b02 	bic.w	fp, r4, r2
            Eba ^= (uint64_t)KeccakF_RoundConstants[round];
 8000f48:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8000f4a:	ea84 0b0b 	eor.w	fp, r4, fp
 8000f4e:	f8cd b020 	str.w	fp, [sp, #32]
            Ebe =   BCe ^((~BCi)&  BCo );
 8000f52:	ea20 0b0a 	bic.w	fp, r0, sl
 8000f56:	ea8b 0b0e 	eor.w	fp, fp, lr
 8000f5a:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
            Ebu =   BCu ^((~BCa)&  BCe );
 8000f5e:	9a06      	ldr	r2, [sp, #24]
            Ebe =   BCe ^((~BCi)&  BCo );
 8000f60:	9c04      	ldr	r4, [sp, #16]
            Ebo =   BCo ^((~BCu)&  BCa );
 8000f62:	ea22 0b06 	bic.w	fp, r2, r6
            Ebu =   BCu ^((~BCa)&  BCe );
 8000f66:	ea2e 0e02 	bic.w	lr, lr, r2
            Ebo =   BCo ^((~BCu)&  BCa );
 8000f6a:	ea8b 0b00 	eor.w	fp, fp, r0
            Ebe =   BCe ^((~BCi)&  BCo );
 8000f6e:	9a03      	ldr	r2, [sp, #12]
            Ebo =   BCo ^((~BCu)&  BCa );
 8000f70:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
            Ebi =   BCi ^((~BCo)&  BCu );
 8000f74:	ea26 0000 	bic.w	r0, r6, r0
            Ebu =   BCu ^((~BCa)&  BCe );
 8000f78:	ea8e 0e06 	eor.w	lr, lr, r6
 8000f7c:	9e07      	ldr	r6, [sp, #28]
 8000f7e:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
            Ebi =   BCi ^((~BCo)&  BCu );
 8000f82:	ea80 0a0a 	eor.w	sl, r0, sl
            Ebe =   BCe ^((~BCi)&  BCo );
 8000f86:	ea2c 0004 	bic.w	r0, ip, r4
 8000f8a:	ea80 0e02 	eor.w	lr, r0, r2
            Ebu =   BCu ^((~BCa)&  BCe );
 8000f8e:	ea22 0006 	bic.w	r0, r2, r6
            Ebo =   BCo ^((~BCu)&  BCa );
 8000f92:	ea26 0609 	bic.w	r6, r6, r9
            Ega =   BCa ^((~BCe)&  BCi );
 8000f96:	9a10      	ldr	r2, [sp, #64]	@ 0x40
            Ebe =   BCe ^((~BCi)&  BCo );
 8000f98:	f8cd e018 	str.w	lr, [sp, #24]
            Ebo =   BCo ^((~BCu)&  BCa );
 8000f9c:	ea86 0e0c 	eor.w	lr, r6, ip
            Ebi =   BCi ^((~BCo)&  BCu );
 8000fa0:	ea29 0c0c 	bic.w	ip, r9, ip
 8000fa4:	ea8c 0c04 	eor.w	ip, ip, r4
 8000fa8:	f8cd c01c 	str.w	ip, [sp, #28]
            Ebu =   BCu ^((~BCa)&  BCe );
 8000fac:	ea80 0c09 	eor.w	ip, r0, r9
            Ega =   BCa ^((~BCe)&  BCi );
 8000fb0:	ea25 0002 	bic.w	r0, r5, r2
 8000fb4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
            Ebu =   BCu ^((~BCa)&  BCe );
 8000fb6:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
            Ega =   BCa ^((~BCe)&  BCi );
 8000fba:	ea80 0c01 	eor.w	ip, r0, r1
 8000fbe:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8000fc0:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8000fc2:	f8cd c040 	str.w	ip, [sp, #64]	@ 0x40
 8000fc6:	ea20 0006 	bic.w	r0, r0, r6
 8000fca:	ea80 0c04 	eor.w	ip, r0, r4
            Ege =   BCe ^((~BCi)&  BCo );
 8000fce:	ea27 0005 	bic.w	r0, r7, r5
            Ega =   BCa ^((~BCe)&  BCi );
 8000fd2:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
            Ege =   BCe ^((~BCi)&  BCo );
 8000fd6:	ea80 0c02 	eor.w	ip, r0, r2
            Egu =   BCu ^((~BCa)&  BCe );
 8000fda:	ea22 0201 	bic.w	r2, r2, r1
            Ego =   BCo ^((~BCu)&  BCa );
 8000fde:	ea21 0108 	bic.w	r1, r1, r8
            Ege =   BCe ^((~BCi)&  BCo );
 8000fe2:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8000fe4:	f8cd c048 	str.w	ip, [sp, #72]	@ 0x48
            Ego =   BCo ^((~BCu)&  BCa );
 8000fe8:	ea81 0c07 	eor.w	ip, r1, r7
            Egi =   BCi ^((~BCo)&  BCu );
 8000fec:	ea28 0707 	bic.w	r7, r8, r7
            Ego =   BCo ^((~BCu)&  BCa );
 8000ff0:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
            Egi =   BCi ^((~BCo)&  BCu );
 8000ff4:	ea87 0c05 	eor.w	ip, r7, r5
            Ego =   BCo ^((~BCu)&  BCa );
 8000ff8:	9d14      	ldr	r5, [sp, #80]	@ 0x50
            Egi =   BCi ^((~BCo)&  BCu );
 8000ffa:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
            Egu =   BCu ^((~BCa)&  BCe );
 8000ffe:	ea82 0c08 	eor.w	ip, r2, r8
            Ege =   BCe ^((~BCi)&  BCo );
 8001002:	ea23 0200 	bic.w	r2, r3, r0
            Ego =   BCo ^((~BCu)&  BCa );
 8001006:	ea24 0105 	bic.w	r1, r4, r5
            Egu =   BCu ^((~BCa)&  BCe );
 800100a:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
            Ege =   BCe ^((~BCi)&  BCo );
 800100e:	ea82 0c06 	eor.w	ip, r2, r6
 8001012:	f8cd c03c 	str.w	ip, [sp, #60]	@ 0x3c
            Ego =   BCo ^((~BCu)&  BCa );
 8001016:	ea81 0c03 	eor.w	ip, r1, r3
            Egi =   BCi ^((~BCo)&  BCu );
 800101a:	ea25 0303 	bic.w	r3, r5, r3
            Egu =   BCu ^((~BCa)&  BCe );
 800101e:	ea26 0204 	bic.w	r2, r6, r4
            Ego =   BCo ^((~BCu)&  BCa );
 8001022:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
            Eku =   BCu ^((~BCa)&  BCe );
 8001026:	9e1b      	ldr	r6, [sp, #108]	@ 0x6c
 8001028:	9919      	ldr	r1, [sp, #100]	@ 0x64
            Ebi =   BCi ^((~BCo)&  BCu );
 800102a:	f8cd a028 	str.w	sl, [sp, #40]	@ 0x28
            Egi =   BCi ^((~BCo)&  BCu );
 800102e:	ea83 0c00 	eor.w	ip, r3, r0
            Eku =   BCu ^((~BCa)&  BCe );
 8001032:	9801      	ldr	r0, [sp, #4]
            Egi =   BCi ^((~BCo)&  BCu );
 8001034:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
            Eku =   BCu ^((~BCa)&  BCe );
 8001038:	ea20 0306 	bic.w	r3, r0, r6
            Egu =   BCu ^((~BCa)&  BCe );
 800103c:	ea82 0c05 	eor.w	ip, r2, r5
 8001040:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
            Eku =   BCu ^((~BCa)&  BCe );
 8001044:	ea83 0c01 	eor.w	ip, r3, r1
            Ebo =   BCo ^((~BCu)&  BCa );
 8001048:	f8cd e030 	str.w	lr, [sp, #48]	@ 0x30
            Eku =   BCu ^((~BCa)&  BCe );
 800104c:	9902      	ldr	r1, [sp, #8]
 800104e:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 8001052:	9f1c      	ldr	r7, [sp, #112]	@ 0x70
            BCa = ROL(Abu, 27);
 8001054:	9a24      	ldr	r2, [sp, #144]	@ 0x90
            BCe = ROL(Aga, 36);
 8001056:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
            BCu = ROL(Aso, 56);
 8001058:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
            Eku =   BCu ^((~BCa)&  BCe );
 800105a:	ea21 0307 	bic.w	r3, r1, r7
 800105e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8001060:	ea83 0c01 	eor.w	ip, r3, r1
            BCa = ROL(Abu, 27);
 8001064:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
            Eku =   BCu ^((~BCa)&  BCe );
 8001066:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
            BCa = ROL(Abu, 27);
 800106a:	ea4f 6ec2 	mov.w	lr, r2, lsl #27
 800106e:	ea4e 1e53 	orr.w	lr, lr, r3, lsr #5
 8001072:	06d9      	lsls	r1, r3, #27
            BCe = ROL(Aga, 36);
 8001074:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8001076:	ea4f 7815 	mov.w	r8, r5, lsr #28
            BCa = ROL(Abu, 27);
 800107a:	ea41 1152 	orr.w	r1, r1, r2, lsr #5
            BCe = ROL(Aga, 36);
 800107e:	ea48 1803 	orr.w	r8, r8, r3, lsl #4
            BCi = ROL(Ake, 10);
 8001082:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
            BCe = ROL(Aga, 36);
 8001084:	0f1b      	lsrs	r3, r3, #28
 8001086:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
            BCi = ROL(Ake, 10);
 800108a:	9d29      	ldr	r5, [sp, #164]	@ 0xa4
 800108c:	ea4f 2982 	mov.w	r9, r2, lsl #10
 8001090:	ea49 5995 	orr.w	r9, r9, r5, lsr #22
 8001094:	02ad      	lsls	r5, r5, #10
 8001096:	ea45 5292 	orr.w	r2, r5, r2, lsr #22
            BCo = ROL(Ami, 15);
 800109a:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
            BCi = ROL(Ake, 10);
 800109c:	9203      	str	r2, [sp, #12]
            BCo = ROL(Ami, 15);
 800109e:	9a28      	ldr	r2, [sp, #160]	@ 0xa0
 80010a0:	ea4f 3cc5 	mov.w	ip, r5, lsl #15
 80010a4:	ea4c 4c52 	orr.w	ip, ip, r2, lsr #17
 80010a8:	03d2      	lsls	r2, r2, #15
 80010aa:	ea42 4255 	orr.w	r2, r2, r5, lsr #17
            BCu = ROL(Aso, 56);
 80010ae:	9d25      	ldr	r5, [sp, #148]	@ 0x94
 80010b0:	ea4f 2a15 	mov.w	sl, r5, lsr #8
 80010b4:	ea4a 6a04 	orr.w	sl, sl, r4, lsl #24
 80010b8:	0a24      	lsrs	r4, r4, #8
 80010ba:	ea44 6405 	orr.w	r4, r4, r5, lsl #24
            Eka =   BCa ^((~BCe)&  BCi );
 80010be:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
            BCu = ROL(Aso, 56);
 80010c0:	9424      	str	r4, [sp, #144]	@ 0x90
            Eko =   BCo ^((~BCu)&  BCa );
 80010c2:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            Eka =   BCa ^((~BCe)&  BCi );
 80010c4:	ea25 0000 	bic.w	r0, r5, r0
 80010c8:	ea80 0b06 	eor.w	fp, r0, r6
            Eko =   BCo ^((~BCu)&  BCa );
 80010cc:	ea26 0004 	bic.w	r0, r6, r4
            Eki =   BCi ^((~BCo)&  BCu );
 80010d0:	4626      	mov	r6, r4
 80010d2:	9c1f      	ldr	r4, [sp, #124]	@ 0x7c
            Eka =   BCa ^((~BCe)&  BCi );
 80010d4:	f8cd b06c 	str.w	fp, [sp, #108]	@ 0x6c
            Eki =   BCi ^((~BCo)&  BCu );
 80010d8:	ea26 0604 	bic.w	r6, r6, r4
 80010dc:	ea86 0b05 	eor.w	fp, r6, r5
            Eke =   BCe ^((~BCi)&  BCo );
 80010e0:	ea24 0605 	bic.w	r6, r4, r5
 80010e4:	9d01      	ldr	r5, [sp, #4]
            Eki =   BCi ^((~BCo)&  BCu );
 80010e6:	f8cd b074 	str.w	fp, [sp, #116]	@ 0x74
            Eke =   BCe ^((~BCi)&  BCo );
 80010ea:	ea86 0b05 	eor.w	fp, r6, r5
 80010ee:	f8cd b070 	str.w	fp, [sp, #112]	@ 0x70
            Eka =   BCa ^((~BCe)&  BCi );
 80010f2:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
            Eko =   BCo ^((~BCu)&  BCa );
 80010f4:	ea80 0b04 	eor.w	fp, r0, r4
            Eka =   BCa ^((~BCe)&  BCi );
 80010f8:	9802      	ldr	r0, [sp, #8]
            Eko =   BCo ^((~BCu)&  BCa );
 80010fa:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80010fc:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
            Eka =   BCa ^((~BCe)&  BCi );
 8001100:	ea25 0000 	bic.w	r0, r5, r0
 8001104:	ea80 0b07 	eor.w	fp, r0, r7
            Eko =   BCo ^((~BCu)&  BCa );
 8001108:	ea27 0004 	bic.w	r0, r7, r4
            Eki =   BCi ^((~BCo)&  BCu );
 800110c:	9f20      	ldr	r7, [sp, #128]	@ 0x80
            Eka =   BCa ^((~BCe)&  BCi );
 800110e:	f8cd b064 	str.w	fp, [sp, #100]	@ 0x64
            Eki =   BCi ^((~BCo)&  BCu );
 8001112:	ea24 0607 	bic.w	r6, r4, r7
 8001116:	ea86 0b05 	eor.w	fp, r6, r5
            Eke =   BCe ^((~BCi)&  BCo );
 800111a:	463c      	mov	r4, r7
 800111c:	ea27 0605 	bic.w	r6, r7, r5
 8001120:	9f02      	ldr	r7, [sp, #8]
            Eki =   BCi ^((~BCo)&  BCu );
 8001122:	f8cd b078 	str.w	fp, [sp, #120]	@ 0x78
            Eke =   BCe ^((~BCi)&  BCo );
 8001126:	ea86 0b07 	eor.w	fp, r6, r7
 800112a:	f8cd b068 	str.w	fp, [sp, #104]	@ 0x68
            Eko =   BCo ^((~BCu)&  BCa );
 800112e:	ea80 0b04 	eor.w	fp, r0, r4
 8001132:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
            BCa = ROL(Abi, 62);
 8001136:	9c35      	ldr	r4, [sp, #212]	@ 0xd4
 8001138:	9e36      	ldr	r6, [sp, #216]	@ 0xd8
            BCe = ROL(Ago, 55);
 800113a:	9d37      	ldr	r5, [sp, #220]	@ 0xdc
            BCi = ROL(Aku, 39);
 800113c:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
            BCa = ROL(Abi, 62);
 800113e:	08a0      	lsrs	r0, r4, #2
 8001140:	ea40 7b86 	orr.w	fp, r0, r6, lsl #30
 8001144:	08b0      	lsrs	r0, r6, #2
 8001146:	f8cd b0ac 	str.w	fp, [sp, #172]	@ 0xac
 800114a:	ea40 7b84 	orr.w	fp, r0, r4, lsl #30
            BCe = ROL(Ago, 55);
 800114e:	982c      	ldr	r0, [sp, #176]	@ 0xb0
            BCa = ROL(Abi, 62);
 8001150:	f8cd b0a4 	str.w	fp, [sp, #164]	@ 0xa4
            BCe = ROL(Ago, 55);
 8001154:	0a6e      	lsrs	r6, r5, #9
 8001156:	ea46 56c0 	orr.w	r6, r6, r0, lsl #23
 800115a:	0a40      	lsrs	r0, r0, #9
 800115c:	ea40 5bc5 	orr.w	fp, r0, r5, lsl #23
            BCi = ROL(Aku, 39);
 8001160:	9d26      	ldr	r5, [sp, #152]	@ 0x98
            BCe = ROL(Ago, 55);
 8001162:	f8cd b0a8 	str.w	fp, [sp, #168]	@ 0xa8
            BCi = ROL(Aku, 39);
 8001166:	0e68      	lsrs	r0, r5, #25
 8001168:	ea40 1bc7 	orr.w	fp, r0, r7, lsl #7
 800116c:	0e78      	lsrs	r0, r7, #25
 800116e:	f8cd b004 	str.w	fp, [sp, #4]
 8001172:	ea40 1bc5 	orr.w	fp, r0, r5, lsl #7
            BCo = ROL(Ama, 41);
 8001176:	9d38      	ldr	r5, [sp, #224]	@ 0xe0
 8001178:	9839      	ldr	r0, [sp, #228]	@ 0xe4
            BCi = ROL(Aku, 39);
 800117a:	f8cd b008 	str.w	fp, [sp, #8]
            BCo = ROL(Ama, 41);
 800117e:	0def      	lsrs	r7, r5, #23
 8001180:	ea47 2440 	orr.w	r4, r7, r0, lsl #9
 8001184:	9430      	str	r4, [sp, #192]	@ 0xc0
            BCu = ROL(Ase,  2);
 8001186:	9c3b      	ldr	r4, [sp, #236]	@ 0xec
 8001188:	9f3a      	ldr	r7, [sp, #232]	@ 0xe8
            BCo = ROL(Ama, 41);
 800118a:	0dc0      	lsrs	r0, r0, #23
 800118c:	ea40 2b45 	orr.w	fp, r0, r5, lsl #9
            BCu = ROL(Ase,  2);
 8001190:	00a0      	lsls	r0, r4, #2
            BCo = ROL(Ama, 41);
 8001192:	f8cd b0c4 	str.w	fp, [sp, #196]	@ 0xc4
            BCu = ROL(Ase,  2);
 8001196:	ea40 7b97 	orr.w	fp, r0, r7, lsr #30
 800119a:	00b8      	lsls	r0, r7, #2
            Ema =   BCa ^((~BCe)&  BCi );
 800119c:	9f03      	ldr	r7, [sp, #12]
            BCu = ROL(Ase,  2);
 800119e:	f8cd b010 	str.w	fp, [sp, #16]
            Ema =   BCa ^((~BCe)&  BCi );
 80011a2:	ea27 0b08 	bic.w	fp, r7, r8
 80011a6:	ea8b 0b01 	eor.w	fp, fp, r1
            BCu = ROL(Ase,  2);
 80011aa:	ea40 7094 	orr.w	r0, r0, r4, lsr #30
            Ema =   BCa ^((~BCe)&  BCi );
 80011ae:	465c      	mov	r4, fp
 80011b0:	ea29 0b03 	bic.w	fp, r9, r3
 80011b4:	ea8b 0b0e 	eor.w	fp, fp, lr
 80011b8:	465d      	mov	r5, fp
            Eme =   BCe ^((~BCi)&  BCo );
 80011ba:	ea22 0b07 	bic.w	fp, r2, r7
 80011be:	ea8b 0b08 	eor.w	fp, fp, r8
            Emi =   BCi ^((~BCo)&  BCu );
 80011c2:	9f03      	ldr	r7, [sp, #12]
            Eme =   BCe ^((~BCi)&  BCo );
 80011c4:	f8cd b08c 	str.w	fp, [sp, #140]	@ 0x8c
            Emu =   BCu ^((~BCa)&  BCe );
 80011c8:	ea28 0801 	bic.w	r8, r8, r1
            Emo =   BCo ^((~BCu)&  BCa );
 80011cc:	ea21 010a 	bic.w	r1, r1, sl
 80011d0:	ea81 0b02 	eor.w	fp, r1, r2
 80011d4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80011d6:	f8cd b094 	str.w	fp, [sp, #148]	@ 0x94
            Emi =   BCi ^((~BCo)&  BCu );
 80011da:	ea2a 0202 	bic.w	r2, sl, r2
 80011de:	ea82 0b07 	eor.w	fp, r2, r7
            Emu =   BCu ^((~BCa)&  BCe );
 80011e2:	ea88 080a 	eor.w	r8, r8, sl
            Eme =   BCe ^((~BCi)&  BCo );
 80011e6:	ea2c 0209 	bic.w	r2, ip, r9
            Emu =   BCu ^((~BCa)&  BCe );
 80011ea:	f8cd 809c 	str.w	r8, [sp, #156]	@ 0x9c
            Eme =   BCe ^((~BCi)&  BCo );
 80011ee:	ea82 0803 	eor.w	r8, r2, r3
            Emu =   BCu ^((~BCa)&  BCe );
 80011f2:	ea23 030e 	bic.w	r3, r3, lr
            Emo =   BCo ^((~BCu)&  BCa );
 80011f6:	ea2e 0e01 	bic.w	lr, lr, r1
 80011fa:	ea8e 0e0c 	eor.w	lr, lr, ip
            Emi =   BCi ^((~BCo)&  BCu );
 80011fe:	ea21 0c0c 	bic.w	ip, r1, ip
 8001202:	ea8c 0c09 	eor.w	ip, ip, r9
 8001206:	f8cd c090 	str.w	ip, [sp, #144]	@ 0x90
            Emu =   BCu ^((~BCa)&  BCe );
 800120a:	ea83 0c01 	eor.w	ip, r3, r1
            Esi =   BCi ^((~BCo)&  BCu );
            Eso =   BCo ^((~BCu)&  BCa );
            Esu =   BCu ^((~BCa)&  BCe );

            //    prepareTheta
            BCa = Eba^Ega^Eka^Ema^Esa;
 800120e:	9905      	ldr	r1, [sp, #20]
 8001210:	9b10      	ldr	r3, [sp, #64]	@ 0x40
            Emi =   BCi ^((~BCo)&  BCu );
 8001212:	f8cd b00c 	str.w	fp, [sp, #12]
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001216:	ea81 0903 	eor.w	r9, r1, r3
 800121a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
            Emo =   BCo ^((~BCu)&  BCa );
 800121c:	f8cd e098 	str.w	lr, [sp, #152]	@ 0x98
            Emu =   BCu ^((~BCa)&  BCe );
 8001220:	f8cd c0a0 	str.w	ip, [sp, #160]	@ 0xa0
            BCa = Eba^Ega^Eka^Ema^Esa;
 8001224:	ea89 0901 	eor.w	r9, r9, r1
 8001228:	942d      	str	r4, [sp, #180]	@ 0xb4
 800122a:	9b08      	ldr	r3, [sp, #32]
 800122c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800122e:	952e      	str	r5, [sp, #184]	@ 0xb8
 8001230:	ea89 0904 	eor.w	r9, r9, r4
 8001234:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001236:	9f23      	ldr	r7, [sp, #140]	@ 0x8c
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001238:	9a14      	ldr	r2, [sp, #80]	@ 0x50
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800123a:	f8cd 80bc 	str.w	r8, [sp, #188]	@ 0xbc
            BCa = Eba^Ega^Eka^Ema^Esa;
 800123e:	ea83 0e01 	eor.w	lr, r3, r1
 8001242:	ea8e 0e04 	eor.w	lr, lr, r4
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001246:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8001248:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 800124a:	9b06      	ldr	r3, [sp, #24]
            BCa = Eba^Ega^Eka^Ema^Esa;
 800124c:	ea8e 0e05 	eor.w	lr, lr, r5
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001250:	ea81 0504 	eor.w	r5, r1, r4
 8001254:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 8001256:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8001258:	4065      	eors	r5, r4
 800125a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 800125c:	4063      	eors	r3, r4
 800125e:	404b      	eors	r3, r1
 8001260:	ea83 0c08 	eor.w	ip, r3, r8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001264:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8001266:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8001268:	9c1d      	ldr	r4, [sp, #116]	@ 0x74
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800126a:	f8cd c0d0 	str.w	ip, [sp, #208]	@ 0xd0
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800126e:	4059      	eors	r1, r3
 8001270:	9b07      	ldr	r3, [sp, #28]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001272:	407d      	eors	r5, r7
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001274:	4061      	eors	r1, r4
 8001276:	465f      	mov	r7, fp
 8001278:	4053      	eors	r3, r2
 800127a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800127c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800127e:	4079      	eors	r1, r7
 8001280:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 8001282:	4053      	eors	r3, r2
 8001284:	ea83 0b07 	eor.w	fp, r3, r7
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001288:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800128a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800128c:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800128e:	ea83 0c02 	eor.w	ip, r3, r2
 8001292:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8001294:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8001296:	ea8c 0c02 	eor.w	ip, ip, r2
 800129a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800129c:	ea8c 0c07 	eor.w	ip, ip, r7
 80012a0:	4062      	eors	r2, r4
 80012a2:	9f26      	ldr	r7, [sp, #152]	@ 0x98
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80012a4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
            BCo = Ebo^Ego^Eko^Emo^Eso;
 80012a6:	405a      	eors	r2, r3
 80012a8:	ea82 0307 	eor.w	r3, r2, r7
 80012ac:	9335      	str	r3, [sp, #212]	@ 0xd4
            BCu = Ebu^Egu^Eku^Emu^Esu;
 80012ae:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80012b0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80012b2:	9f27      	ldr	r7, [sp, #156]	@ 0x9c
 80012b4:	4063      	eors	r3, r4
 80012b6:	4053      	eors	r3, r2
 80012b8:	9c22      	ldr	r4, [sp, #136]	@ 0x88
 80012ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80012bc:	4054      	eors	r4, r2
 80012be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80012c0:	407b      	eors	r3, r7
 80012c2:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 80012c4:	4054      	eors	r4, r2
 80012c6:	ea84 0207 	eor.w	r2, r4, r7
 80012ca:	9236      	str	r2, [sp, #216]	@ 0xd8
            Esa =   BCa ^((~BCe)&  BCi );
 80012cc:	9a01      	ldr	r2, [sp, #4]
 80012ce:	9f2b      	ldr	r7, [sp, #172]	@ 0xac
 80012d0:	9c02      	ldr	r4, [sp, #8]
 80012d2:	ea22 0806 	bic.w	r8, r2, r6
 80012d6:	ea88 0807 	eor.w	r8, r8, r7
 80012da:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
            BCa = Eba^Ega^Eka^Ema^Esa;
 80012dc:	ea89 0908 	eor.w	r9, r9, r8
 80012e0:	f8cd 90ac 	str.w	r9, [sp, #172]	@ 0xac
            Esa =   BCa ^((~BCe)&  BCi );
 80012e4:	ea24 0902 	bic.w	r9, r4, r2
 80012e8:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
            Ese =   BCe ^((~BCi)&  BCo );
 80012ea:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
            Esa =   BCa ^((~BCe)&  BCi );
 80012ec:	ea89 0902 	eor.w	r9, r9, r2
            Ese =   BCe ^((~BCi)&  BCo );
 80012f0:	9a01      	ldr	r2, [sp, #4]
            BCa = Eba^Ega^Eka^Ema^Esa;
 80012f2:	ea8e 0e09 	eor.w	lr, lr, r9
 80012f6:	f8cd e0b0 	str.w	lr, [sp, #176]	@ 0xb0
            Ese =   BCe ^((~BCi)&  BCo );
 80012fa:	ea24 0e02 	bic.w	lr, r4, r2
            Eso =   BCo ^((~BCu)&  BCa );
 80012fe:	4622      	mov	r2, r4
            Ese =   BCe ^((~BCi)&  BCo );
 8001300:	ea8e 0e06 	eor.w	lr, lr, r6
            Eso =   BCo ^((~BCu)&  BCa );
 8001304:	ea27 0a00 	bic.w	sl, r7, r0
            Esu =   BCu ^((~BCa)&  BCe );
 8001308:	ea26 0607 	bic.w	r6, r6, r7
            Esi =   BCi ^((~BCo)&  BCu );
 800130c:	ea20 0702 	bic.w	r7, r0, r2
 8001310:	9a01      	ldr	r2, [sp, #4]
            Eso =   BCo ^((~BCu)&  BCa );
 8001312:	ea8a 0a04 	eor.w	sl, sl, r4
 8001316:	4654      	mov	r4, sl
            Esi =   BCi ^((~BCo)&  BCu );
 8001318:	ea87 0a02 	eor.w	sl, r7, r2
 800131c:	4657      	mov	r7, sl
            Esu =   BCu ^((~BCa)&  BCe );
 800131e:	ea86 0a00 	eor.w	sl, r6, r0
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001322:	ea85 060e 	eor.w	r6, r5, lr
            Esu =   BCu ^((~BCa)&  BCe );
 8001326:	4650      	mov	r0, sl
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001328:	9601      	str	r6, [sp, #4]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 800132a:	ea8c 0a04 	eor.w	sl, ip, r4
            Ese =   BCe ^((~BCi)&  BCo );
 800132e:	9e02      	ldr	r6, [sp, #8]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001330:	9432      	str	r4, [sp, #200]	@ 0xc8
            Ese =   BCe ^((~BCi)&  BCo );
 8001332:	9c31      	ldr	r4, [sp, #196]	@ 0xc4
            Esu =   BCu ^((~BCa)&  BCe );
 8001334:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8001336:	9033      	str	r0, [sp, #204]	@ 0xcc
 8001338:	4043      	eors	r3, r0
            Ese =   BCe ^((~BCi)&  BCo );
 800133a:	982a      	ldr	r0, [sp, #168]	@ 0xa8
            BCi = Ebi^Egi^Eki^Emi^Esi;
 800133c:	9730      	str	r7, [sp, #192]	@ 0xc0
            Ese =   BCe ^((~BCi)&  BCo );
 800133e:	ea24 0606 	bic.w	r6, r4, r6
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001342:	4079      	eors	r1, r7
            Ese =   BCe ^((~BCi)&  BCo );
 8001344:	4046      	eors	r6, r0
            Esu =   BCu ^((~BCa)&  BCe );
 8001346:	ea20 0702 	bic.w	r7, r0, r2
            Eso =   BCo ^((~BCu)&  BCa );
 800134a:	9804      	ldr	r0, [sp, #16]
 800134c:	ea22 0000 	bic.w	r0, r2, r0
 8001350:	ea80 0c04 	eor.w	ip, r0, r4
            Esu =   BCu ^((~BCa)&  BCe );
 8001354:	9a04      	ldr	r2, [sp, #16]
            Esi =   BCi ^((~BCo)&  BCu );
 8001356:	9804      	ldr	r0, [sp, #16]
            Eso =   BCo ^((~BCu)&  BCa );
 8001358:	4665      	mov	r5, ip
            Esi =   BCi ^((~BCo)&  BCu );
 800135a:	ea20 0004 	bic.w	r0, r0, r4
            Esu =   BCu ^((~BCa)&  BCe );
 800135e:	ea87 0c02 	eor.w	ip, r7, r2
            Esi =   BCi ^((~BCo)&  BCu );
 8001362:	9c02      	ldr	r4, [sp, #8]
            BCe = Ebe^Ege^Eke^Eme^Ese;
 8001364:	9a34      	ldr	r2, [sp, #208]	@ 0xd0
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001366:	9502      	str	r5, [sp, #8]
            Esi =   BCi ^((~BCo)&  BCu );
 8001368:	4060      	eors	r0, r4
            Esu =   BCu ^((~BCa)&  BCe );
 800136a:	4664      	mov	r4, ip
            BCe = Ebe^Ege^Eke^Eme^Ese;
 800136c:	ea82 0c06 	eor.w	ip, r2, r6
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001370:	462a      	mov	r2, r5
 8001372:	9d35      	ldr	r5, [sp, #212]	@ 0xd4
            BCu = Ebu^Egu^Eku^Emu^Esu;
 8001374:	9404      	str	r4, [sp, #16]
            BCo = Ebo^Ego^Eko^Emo^Eso;
 8001376:	4055      	eors	r5, r2
 8001378:	462a      	mov	r2, r5
            BCu = Ebu^Egu^Eku^Emu^Esu;
 800137a:	9d36      	ldr	r5, [sp, #216]	@ 0xd8
 800137c:	4065      	eors	r5, r4
 800137e:	462c      	mov	r4, r5

            //thetaRhoPiChiIotaPrepareTheta(round+1, E, A)
            Da = BCu^ROL(BCe, 1);
 8001380:	9d01      	ldr	r5, [sp, #4]
            BCi = Ebi^Egi^Eki^Emi^Esi;
 8001382:	ea8b 0700 	eor.w	r7, fp, r0
            Da = BCu^ROL(BCe, 1);
 8001386:	ea4f 0b4c 	mov.w	fp, ip, lsl #1
 800138a:	ea4b 7bd5 	orr.w	fp, fp, r5, lsr #31

            Ebo ^= Do;
            BCa = ROL(Ebo, 28);
            Egu ^= Du;
            BCe = ROL(Egu, 20);
            Eka ^= Da;
 800138e:	9d19      	ldr	r5, [sp, #100]	@ 0x64
            Da = BCu^ROL(BCe, 1);
 8001390:	ea8b 0b04 	eor.w	fp, fp, r4
            Eka ^= Da;
 8001394:	ea85 050b 	eor.w	r5, r5, fp
 8001398:	9529      	str	r5, [sp, #164]	@ 0xa4
            Ako =   BCo ^((~BCu)&  BCa );
            Aku =   BCu ^((~BCa)&  BCe );

            Ebu ^= Du;
            BCa = ROL(Ebu, 27);
            Ega ^= Da;
 800139a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
            Esa ^= Da;
 800139c:	ea89 090b 	eor.w	r9, r9, fp
 80013a0:	f8cd 90c4 	str.w	r9, [sp, #196]	@ 0xc4
            Ega ^= Da;
 80013a4:	ea85 090b 	eor.w	r9, r5, fp
            BCa = ROL(Ebi, 62);
            Ego ^= Do;
            BCe = ROL(Ego, 55);
            Eku ^= Du;
            BCi = ROL(Eku, 39);
            Ema ^= Da;
 80013a8:	9d2e      	ldr	r5, [sp, #184]	@ 0xb8
            Ega ^= Da;
 80013aa:	f8cd 90d4 	str.w	r9, [sp, #212]	@ 0xd4
            Ema ^= Da;
 80013ae:	ea85 090b 	eor.w	r9, r5, fp
            Eba ^= Da;
 80013b2:	9d08      	ldr	r5, [sp, #32]
            Ema ^= Da;
 80013b4:	f8cd 90ec 	str.w	r9, [sp, #236]	@ 0xec
            Eba ^= Da;
 80013b8:	ea85 090b 	eor.w	r9, r5, fp
            Da = BCu^ROL(BCe, 1);
 80013bc:	9d01      	ldr	r5, [sp, #4]
            Eba ^= Da;
 80013be:	f8cd 9044 	str.w	r9, [sp, #68]	@ 0x44
            Da = BCu^ROL(BCe, 1);
 80013c2:	ea4f 0945 	mov.w	r9, r5, lsl #1
 80013c6:	ea49 79dc 	orr.w	r9, r9, ip, lsr #31
            Eka ^= Da;
 80013ca:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
            Da = BCu^ROL(BCe, 1);
 80013cc:	ea89 0903 	eor.w	r9, r9, r3
            Eka ^= Da;
 80013d0:	ea85 0b09 	eor.w	fp, r5, r9
            Ega ^= Da;
 80013d4:	9d10      	ldr	r5, [sp, #64]	@ 0x40
            Eka ^= Da;
 80013d6:	f8cd b064 	str.w	fp, [sp, #100]	@ 0x64
            Esa ^= Da;
 80013da:	ea88 0809 	eor.w	r8, r8, r9
 80013de:	f8cd 80b8 	str.w	r8, [sp, #184]	@ 0xb8
            Ega ^= Da;
 80013e2:	ea85 0809 	eor.w	r8, r5, r9
            Ema ^= Da;
 80013e6:	9d2d      	ldr	r5, [sp, #180]	@ 0xb4
            Ega ^= Da;
 80013e8:	f8cd 80d0 	str.w	r8, [sp, #208]	@ 0xd0
            Ema ^= Da;
 80013ec:	ea85 0809 	eor.w	r8, r5, r9
            Eba ^= Da;
 80013f0:	9d05      	ldr	r5, [sp, #20]
            Ema ^= Da;
 80013f2:	f8cd 80e8 	str.w	r8, [sp, #232]	@ 0xe8
            Eba ^= Da;
 80013f6:	ea85 0809 	eor.w	r8, r5, r9
 80013fa:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
            De = BCa^ROL(BCi, 1);
 80013fe:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 8001400:	ea4f 0847 	mov.w	r8, r7, lsl #1
 8001404:	ea48 78d1 	orr.w	r8, r8, r1, lsr #31
 8001408:	ea88 0805 	eor.w	r8, r8, r5
            Ege ^= De;
 800140c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800140e:	ea85 0908 	eor.w	r9, r5, r8
            Eme ^= De;
 8001412:	9d2f      	ldr	r5, [sp, #188]	@ 0xbc
            Ege ^= De;
 8001414:	f8cd 9014 	str.w	r9, [sp, #20]
            Eme ^= De;
 8001418:	ea85 0908 	eor.w	r9, r5, r8
            Ebe ^= De;
 800141c:	9d06      	ldr	r5, [sp, #24]
            Eme ^= De;
 800141e:	f8cd 906c 	str.w	r9, [sp, #108]	@ 0x6c
            Ebe ^= De;
 8001422:	ea85 0908 	eor.w	r9, r5, r8
            Eke ^= De;
 8001426:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
            Ebe ^= De;
 8001428:	f8cd 90a8 	str.w	r9, [sp, #168]	@ 0xa8
            Eke ^= De;
 800142c:	ea85 0908 	eor.w	r9, r5, r8
            BCo = ROL(Ema, 41);
            Ese ^= De;
 8001430:	ea86 0808 	eor.w	r8, r6, r8
 8001434:	f8cd 80f0 	str.w	r8, [sp, #240]	@ 0xf0
            De = BCa^ROL(BCi, 1);
 8001438:	9e2b      	ldr	r6, [sp, #172]	@ 0xac
            Eke ^= De;
 800143a:	f8cd 90d8 	str.w	r9, [sp, #216]	@ 0xd8
            De = BCa^ROL(BCi, 1);
 800143e:	ea4f 0841 	mov.w	r8, r1, lsl #1
 8001442:	ea48 78d7 	orr.w	r8, r8, r7, lsr #31
 8001446:	ea88 0806 	eor.w	r8, r8, r6
            Ege ^= De;
 800144a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
            Eme ^= De;
 800144c:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
            Ese ^= De;
 800144e:	ea8e 0e08 	eor.w	lr, lr, r8
            Eme ^= De;
 8001452:	ea85 0908 	eor.w	r9, r5, r8
            Ebe ^= De;
 8001456:	9d09      	ldr	r5, [sp, #36]	@ 0x24
            Ese ^= De;
 8001458:	f8cd e03c 	str.w	lr, [sp, #60]	@ 0x3c
            Di = BCe^ROL(BCo, 1);
 800145c:	ea4f 0e42 	mov.w	lr, r2, lsl #1
            Eme ^= De;
 8001460:	f8cd 9068 	str.w	r9, [sp, #104]	@ 0x68
            Di = BCe^ROL(BCo, 1);
 8001464:	ea4e 7eda 	orr.w	lr, lr, sl, lsr #31
            Ebe ^= De;
 8001468:	ea85 0908 	eor.w	r9, r5, r8
            Eke ^= De;
 800146c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
            Ebe ^= De;
 800146e:	f8cd 908c 	str.w	r9, [sp, #140]	@ 0x8c
            Di = BCe^ROL(BCo, 1);
 8001472:	ea8e 0e0c 	eor.w	lr, lr, ip
            Eke ^= De;
 8001476:	ea85 0908 	eor.w	r9, r5, r8
            Ege ^= De;
 800147a:	ea86 0608 	eor.w	r6, r6, r8
            Esi ^= Di;
 800147e:	ea80 080e 	eor.w	r8, r0, lr
            Egi ^= Di;
 8001482:	9814      	ldr	r0, [sp, #80]	@ 0x50
            Eki ^= Di;
 8001484:	9d1e      	ldr	r5, [sp, #120]	@ 0x78
            Esi ^= Di;
 8001486:	f8cd 8078 	str.w	r8, [sp, #120]	@ 0x78
            Egi ^= Di;
 800148a:	ea80 080e 	eor.w	r8, r0, lr
            Emi ^= Di;
 800148e:	9824      	ldr	r0, [sp, #144]	@ 0x90
            Egi ^= Di;
 8001490:	f8cd 80b4 	str.w	r8, [sp, #180]	@ 0xb4
            Emi ^= Di;
 8001494:	ea80 080e 	eor.w	r8, r0, lr
            Ebi ^= Di;
 8001498:	9807      	ldr	r0, [sp, #28]
            Emi ^= Di;
 800149a:	f8cd 80dc 	str.w	r8, [sp, #220]	@ 0xdc
            Eki ^= Di;
 800149e:	ea85 0c0e 	eor.w	ip, r5, lr
            Di = BCe^ROL(BCo, 1);
 80014a2:	9d01      	ldr	r5, [sp, #4]
            Eke ^= De;
 80014a4:	f8cd 90bc 	str.w	r9, [sp, #188]	@ 0xbc
            Ebi ^= Di;
 80014a8:	ea80 0e0e 	eor.w	lr, r0, lr
            Di = BCe^ROL(BCo, 1);
 80014ac:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80014b0:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
 80014b4:	4068      	eors	r0, r5
            Eki ^= Di;
 80014b6:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
            Ebi ^= Di;
 80014b8:	f8cd e0e0 	str.w	lr, [sp, #224]	@ 0xe0
            Eki ^= Di;
 80014bc:	ea85 0e00 	eor.w	lr, r5, r0
            Esi ^= Di;
 80014c0:	9d30      	ldr	r5, [sp, #192]	@ 0xc0
 80014c2:	ea85 0800 	eor.w	r8, r5, r0
            Egi ^= Di;
 80014c6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
            Esi ^= Di;
 80014c8:	f8cd 8070 	str.w	r8, [sp, #112]	@ 0x70
            Egi ^= Di;
 80014cc:	ea85 0800 	eor.w	r8, r5, r0
            Emi ^= Di;
 80014d0:	9d03      	ldr	r5, [sp, #12]
            Egi ^= Di;
 80014d2:	f8cd 8074 	str.w	r8, [sp, #116]	@ 0x74
            Emi ^= Di;
 80014d6:	ea85 0800 	eor.w	r8, r5, r0
            Ebi ^= Di;
 80014da:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
            Emi ^= Di;
 80014dc:	f8cd 8018 	str.w	r8, [sp, #24]
            Ebi ^= Di;
 80014e0:	ea85 0800 	eor.w	r8, r5, r0
            Do = BCi^ROL(BCu, 1);
 80014e4:	0060      	lsls	r0, r4, #1
 80014e6:	ea40 70d3 	orr.w	r0, r0, r3, lsr #31
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4078      	eors	r0, r7
 80014ee:	ea43 73d4 	orr.w	r3, r3, r4, lsr #31
            Emo ^= Do;
 80014f2:	9f25      	ldr	r7, [sp, #148]	@ 0x94
            Eko ^= Do;
 80014f4:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
            Ebi ^= Di;
 80014f6:	f8cd 801c 	str.w	r8, [sp, #28]
            Do = BCi^ROL(BCu, 1);
 80014fa:	404b      	eors	r3, r1
            Emo ^= Do;
 80014fc:	ea87 0403 	eor.w	r4, r7, r3
            Ebo ^= Do;
 8001500:	990b      	ldr	r1, [sp, #44]	@ 0x2c
            Emo ^= Do;
 8001502:	9f26      	ldr	r7, [sp, #152]	@ 0x98
            Eko ^= Do;
 8001504:	ea85 0b03 	eor.w	fp, r5, r3
            Emo ^= Do;
 8001508:	ea87 0900 	eor.w	r9, r7, r0
            Eko ^= Do;
 800150c:	f8cd b07c 	str.w	fp, [sp, #124]	@ 0x7c
            Ebo ^= Do;
 8001510:	ea81 0703 	eor.w	r7, r1, r3
 8001514:	990c      	ldr	r1, [sp, #48]	@ 0x30
            Eko ^= Do;
 8001516:	9d20      	ldr	r5, [sp, #128]	@ 0x80
 8001518:	ea85 0b00 	eor.w	fp, r5, r0
            Eso ^= Do;
 800151c:	9d32      	ldr	r5, [sp, #200]	@ 0xc8
            Eko ^= Do;
 800151e:	f8cd b080 	str.w	fp, [sp, #128]	@ 0x80
            Eso ^= Do;
 8001522:	ea85 0b03 	eor.w	fp, r5, r3
            Ego ^= Do;
 8001526:	9d15      	ldr	r5, [sp, #84]	@ 0x54
            Eso ^= Do;
 8001528:	f8cd b0c0 	str.w	fp, [sp, #192]	@ 0xc0
            Ego ^= Do;
 800152c:	ea85 0b03 	eor.w	fp, r5, r3
            Eso ^= Do;
 8001530:	9d02      	ldr	r5, [sp, #8]
            Ego ^= Do;
 8001532:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8001534:	f8cd b0e4 	str.w	fp, [sp, #228]	@ 0xe4
            Eso ^= Do;
 8001538:	ea85 0b00 	eor.w	fp, r5, r0
            Ebo ^= Do;
 800153c:	ea81 0800 	eor.w	r8, r1, r0
            Eso ^= Do;
 8001540:	f8cd b0c8 	str.w	fp, [sp, #200]	@ 0xc8
            Du = BCo^ROL(BCa, 1);
 8001544:	992b      	ldr	r1, [sp, #172]	@ 0xac
            Ego ^= Do;
 8001546:	ea83 0b00 	eor.w	fp, r3, r0
            Du = BCo^ROL(BCa, 1);
 800154a:	982c      	ldr	r0, [sp, #176]	@ 0xb0
            Ego ^= Do;
 800154c:	f8cd b020 	str.w	fp, [sp, #32]
            Du = BCo^ROL(BCa, 1);
 8001550:	004b      	lsls	r3, r1, #1
 8001552:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8001556:	ea4b 7bd1 	orr.w	fp, fp, r1, lsr #31
 800155a:	ea43 73d0 	orr.w	r3, r3, r0, lsr #31
            Emu ^= Du;
 800155e:	9927      	ldr	r1, [sp, #156]	@ 0x9c
            Esu ^= Du;
 8001560:	9833      	ldr	r0, [sp, #204]	@ 0xcc
            Du = BCo^ROL(BCa, 1);
 8001562:	ea83 030a 	eor.w	r3, r3, sl
            Emu ^= Du;
 8001566:	4059      	eors	r1, r3
 8001568:	9124      	str	r1, [sp, #144]	@ 0x90
 800156a:	9928      	ldr	r1, [sp, #160]	@ 0xa0
            Du = BCo^ROL(BCa, 1);
 800156c:	ea8b 0b02 	eor.w	fp, fp, r2
            Emu ^= Du;
 8001570:	ea81 010b 	eor.w	r1, r1, fp
 8001574:	9125      	str	r1, [sp, #148]	@ 0x94
            Ebu ^= Du;
 8001576:	990d      	ldr	r1, [sp, #52]	@ 0x34
            Egu ^= Du;
 8001578:	9a18      	ldr	r2, [sp, #96]	@ 0x60
            Esu ^= Du;
 800157a:	ea80 0503 	eor.w	r5, r0, r3
 800157e:	9804      	ldr	r0, [sp, #16]
            Ebu ^= Du;
 8001580:	4059      	eors	r1, r3
            Esu ^= Du;
 8001582:	ea80 0a0b 	eor.w	sl, r0, fp
            Ebu ^= Du;
 8001586:	9126      	str	r1, [sp, #152]	@ 0x98
            Egu ^= Du;
 8001588:	9817      	ldr	r0, [sp, #92]	@ 0x5c
            Eku ^= Du;
 800158a:	9921      	ldr	r1, [sp, #132]	@ 0x84
            Egu ^= Du;
 800158c:	4058      	eors	r0, r3
            Eku ^= Du;
 800158e:	404b      	eors	r3, r1
            Ebu ^= Du;
 8001590:	990e      	ldr	r1, [sp, #56]	@ 0x38
            Eku ^= Du;
 8001592:	9333      	str	r3, [sp, #204]	@ 0xcc
            Ebu ^= Du;
 8001594:	ea81 030b 	eor.w	r3, r1, fp
 8001598:	9321      	str	r3, [sp, #132]	@ 0x84
            Eku ^= Du;
 800159a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 800159c:	9910      	ldr	r1, [sp, #64]	@ 0x40
            Egu ^= Du;
 800159e:	ea82 020b 	eor.w	r2, r2, fp
            Eku ^= Du;
 80015a2:	ea83 0b0b 	eor.w	fp, r3, fp
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80015a6:	9b00      	ldr	r3, [sp, #0]
            Eku ^= Du;
 80015a8:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	ea81 0b03 	eor.w	fp, r1, r3
 80015b2:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
 80015b6:	9900      	ldr	r1, [sp, #0]
 80015b8:	68cb      	ldr	r3, [r1, #12]
        for( round = 0; round < NROUNDS; round += 2 )
 80015ba:	f101 0b10 	add.w	fp, r1, #16
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80015be:	9911      	ldr	r1, [sp, #68]	@ 0x44
        for( round = 0; round < NROUNDS; round += 2 )
 80015c0:	f8cd b000 	str.w	fp, [sp]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80015c4:	ea81 0b03 	eor.w	fp, r1, r3
            BCe = ROL(Ege, 44);
 80015c8:	9905      	ldr	r1, [sp, #20]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80015ca:	f8cd b034 	str.w	fp, [sp, #52]	@ 0x34
            BCe = ROL(Ege, 44);
 80015ce:	0d33      	lsrs	r3, r6, #20
 80015d0:	ea43 3b01 	orr.w	fp, r3, r1, lsl #12
 80015d4:	0d0b      	lsrs	r3, r1, #20
 80015d6:	ea43 3606 	orr.w	r6, r3, r6, lsl #12
            BCi = ROL(Eki, 43);
 80015da:	ea4f 535e 	mov.w	r3, lr, lsr #21
            BCe = ROL(Ege, 44);
 80015de:	9609      	str	r6, [sp, #36]	@ 0x24
            BCi = ROL(Eki, 43);
 80015e0:	ea43 26cc 	orr.w	r6, r3, ip, lsl #11
 80015e4:	ea4f 5c5c 	mov.w	ip, ip, lsr #21
 80015e8:	ea4c 2cce 	orr.w	ip, ip, lr, lsl #11
            BCo = ROL(Emo, 21);
 80015ec:	ea4f 5349 	mov.w	r3, r9, lsl #21
            BCi = ROL(Eki, 43);
 80015f0:	f8cd c008 	str.w	ip, [sp, #8]
            BCo = ROL(Emo, 21);
 80015f4:	ea43 2cd4 	orr.w	ip, r3, r4, lsr #11
            BCu = ROL(Esu, 14);
 80015f8:	ea4f 338a 	mov.w	r3, sl, lsl #14
            BCo = ROL(Emo, 21);
 80015fc:	f8cd c030 	str.w	ip, [sp, #48]	@ 0x30
            BCu = ROL(Esu, 14);
 8001600:	ea43 4c95 	orr.w	ip, r3, r5, lsr #18
            BCa = ROL(Ebo, 28);
 8001604:	ea4f 7308 	mov.w	r3, r8, lsl #28
            BCu = ROL(Esu, 14);
 8001608:	f8cd c00c 	str.w	ip, [sp, #12]
            BCa = ROL(Ebo, 28);
 800160c:	ea43 1c17 	orr.w	ip, r3, r7, lsr #4
 8001610:	073f      	lsls	r7, r7, #28
            BCe = ROL(Egu, 20);
 8001612:	0513      	lsls	r3, r2, #20
            BCa = ROL(Ebo, 28);
 8001614:	f8cd c050 	str.w	ip, [sp, #80]	@ 0x50
 8001618:	ea47 1c18 	orr.w	ip, r7, r8, lsr #4
 800161c:	f8cd c038 	str.w	ip, [sp, #56]	@ 0x38
            BCe = ROL(Egu, 20);
 8001620:	ea43 3c10 	orr.w	ip, r3, r0, lsr #12
 8001624:	0500      	lsls	r0, r0, #20
 8001626:	ea40 3012 	orr.w	r0, r0, r2, lsr #12
 800162a:	9012      	str	r0, [sp, #72]	@ 0x48
            BCi = ROL(Eka, 3);
 800162c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800162e:	9f29      	ldr	r7, [sp, #164]	@ 0xa4
            BCo = ROL(Eme, 45);
 8001630:	991a      	ldr	r1, [sp, #104]	@ 0x68
            BCe = ROL(Egu, 20);
 8001632:	f8cd c04c 	str.w	ip, [sp, #76]	@ 0x4c
            BCi = ROL(Eka, 3);
 8001636:	00c2      	lsls	r2, r0, #3
 8001638:	00fb      	lsls	r3, r7, #3
 800163a:	ea42 7257 	orr.w	r2, r2, r7, lsr #29
            BCo = ROL(Eme, 45);
 800163e:	9f1b      	ldr	r7, [sp, #108]	@ 0x6c
            BCi = ROL(Eki, 43);
 8001640:	9601      	str	r6, [sp, #4]
            BCi = ROL(Eka, 3);
 8001642:	ea43 7c50 	orr.w	ip, r3, r0, lsr #29
            BCo = ROL(Eme, 45);
 8001646:	0cfb      	lsrs	r3, r7, #19
            BCi = ROL(Eka, 3);
 8001648:	f8cd c054 	str.w	ip, [sp, #84]	@ 0x54
            BCo = ROL(Eme, 45);
 800164c:	0cce      	lsrs	r6, r1, #19
 800164e:	ea43 3c41 	orr.w	ip, r3, r1, lsl #13
            BCu = ROL(Esi, 61);
 8001652:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8001654:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
            BCo = ROL(Eme, 45);
 8001656:	f8cd c058 	str.w	ip, [sp, #88]	@ 0x58
 800165a:	ea46 3647 	orr.w	r6, r6, r7, lsl #13
            BCu = ROL(Esi, 61);
 800165e:	08cf      	lsrs	r7, r1, #3
 8001660:	ea47 7743 	orr.w	r7, r7, r3, lsl #29
 8001664:	08db      	lsrs	r3, r3, #3
 8001666:	ea43 7c41 	orr.w	ip, r3, r1, lsl #29
            BCa = ROL(Ebe, 1);
 800166a:	992a      	ldr	r1, [sp, #168]	@ 0xa8
            BCi = ROL(Eka, 3);
 800166c:	9204      	str	r2, [sp, #16]
            BCa = ROL(Ebe, 1);
 800166e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
            BCu = ROL(Esi, 61);
 8001670:	f8cd c05c 	str.w	ip, [sp, #92]	@ 0x5c
            BCa = ROL(Ebe, 1);
 8001674:	004b      	lsls	r3, r1, #1
 8001676:	ea43 7cd2 	orr.w	ip, r3, r2, lsr #31
 800167a:	0053      	lsls	r3, r2, #1
 800167c:	f8cd c064 	str.w	ip, [sp, #100]	@ 0x64
 8001680:	ea43 7cd1 	orr.w	ip, r3, r1, lsr #31
            BCe = ROL(Egi, 6);
 8001684:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8001686:	981d      	ldr	r0, [sp, #116]	@ 0x74
            BCa = ROL(Ebe, 1);
 8001688:	f8cd c060 	str.w	ip, [sp, #96]	@ 0x60
            BCe = ROL(Egi, 6);
 800168c:	018b      	lsls	r3, r1, #6
 800168e:	ea43 6c90 	orr.w	ip, r3, r0, lsr #26
 8001692:	0183      	lsls	r3, r0, #6
 8001694:	f8cd c06c 	str.w	ip, [sp, #108]	@ 0x6c
 8001698:	ea43 6c91 	orr.w	ip, r3, r1, lsr #26
 800169c:	f8cd c068 	str.w	ip, [sp, #104]	@ 0x68
            BCi = ROL(Eko, 25);
 80016a0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80016a2:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
            BCo = ROL(Emu, 8);
 80016a4:	9924      	ldr	r1, [sp, #144]	@ 0x90
            BCi = ROL(Eko, 25);
 80016a6:	0643      	lsls	r3, r0, #25
 80016a8:	ea43 1cd2 	orr.w	ip, r3, r2, lsr #7
 80016ac:	0653      	lsls	r3, r2, #25
            BCo = ROL(Emu, 8);
 80016ae:	9a25      	ldr	r2, [sp, #148]	@ 0x94
            BCi = ROL(Eko, 25);
 80016b0:	f8cd c070 	str.w	ip, [sp, #112]	@ 0x70
 80016b4:	ea43 1cd0 	orr.w	ip, r3, r0, lsr #7
            BCo = ROL(Emu, 8);
 80016b8:	0213      	lsls	r3, r2, #8
            BCi = ROL(Eko, 25);
 80016ba:	f8cd c014 	str.w	ip, [sp, #20]
            BCo = ROL(Emu, 8);
 80016be:	ea43 6c11 	orr.w	ip, r3, r1, lsr #24
 80016c2:	0209      	lsls	r1, r1, #8
 80016c4:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
            BCu = ROL(Esa, 18);
 80016c8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80016ca:	982e      	ldr	r0, [sp, #184]	@ 0xb8
            BCo = ROL(Emu, 8);
 80016cc:	f8cd c078 	str.w	ip, [sp, #120]	@ 0x78
            BCu = ROL(Esa, 18);
 80016d0:	0493      	lsls	r3, r2, #18
 80016d2:	ea43 3c90 	orr.w	ip, r3, r0, lsr #14
 80016d6:	ea4f 4e80 	mov.w	lr, r0, lsl #18
            BCa = ROL(Ebu, 27);
 80016da:	9821      	ldr	r0, [sp, #132]	@ 0x84
            BCu = ROL(Esa, 18);
 80016dc:	f8cd c07c 	str.w	ip, [sp, #124]	@ 0x7c
 80016e0:	ea4e 3e92 	orr.w	lr, lr, r2, lsr #14
            BCa = ROL(Ebu, 27);
 80016e4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80016e6:	06c3      	lsls	r3, r0, #27
 80016e8:	ea43 1c52 	orr.w	ip, r3, r2, lsr #5
 80016ec:	06d3      	lsls	r3, r2, #27
 80016ee:	f8cd c084 	str.w	ip, [sp, #132]	@ 0x84
 80016f2:	ea43 1c50 	orr.w	ip, r3, r0, lsr #5
            BCe = ROL(Ega, 36);
 80016f6:	9834      	ldr	r0, [sp, #208]	@ 0xd0
 80016f8:	9a35      	ldr	r2, [sp, #212]	@ 0xd4
            BCa = ROL(Ebu, 27);
 80016fa:	f8cd c080 	str.w	ip, [sp, #128]	@ 0x80
            BCe = ROL(Ega, 36);
 80016fe:	0f03      	lsrs	r3, r0, #28
 8001700:	ea43 1c02 	orr.w	ip, r3, r2, lsl #4
 8001704:	0f13      	lsrs	r3, r2, #28
            BCi = ROL(Eke, 10);
 8001706:	9a36      	ldr	r2, [sp, #216]	@ 0xd8
            BCe = ROL(Ega, 36);
 8001708:	f8cd c088 	str.w	ip, [sp, #136]	@ 0x88
 800170c:	ea43 1c00 	orr.w	ip, r3, r0, lsl #4
            BCi = ROL(Eke, 10);
 8001710:	982f      	ldr	r0, [sp, #188]	@ 0xbc
            BCe = ROL(Ega, 36);
 8001712:	f8cd c08c 	str.w	ip, [sp, #140]	@ 0x8c
            BCi = ROL(Eke, 10);
 8001716:	0293      	lsls	r3, r2, #10
 8001718:	ea43 5c90 	orr.w	ip, r3, r0, lsr #22
 800171c:	0283      	lsls	r3, r0, #10
 800171e:	f8cd c094 	str.w	ip, [sp, #148]	@ 0x94
 8001722:	ea43 5c92 	orr.w	ip, r3, r2, lsr #22
            BCo = ROL(Emi, 15);
 8001726:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8001728:	9806      	ldr	r0, [sp, #24]
            BCi = ROL(Eke, 10);
 800172a:	f8cd c090 	str.w	ip, [sp, #144]	@ 0x90
            BCo = ROL(Emi, 15);
 800172e:	03d3      	lsls	r3, r2, #15
 8001730:	ea43 4c50 	orr.w	ip, r3, r0, lsr #17
 8001734:	9b06      	ldr	r3, [sp, #24]
            BCu = ROL(Eso, 56);
 8001736:	9832      	ldr	r0, [sp, #200]	@ 0xc8
            BCo = ROL(Emi, 15);
 8001738:	f8cd c09c 	str.w	ip, [sp, #156]	@ 0x9c
 800173c:	03db      	lsls	r3, r3, #15
 800173e:	ea43 4352 	orr.w	r3, r3, r2, lsr #17
            BCu = ROL(Eso, 56);
 8001742:	9a30      	ldr	r2, [sp, #192]	@ 0xc0
 8001744:	ea4f 2c10 	mov.w	ip, r0, lsr #8
            BCo = ROL(Emo, 21);
 8001748:	0564      	lsls	r4, r4, #21
 800174a:	ea44 24d9 	orr.w	r4, r4, r9, lsr #11
            BCu = ROL(Eso, 56);
 800174e:	ea4c 6c02 	orr.w	ip, ip, r2, lsl #24
 8001752:	ea4f 2912 	mov.w	r9, r2, lsr #8
            BCa = ROL(Ebi, 62);
 8001756:	9a07      	ldr	r2, [sp, #28]
            BCu = ROL(Eso, 56);
 8001758:	f8cd c0a0 	str.w	ip, [sp, #160]	@ 0xa0
 800175c:	ea49 6900 	orr.w	r9, r9, r0, lsl #24
            BCa = ROL(Ebi, 62);
 8001760:	9838      	ldr	r0, [sp, #224]	@ 0xe0
 8001762:	ea4f 0c92 	mov.w	ip, r2, lsr #2
 8001766:	ea4c 7c80 	orr.w	ip, ip, r0, lsl #30
 800176a:	f8cd c0a4 	str.w	ip, [sp, #164]	@ 0xa4
 800176e:	ea4f 0c90 	mov.w	ip, r0, lsr #2
 8001772:	9807      	ldr	r0, [sp, #28]
            BCe = ROL(Ego, 55);
 8001774:	9a08      	ldr	r2, [sp, #32]
            BCa = ROL(Ebi, 62);
 8001776:	ea4c 7c80 	orr.w	ip, ip, r0, lsl #30
            BCe = ROL(Ego, 55);
 800177a:	9839      	ldr	r0, [sp, #228]	@ 0xe4
            BCa = ROL(Ebi, 62);
 800177c:	f8cd c0a8 	str.w	ip, [sp, #168]	@ 0xa8
            BCe = ROL(Ego, 55);
 8001780:	ea4f 2c50 	mov.w	ip, r0, lsr #9
 8001784:	ea4c 5cc2 	orr.w	ip, ip, r2, lsl #23
 8001788:	9a08      	ldr	r2, [sp, #32]
 800178a:	f8cd c0ac 	str.w	ip, [sp, #172]	@ 0xac
 800178e:	ea4f 2c52 	mov.w	ip, r2, lsr #9
 8001792:	ea4c 5cc0 	orr.w	ip, ip, r0, lsl #23
            BCi = ROL(Eku, 39);
 8001796:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8001798:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
            BCe = ROL(Ego, 55);
 800179a:	f8cd c0b0 	str.w	ip, [sp, #176]	@ 0xb0
            BCi = ROL(Eku, 39);
 800179e:	ea4f 6c50 	mov.w	ip, r0, lsr #25
 80017a2:	ea4c 1cc2 	orr.w	ip, ip, r2, lsl #7
 80017a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80017a8:	f8cd c0b4 	str.w	ip, [sp, #180]	@ 0xb4
 80017ac:	ea4f 6c52 	mov.w	ip, r2, lsr #25
            BCo = ROL(Ema, 41);
 80017b0:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
            BCi = ROL(Eku, 39);
 80017b2:	ea4c 1cc0 	orr.w	ip, ip, r0, lsl #7
            BCo = ROL(Ema, 41);
 80017b6:	983a      	ldr	r0, [sp, #232]	@ 0xe8
            BCi = ROL(Eku, 39);
 80017b8:	f8cd c0b8 	str.w	ip, [sp, #184]	@ 0xb8
            BCo = ROL(Ema, 41);
 80017bc:	ea4f 5cd2 	mov.w	ip, r2, lsr #23
 80017c0:	ea4c 2c40 	orr.w	ip, ip, r0, lsl #9
 80017c4:	ea4f 58d0 	mov.w	r8, r0, lsr #23
            BCu = ROL(Ese, 2);
 80017c8:	983c      	ldr	r0, [sp, #240]	@ 0xf0
            BCo = ROL(Ema, 41);
 80017ca:	f8cd c0bc 	str.w	ip, [sp, #188]	@ 0xbc
 80017ce:	ea48 2842 	orr.w	r8, r8, r2, lsl #9
            BCu = ROL(Ese, 2);
 80017d2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80017d4:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 80017d8:	ea4c 7c92 	orr.w	ip, ip, r2, lsr #30
 80017dc:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80017de:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 80017e2:	ea4f 0c82 	mov.w	ip, r2, lsl #2
            Aba =   BCa ^((~BCe)&  BCi );
 80017e6:	9a01      	ldr	r2, [sp, #4]
            BCu = ROL(Ese, 2);
 80017e8:	ea4c 7c90 	orr.w	ip, ip, r0, lsr #30
            BCu = ROL(Esu, 14);
 80017ec:	03ad      	lsls	r5, r5, #14
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80017ee:	980b      	ldr	r0, [sp, #44]	@ 0x2c
            BCu = ROL(Esu, 14);
 80017f0:	ea45 459a 	orr.w	r5, r5, sl, lsr #18
            Aba =   BCa ^((~BCe)&  BCi );
 80017f4:	ea22 0a0b 	bic.w	sl, r2, fp
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 80017f8:	ea80 0a0a 	eor.w	sl, r0, sl
            Aba =   BCa ^((~BCe)&  BCi );
 80017fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80017fe:	9802      	ldr	r0, [sp, #8]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8001800:	f8cd a018 	str.w	sl, [sp, #24]
            Aba =   BCa ^((~BCe)&  BCi );
 8001804:	ea20 0a02 	bic.w	sl, r0, r2
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 8001808:	980d      	ldr	r0, [sp, #52]	@ 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 800180a:	9a01      	ldr	r2, [sp, #4]
            Aba ^= (uint64_t)KeccakF_RoundConstants[round+1];
 800180c:	ea80 0a0a 	eor.w	sl, r0, sl
 8001810:	f8cd a01c 	str.w	sl, [sp, #28]
            Abu =   BCu ^((~BCa)&  BCe );
 8001814:	9810      	ldr	r0, [sp, #64]	@ 0x40
            Abe =   BCe ^((~BCi)&  BCo );
 8001816:	ea24 0a02 	bic.w	sl, r4, r2
 800181a:	ea8a 0a0b 	eor.w	sl, sl, fp
            Abi =   BCi ^((~BCo)&  BCu );
 800181e:	9a01      	ldr	r2, [sp, #4]
            Abe =   BCe ^((~BCi)&  BCo );
 8001820:	f8cd a020 	str.w	sl, [sp, #32]
            Abu =   BCu ^((~BCa)&  BCe );
 8001824:	ea2b 0a00 	bic.w	sl, fp, r0
            Abo =   BCo ^((~BCu)&  BCa );
 8001828:	ea20 0b05 	bic.w	fp, r0, r5
 800182c:	ea8b 0b04 	eor.w	fp, fp, r4
            Abi =   BCi ^((~BCo)&  BCu );
 8001830:	ea25 0404 	bic.w	r4, r5, r4
            Abu =   BCu ^((~BCa)&  BCe );
 8001834:	ea8a 0a05 	eor.w	sl, sl, r5
            Abo =   BCo ^((~BCu)&  BCa );
 8001838:	f8cd b02c 	str.w	fp, [sp, #44]	@ 0x2c
            Abi =   BCi ^((~BCo)&  BCu );
 800183c:	ea84 0b02 	eor.w	fp, r4, r2
 8001840:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
            Abu =   BCu ^((~BCa)&  BCe );
 8001844:	f8cd a034 	str.w	sl, [sp, #52]	@ 0x34
            Abe =   BCe ^((~BCi)&  BCo );
 8001848:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 800184a:	9802      	ldr	r0, [sp, #8]
 800184c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800184e:	ea25 0400 	bic.w	r4, r5, r0
 8001852:	ea84 0a02 	eor.w	sl, r4, r2
            Abu =   BCu ^((~BCa)&  BCe );
 8001856:	9c11      	ldr	r4, [sp, #68]	@ 0x44
            Abo =   BCo ^((~BCu)&  BCa );
 8001858:	9803      	ldr	r0, [sp, #12]
            Abe =   BCe ^((~BCi)&  BCo );
 800185a:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
            Abu =   BCu ^((~BCa)&  BCe );
 800185e:	ea22 0504 	bic.w	r5, r2, r4
            Abo =   BCo ^((~BCu)&  BCa );
 8001862:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8001864:	ea24 0400 	bic.w	r4, r4, r0
 8001868:	ea84 0a02 	eor.w	sl, r4, r2
            Abi =   BCi ^((~BCo)&  BCu );
 800186c:	ea20 0402 	bic.w	r4, r0, r2
 8001870:	9802      	ldr	r0, [sp, #8]
            Abo =   BCo ^((~BCu)&  BCa );
 8001872:	f8cd a030 	str.w	sl, [sp, #48]	@ 0x30
            Abi =   BCi ^((~BCo)&  BCu );
 8001876:	ea84 0a00 	eor.w	sl, r4, r0
            Abu =   BCu ^((~BCa)&  BCe );
 800187a:	9803      	ldr	r0, [sp, #12]
            Aga =   BCa ^((~BCe)&  BCi );
 800187c:	9a04      	ldr	r2, [sp, #16]
            Abi =   BCi ^((~BCo)&  BCu );
 800187e:	f8cd a008 	str.w	sl, [sp, #8]
            Abu =   BCu ^((~BCa)&  BCe );
 8001882:	ea85 0a00 	eor.w	sl, r5, r0
            Aga =   BCa ^((~BCe)&  BCi );
 8001886:	9812      	ldr	r0, [sp, #72]	@ 0x48
            Abu =   BCu ^((~BCa)&  BCe );
 8001888:	f8cd a00c 	str.w	sl, [sp, #12]
            Aga =   BCa ^((~BCe)&  BCi );
 800188c:	ea22 0400 	bic.w	r4, r2, r0
 8001890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8001892:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8001894:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8001896:	ea84 0a02 	eor.w	sl, r4, r2
 800189a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 800189c:	f8cd a038 	str.w	sl, [sp, #56]	@ 0x38
 80018a0:	ea24 0400 	bic.w	r4, r4, r0
            Age =   BCe ^((~BCi)&  BCo );
 80018a4:	9804      	ldr	r0, [sp, #16]
            Aga =   BCa ^((~BCe)&  BCi );
 80018a6:	ea84 0a05 	eor.w	sl, r4, r5
            Age =   BCe ^((~BCi)&  BCo );
 80018aa:	ea26 0400 	bic.w	r4, r6, r0
 80018ae:	9812      	ldr	r0, [sp, #72]	@ 0x48
            Aga =   BCa ^((~BCe)&  BCi );
 80018b0:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
            Age =   BCe ^((~BCi)&  BCo );
 80018b4:	ea84 0a00 	eor.w	sl, r4, r0
            Agu =   BCu ^((~BCa)&  BCe );
 80018b8:	ea20 0002 	bic.w	r0, r0, r2
            Ago =   BCo ^((~BCu)&  BCa );
 80018bc:	ea22 0407 	bic.w	r4, r2, r7
            Agi =   BCi ^((~BCo)&  BCu );
 80018c0:	9a04      	ldr	r2, [sp, #16]
            Age =   BCe ^((~BCi)&  BCo );
 80018c2:	f8cd a040 	str.w	sl, [sp, #64]	@ 0x40
            Ago =   BCo ^((~BCu)&  BCa );
 80018c6:	ea84 0a06 	eor.w	sl, r4, r6
            Agi =   BCi ^((~BCo)&  BCu );
 80018ca:	ea27 0606 	bic.w	r6, r7, r6
            Ago =   BCo ^((~BCu)&  BCa );
 80018ce:	f8cd a048 	str.w	sl, [sp, #72]	@ 0x48
            Agi =   BCi ^((~BCo)&  BCu );
 80018d2:	ea86 0a02 	eor.w	sl, r6, r2
 80018d6:	f8cd a010 	str.w	sl, [sp, #16]
            Agu =   BCu ^((~BCa)&  BCe );
 80018da:	ea80 0a07 	eor.w	sl, r0, r7
            Age =   BCe ^((~BCi)&  BCo );
 80018de:	e9dd 4715 	ldrd	r4, r7, [sp, #84]	@ 0x54
            Ago =   BCo ^((~BCu)&  BCa );
 80018e2:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
            Age =   BCe ^((~BCi)&  BCo );
 80018e4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
            Agu =   BCu ^((~BCa)&  BCe );
 80018e6:	f8cd a050 	str.w	sl, [sp, #80]	@ 0x50
            Age =   BCe ^((~BCi)&  BCo );
 80018ea:	ea27 0204 	bic.w	r2, r7, r4
 80018ee:	ea82 0b00 	eor.w	fp, r2, r0
            Ago =   BCo ^((~BCu)&  BCa );
 80018f2:	ea25 0206 	bic.w	r2, r5, r6
 80018f6:	ea82 0a07 	eor.w	sl, r2, r7
            Agi =   BCi ^((~BCo)&  BCu );
 80018fa:	ea26 0207 	bic.w	r2, r6, r7
            Agu =   BCu ^((~BCa)&  BCe );
 80018fe:	ea20 0005 	bic.w	r0, r0, r5
            Ago =   BCo ^((~BCu)&  BCa );
 8001902:	f8cd a04c 	str.w	sl, [sp, #76]	@ 0x4c
            Agi =   BCi ^((~BCo)&  BCu );
 8001906:	ea82 0a04 	eor.w	sl, r2, r4
 800190a:	f8cd a044 	str.w	sl, [sp, #68]	@ 0x44
            Aka =   BCa ^((~BCe)&  BCi );
 800190e:	e9dd 571b 	ldrd	r5, r7, [sp, #108]	@ 0x6c
            Agu =   BCu ^((~BCa)&  BCe );
 8001912:	ea80 0a06 	eor.w	sl, r0, r6
            Aka =   BCa ^((~BCe)&  BCi );
 8001916:	9a05      	ldr	r2, [sp, #20]
 8001918:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800191a:	9818      	ldr	r0, [sp, #96]	@ 0x60
 800191c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
            Agu =   BCu ^((~BCa)&  BCe );
 800191e:	f8cd a054 	str.w	sl, [sp, #84]	@ 0x54
            Aka =   BCa ^((~BCe)&  BCi );
 8001922:	ea22 0206 	bic.w	r2, r2, r6
 8001926:	ea82 0a00 	eor.w	sl, r2, r0
 800192a:	ea27 0205 	bic.w	r2, r7, r5
 800192e:	f8cd a058 	str.w	sl, [sp, #88]	@ 0x58
 8001932:	ea82 0a04 	eor.w	sl, r2, r4
            Ake =   BCe ^((~BCi)&  BCo );
 8001936:	9a05      	ldr	r2, [sp, #20]
            Aka =   BCa ^((~BCe)&  BCi );
 8001938:	f8cd a05c 	str.w	sl, [sp, #92]	@ 0x5c
            Ake =   BCe ^((~BCi)&  BCo );
 800193c:	ea21 0202 	bic.w	r2, r1, r2
 8001940:	ea82 0a06 	eor.w	sl, r2, r6
            Aku =   BCu ^((~BCa)&  BCe );
 8001944:	ea26 0200 	bic.w	r2, r6, r0
            Ako =   BCo ^((~BCu)&  BCa );
 8001948:	ea20 000e 	bic.w	r0, r0, lr
            Ake =   BCe ^((~BCi)&  BCo );
 800194c:	f8cd a060 	str.w	sl, [sp, #96]	@ 0x60
            Ako =   BCo ^((~BCu)&  BCa );
 8001950:	ea80 0a01 	eor.w	sl, r0, r1
            Aki =   BCi ^((~BCo)&  BCu );
 8001954:	9805      	ldr	r0, [sp, #20]
            Ako =   BCo ^((~BCu)&  BCa );
 8001956:	f8cd a06c 	str.w	sl, [sp, #108]	@ 0x6c
            Aki =   BCi ^((~BCo)&  BCu );
 800195a:	ea2e 0101 	bic.w	r1, lr, r1
 800195e:	ea81 0a00 	eor.w	sl, r1, r0
            Ake =   BCe ^((~BCi)&  BCo );
 8001962:	981e      	ldr	r0, [sp, #120]	@ 0x78
            Ama =   BCa ^((~BCe)&  BCi );
 8001964:	9e25      	ldr	r6, [sp, #148]	@ 0x94
            Aki =   BCi ^((~BCo)&  BCu );
 8001966:	f8cd a064 	str.w	sl, [sp, #100]	@ 0x64
            Aku =   BCu ^((~BCa)&  BCe );
 800196a:	ea82 0e0e 	eor.w	lr, r2, lr
            Ake =   BCe ^((~BCi)&  BCo );
 800196e:	ea20 0207 	bic.w	r2, r0, r7
            Aku =   BCu ^((~BCa)&  BCe );
 8001972:	f8cd e074 	str.w	lr, [sp, #116]	@ 0x74
            Ake =   BCe ^((~BCi)&  BCo );
 8001976:	ea82 0e05 	eor.w	lr, r2, r5
            Aku =   BCu ^((~BCa)&  BCe );
 800197a:	ea25 0204 	bic.w	r2, r5, r4
            Ako =   BCo ^((~BCu)&  BCa );
 800197e:	9d1f      	ldr	r5, [sp, #124]	@ 0x7c
            Ake =   BCe ^((~BCi)&  BCo );
 8001980:	f8cd e014 	str.w	lr, [sp, #20]
            Ako =   BCo ^((~BCu)&  BCa );
 8001984:	ea24 0105 	bic.w	r1, r4, r5
 8001988:	ea81 0e00 	eor.w	lr, r1, r0
            Aki =   BCi ^((~BCo)&  BCu );
 800198c:	ea25 0100 	bic.w	r1, r5, r0
            Ama =   BCa ^((~BCe)&  BCi );
 8001990:	9c22      	ldr	r4, [sp, #136]	@ 0x88
            Ako =   BCo ^((~BCu)&  BCa );
 8001992:	f8cd e070 	str.w	lr, [sp, #112]	@ 0x70
            Aki =   BCi ^((~BCo)&  BCu );
 8001996:	ea81 0e07 	eor.w	lr, r1, r7
            Ama =   BCa ^((~BCe)&  BCi );
 800199a:	9f24      	ldr	r7, [sp, #144]	@ 0x90
 800199c:	9920      	ldr	r1, [sp, #128]	@ 0x80
            Aki =   BCi ^((~BCo)&  BCu );
 800199e:	f8cd e068 	str.w	lr, [sp, #104]	@ 0x68
            Aku =   BCu ^((~BCa)&  BCe );
 80019a2:	ea82 0e05 	eor.w	lr, r2, r5
            Ama =   BCa ^((~BCe)&  BCi );
 80019a6:	9d23      	ldr	r5, [sp, #140]	@ 0x8c
 80019a8:	9821      	ldr	r0, [sp, #132]	@ 0x84
            Aku =   BCu ^((~BCa)&  BCe );
 80019aa:	f8cd e078 	str.w	lr, [sp, #120]	@ 0x78
            Ama =   BCa ^((~BCe)&  BCi );
 80019ae:	ea27 0204 	bic.w	r2, r7, r4
 80019b2:	ea82 0e01 	eor.w	lr, r2, r1
 80019b6:	ea26 0205 	bic.w	r2, r6, r5
 80019ba:	ea82 0a00 	eor.w	sl, r2, r0
            Ame =   BCe ^((~BCi)&  BCo );
 80019be:	ea23 0207 	bic.w	r2, r3, r7
            Ama =   BCa ^((~BCe)&  BCi );
 80019c2:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
            Ame =   BCe ^((~BCi)&  BCo );
 80019c6:	ea82 0e04 	eor.w	lr, r2, r4
            Amu =   BCu ^((~BCa)&  BCe );
 80019ca:	ea24 0201 	bic.w	r2, r4, r1
            Amo =   BCo ^((~BCu)&  BCa );
 80019ce:	ea21 0109 	bic.w	r1, r1, r9
            Ame =   BCe ^((~BCi)&  BCo );
 80019d2:	f8cd e080 	str.w	lr, [sp, #128]	@ 0x80
            Amo =   BCo ^((~BCu)&  BCa );
 80019d6:	ea81 0e03 	eor.w	lr, r1, r3
            Ami =   BCi ^((~BCo)&  BCu );
 80019da:	ea29 0303 	bic.w	r3, r9, r3
 80019de:	405f      	eors	r7, r3
 80019e0:	9722      	str	r7, [sp, #136]	@ 0x88
            Amu =   BCu ^((~BCa)&  BCe );
 80019e2:	ea82 0709 	eor.w	r7, r2, r9
 80019e6:	9726      	str	r7, [sp, #152]	@ 0x98
            Amo =   BCo ^((~BCu)&  BCa );
 80019e8:	f8cd e090 	str.w	lr, [sp, #144]	@ 0x90
            Ame =   BCe ^((~BCi)&  BCo );
 80019ec:	9927      	ldr	r1, [sp, #156]	@ 0x9c
            Amo =   BCo ^((~BCu)&  BCa );
 80019ee:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
            Ame =   BCe ^((~BCi)&  BCo );
 80019f0:	ea21 0306 	bic.w	r3, r1, r6
 80019f4:	ea83 0705 	eor.w	r7, r3, r5
            Amo =   BCo ^((~BCu)&  BCa );
 80019f8:	ea20 0204 	bic.w	r2, r0, r4
            Ame =   BCe ^((~BCi)&  BCo );
 80019fc:	9721      	str	r7, [sp, #132]	@ 0x84
            Amo =   BCo ^((~BCu)&  BCa );
 80019fe:	ea82 0701 	eor.w	r7, r2, r1
            Ami =   BCi ^((~BCo)&  BCu );
 8001a02:	ea24 0201 	bic.w	r2, r4, r1
            Amu =   BCu ^((~BCa)&  BCe );
 8001a06:	ea25 0300 	bic.w	r3, r5, r0
            Amo =   BCo ^((~BCu)&  BCa );
 8001a0a:	9725      	str	r7, [sp, #148]	@ 0x94
            Asa =   BCa ^((~BCe)&  BCi );
 8001a0c:	982d      	ldr	r0, [sp, #180]	@ 0xb4
 8001a0e:	9d2c      	ldr	r5, [sp, #176]	@ 0xb0
 8001a10:	992a      	ldr	r1, [sp, #168]	@ 0xa8
            Ami =   BCi ^((~BCo)&  BCu );
 8001a12:	ea82 0706 	eor.w	r7, r2, r6
 8001a16:	9723      	str	r7, [sp, #140]	@ 0x8c
            Amu =   BCu ^((~BCa)&  BCe );
 8001a18:	ea83 0704 	eor.w	r7, r3, r4
            Asa =   BCa ^((~BCe)&  BCi );
 8001a1c:	9c2b      	ldr	r4, [sp, #172]	@ 0xac
 8001a1e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8001a20:	9e2e      	ldr	r6, [sp, #184]	@ 0xb8
            Amu =   BCu ^((~BCa)&  BCe );
 8001a22:	9727      	str	r7, [sp, #156]	@ 0x9c
            Ase =   BCe ^((~BCi)&  BCo );
 8001a24:	ea28 0300 	bic.w	r3, r8, r0
            Asa =   BCa ^((~BCe)&  BCi );
 8001a28:	ea20 0904 	bic.w	r9, r0, r4
            Ase =   BCe ^((~BCi)&  BCo );
 8001a2c:	4063      	eors	r3, r4
            Asa =   BCa ^((~BCe)&  BCi );
 8001a2e:	ea89 0902 	eor.w	r9, r9, r2
            Ase =   BCe ^((~BCi)&  BCo );
 8001a32:	9328      	str	r3, [sp, #160]	@ 0xa0
            Asi =   BCi ^((~BCo)&  BCu );
            Aso =   BCo ^((~BCu)&  BCa );
            Asu =   BCu ^((~BCa)&  BCe );
 8001a34:	ea24 0302 	bic.w	r3, r4, r2
            Aso =   BCo ^((~BCu)&  BCa );
 8001a38:	ea22 020c 	bic.w	r2, r2, ip
 8001a3c:	ea82 0408 	eor.w	r4, r2, r8
            Asi =   BCi ^((~BCo)&  BCu );
 8001a40:	ea2c 0808 	bic.w	r8, ip, r8
 8001a44:	ea88 0800 	eor.w	r8, r8, r0
            Ase =   BCe ^((~BCi)&  BCo );
 8001a48:	982f      	ldr	r0, [sp, #188]	@ 0xbc
            Aso =   BCo ^((~BCu)&  BCa );
 8001a4a:	942b      	str	r4, [sp, #172]	@ 0xac
            Asu =   BCu ^((~BCa)&  BCe );
 8001a4c:	ea83 030c 	eor.w	r3, r3, ip
 8001a50:	932d      	str	r3, [sp, #180]	@ 0xb4
            Ase =   BCe ^((~BCi)&  BCo );
 8001a52:	ea20 0306 	bic.w	r3, r0, r6
            Aso =   BCo ^((~BCu)&  BCa );
 8001a56:	9c30      	ldr	r4, [sp, #192]	@ 0xc0
            Ase =   BCe ^((~BCi)&  BCo );
 8001a58:	406b      	eors	r3, r5
 8001a5a:	9329      	str	r3, [sp, #164]	@ 0xa4
            Asu =   BCu ^((~BCa)&  BCe );
 8001a5c:	ea25 0301 	bic.w	r3, r5, r1
            Aso =   BCo ^((~BCu)&  BCa );
 8001a60:	ea21 0204 	bic.w	r2, r1, r4
            Asu =   BCu ^((~BCa)&  BCe );
 8001a64:	4063      	eors	r3, r4
            Asa =   BCa ^((~BCe)&  BCi );
 8001a66:	ea26 0705 	bic.w	r7, r6, r5
            Aso =   BCo ^((~BCu)&  BCa );
 8001a6a:	4042      	eors	r2, r0
            Asa =   BCa ^((~BCe)&  BCi );
 8001a6c:	404f      	eors	r7, r1
            Asu =   BCu ^((~BCa)&  BCe );
 8001a6e:	932e      	str	r3, [sp, #184]	@ 0xb8
        for( round = 0; round < NROUNDS; round += 2 )
 8001a70:	9900      	ldr	r1, [sp, #0]
 8001a72:	4b3d      	ldr	r3, [pc, #244]	@ (8001b68 <KeccakF1600_StatePermute+0x114c>)
            Aso =   BCo ^((~BCu)&  BCa );
 8001a74:	922c      	str	r2, [sp, #176]	@ 0xb0
            Asi =   BCi ^((~BCo)&  BCu );
 8001a76:	ea24 0200 	bic.w	r2, r4, r0
 8001a7a:	4072      	eors	r2, r6
        for( round = 0; round < NROUNDS; round += 2 )
 8001a7c:	428b      	cmp	r3, r1
            Asi =   BCi ^((~BCo)&  BCu );
 8001a7e:	922a      	str	r2, [sp, #168]	@ 0xa8
        for( round = 0; round < NROUNDS; round += 2 )
 8001a80:	f47f a844 	bne.w	8000b0c <KeccakF1600_StatePermute+0xf0>
        }

        //copyToState(state, A)
        state[ 0] = Aba;
 8001a84:	983d      	ldr	r0, [sp, #244]	@ 0xf4
 8001a86:	9b06      	ldr	r3, [sp, #24]
 8001a88:	6003      	str	r3, [r0, #0]
 8001a8a:	9b07      	ldr	r3, [sp, #28]
 8001a8c:	6043      	str	r3, [r0, #4]
        state[ 1] = Abe;
 8001a8e:	9b08      	ldr	r3, [sp, #32]
 8001a90:	6083      	str	r3, [r0, #8]
 8001a92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001a94:	60c3      	str	r3, [r0, #12]
        state[ 2] = Abi;
 8001a96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8001a98:	6103      	str	r3, [r0, #16]
 8001a9a:	9b02      	ldr	r3, [sp, #8]
 8001a9c:	6143      	str	r3, [r0, #20]
        state[ 3] = Abo;
 8001a9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8001aa0:	6183      	str	r3, [r0, #24]
 8001aa2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8001aa4:	61c3      	str	r3, [r0, #28]
        state[ 4] = Abu;
 8001aa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8001aa8:	6203      	str	r3, [r0, #32]
 8001aaa:	9b03      	ldr	r3, [sp, #12]
 8001aac:	6243      	str	r3, [r0, #36]	@ 0x24
        state[ 5] = Aga;
 8001aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8001ab0:	6283      	str	r3, [r0, #40]	@ 0x28
 8001ab2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8001ab4:	62c3      	str	r3, [r0, #44]	@ 0x2c
        state[ 6] = Age;
 8001ab6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8001ab8:	6303      	str	r3, [r0, #48]	@ 0x30
        state[ 7] = Agi;
 8001aba:	9b04      	ldr	r3, [sp, #16]
 8001abc:	6383      	str	r3, [r0, #56]	@ 0x38
 8001abe:	9b11      	ldr	r3, [sp, #68]	@ 0x44
        state[ 6] = Age;
 8001ac0:	f8c0 b034 	str.w	fp, [r0, #52]	@ 0x34
        state[ 7] = Agi;
 8001ac4:	63c3      	str	r3, [r0, #60]	@ 0x3c
        state[ 8] = Ago;
 8001ac6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8001ac8:	6403      	str	r3, [r0, #64]	@ 0x40
 8001aca:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8001acc:	6443      	str	r3, [r0, #68]	@ 0x44
        state[ 9] = Agu;
 8001ace:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8001ad0:	6483      	str	r3, [r0, #72]	@ 0x48
 8001ad2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8001ad4:	64c3      	str	r3, [r0, #76]	@ 0x4c
        state[10] = Aka;
 8001ad6:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8001ad8:	6503      	str	r3, [r0, #80]	@ 0x50
 8001ada:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8001adc:	6543      	str	r3, [r0, #84]	@ 0x54
        state[11] = Ake;
 8001ade:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8001ae0:	6583      	str	r3, [r0, #88]	@ 0x58
 8001ae2:	9b05      	ldr	r3, [sp, #20]
 8001ae4:	65c3      	str	r3, [r0, #92]	@ 0x5c
        state[12] = Aki;
 8001ae6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8001ae8:	6603      	str	r3, [r0, #96]	@ 0x60
 8001aea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8001aec:	6643      	str	r3, [r0, #100]	@ 0x64
        state[13] = Ako;
 8001aee:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8001af0:	6683      	str	r3, [r0, #104]	@ 0x68
 8001af2:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8001af4:	66c3      	str	r3, [r0, #108]	@ 0x6c
        state[14] = Aku;
 8001af6:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8001af8:	6703      	str	r3, [r0, #112]	@ 0x70
 8001afa:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8001afc:	6743      	str	r3, [r0, #116]	@ 0x74
        state[15] = Ama;
 8001afe:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8001b00:	e9c0 3a1e 	strd	r3, sl, [r0, #120]	@ 0x78
        state[16] = Ame;
 8001b04:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8001b06:	f8c0 3080 	str.w	r3, [r0, #128]	@ 0x80
 8001b0a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8001b0c:	f8c0 3084 	str.w	r3, [r0, #132]	@ 0x84
        state[17] = Ami;
 8001b10:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8001b12:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
 8001b16:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8001b18:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
        state[18] = Amo;
 8001b1c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8001b1e:	f8c0 3094 	str.w	r3, [r0, #148]	@ 0x94
        state[19] = Amu;
 8001b22:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8001b24:	f8c0 3098 	str.w	r3, [r0, #152]	@ 0x98
 8001b28:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
        state[18] = Amo;
 8001b2a:	f8c0 e090 	str.w	lr, [r0, #144]	@ 0x90
        state[20] = Asa;
 8001b2e:	e9c0 3927 	strd	r3, r9, [r0, #156]	@ 0x9c
        state[21] = Ase;
 8001b32:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8001b34:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
 8001b38:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8001b3a:	f8c0 30ac 	str.w	r3, [r0, #172]	@ 0xac
        state[22] = Asi;
        state[23] = Aso;
 8001b3e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8001b40:	f8c0 30b8 	str.w	r3, [r0, #184]	@ 0xb8
 8001b44:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8001b46:	f8c0 30bc 	str.w	r3, [r0, #188]	@ 0xbc
        state[24] = Asu;
 8001b4a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8001b4c:	f8c0 30c0 	str.w	r3, [r0, #192]	@ 0xc0
 8001b50:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
        state[20] = Asa;
 8001b52:	f8c0 70a4 	str.w	r7, [r0, #164]	@ 0xa4
        state[22] = Asi;
 8001b56:	f8c0 80b0 	str.w	r8, [r0, #176]	@ 0xb0
 8001b5a:	f8c0 20b4 	str.w	r2, [r0, #180]	@ 0xb4
        state[24] = Asu;
 8001b5e:	f8c0 30c4 	str.w	r3, [r0, #196]	@ 0xc4

        #undef    round
}
 8001b62:	b03f      	add	sp, #252	@ 0xfc
 8001b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001b68:	08005020 	.word	0x08005020

08001b6c <cal_sign_rej_num>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void cal_sign_rej_num(){
 8001b6c:	b570      	push	{r4, r5, r6, lr}
	randombytes_init(seed);
 8001b6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001bd8 <cal_sign_rej_num+0x6c>)
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
		randombytes(tmp,4);
 8001b70:	4d1a      	ldr	r5, [pc, #104]	@ (8001bdc <cal_sign_rej_num+0x70>)
	randombytes_init(seed);
 8001b72:	6818      	ldr	r0, [r3, #0]
void cal_sign_rej_num(){
 8001b74:	b084      	sub	sp, #16
	randombytes_init(seed);
 8001b76:	f001 fc6b 	bl	8003450 <randombytes_init>
 8001b7a:	2464      	movs	r4, #100	@ 0x64
		randombytes(tmp,4);
 8001b7c:	2104      	movs	r1, #4
 8001b7e:	4628      	mov	r0, r5
 8001b80:	f001 fc6c 	bl	800345c <randombytes>
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
 8001b84:	3c01      	subs	r4, #1
 8001b86:	d1f9      	bne.n	8001b7c <cal_sign_rej_num+0x10>
	rej_num = 0;
	mlen = 0;
 8001b88:	4d15      	ldr	r5, [pc, #84]	@ (8001be0 <cal_sign_rej_num+0x74>)
	rej_num = 0;
 8001b8a:	4e16      	ldr	r6, [pc, #88]	@ (8001be4 <cal_sign_rej_num+0x78>)
	mlen = 0;
 8001b8c:	602c      	str	r4, [r5, #0]
	randombytes(&mlen,4);
 8001b8e:	4628      	mov	r0, r5
 8001b90:	2104      	movs	r1, #4
	rej_num = 0;
 8001b92:	6034      	str	r4, [r6, #0]
	randombytes(&mlen,4);
 8001b94:	f001 fc62 	bl	800345c <randombytes>
	mlen &= 0xff;
 8001b98:	7829      	ldrb	r1, [r5, #0]
	randombytes(m,mlen);
 8001b9a:	4813      	ldr	r0, [pc, #76]	@ (8001be8 <cal_sign_rej_num+0x7c>)
	mlen &= 0xff;
 8001b9c:	6029      	str	r1, [r5, #0]
	randombytes(m,mlen);
 8001b9e:	f001 fc5d 	bl	800345c <randombytes>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ba2:	4622      	mov	r2, r4
 8001ba4:	4811      	ldr	r0, [pc, #68]	@ (8001bec <cal_sign_rej_num+0x80>)
	PQCLEAN_MLDSA44_CLEAN_crypto_sign(sm, &smlen, m, mlen, sk, -2, -2, &rej_num);
 8001ba6:	4c12      	ldr	r4, [pc, #72]	@ (8001bf0 <cal_sign_rej_num+0x84>)
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001ba8:	2101      	movs	r1, #1
 8001baa:	f002 fcc5 	bl	8004538 <HAL_GPIO_WritePin>
	PQCLEAN_MLDSA44_CLEAN_crypto_sign(sm, &smlen, m, mlen, sk, -2, -2, &rej_num);
 8001bae:	f06f 0101 	mvn.w	r1, #1
 8001bb2:	682b      	ldr	r3, [r5, #0]
 8001bb4:	4a0c      	ldr	r2, [pc, #48]	@ (8001be8 <cal_sign_rej_num+0x7c>)
 8001bb6:	9101      	str	r1, [sp, #4]
 8001bb8:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8001bbc:	9400      	str	r4, [sp, #0]
 8001bbe:	490d      	ldr	r1, [pc, #52]	@ (8001bf4 <cal_sign_rej_num+0x88>)
 8001bc0:	480d      	ldr	r0, [pc, #52]	@ (8001bf8 <cal_sign_rej_num+0x8c>)
 8001bc2:	f002 f8c7 	bl	8003d54 <PQCLEAN_MLDSA44_CLEAN_crypto_sign>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4808      	ldr	r0, [pc, #32]	@ (8001bec <cal_sign_rej_num+0x80>)
 8001bca:	4611      	mov	r1, r2
}
 8001bcc:	b004      	add	sp, #16
 8001bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001bd2:	f002 bcb1 	b.w	8004538 <HAL_GPIO_WritePin>
 8001bd6:	bf00      	nop
 8001bd8:	20000008 	.word	0x20000008
 8001bdc:	20000034 	.word	0x20000034
 8001be0:	200024e0 	.word	0x200024e0
 8001be4:	20000040 	.word	0x20000040
 8001be8:	200020d8 	.word	0x200020d8
 8001bec:	40020800 	.word	0x40020800
 8001bf0:	20000044 	.word	0x20000044
 8001bf4:	200024dc 	.word	0x200024dc
 8001bf8:	20000f64 	.word	0x20000f64

08001bfc <sign>:

void sign(){
 8001bfc:	b530      	push	{r4, r5, lr}
	randombytes_init(seed);
 8001bfe:	4b15      	ldr	r3, [pc, #84]	@ (8001c54 <sign+0x58>)
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
		randombytes(tmp,4);
 8001c00:	4d15      	ldr	r5, [pc, #84]	@ (8001c58 <sign+0x5c>)
	randombytes_init(seed);
 8001c02:	6818      	ldr	r0, [r3, #0]
void sign(){
 8001c04:	b085      	sub	sp, #20
	randombytes_init(seed);
 8001c06:	f001 fc23 	bl	8003450 <randombytes_init>
 8001c0a:	2464      	movs	r4, #100	@ 0x64
		randombytes(tmp,4);
 8001c0c:	2104      	movs	r1, #4
 8001c0e:	4628      	mov	r0, r5
 8001c10:	f001 fc24 	bl	800345c <randombytes>
	for(int i=0;i<100;++i) //混淆LFSR制造雪崩效应
 8001c14:	3c01      	subs	r4, #1
 8001c16:	d1f9      	bne.n	8001c0c <sign+0x10>
	mlen = 0;
 8001c18:	4d10      	ldr	r5, [pc, #64]	@ (8001c5c <sign+0x60>)
	randombytes(&mlen,4);
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4628      	mov	r0, r5
	mlen = 0;
 8001c1e:	602c      	str	r4, [r5, #0]
	randombytes(&mlen,4);
 8001c20:	f001 fc1c 	bl	800345c <randombytes>
	mlen &= 0xff;
 8001c24:	7829      	ldrb	r1, [r5, #0]
	randombytes(m,mlen);
 8001c26:	480e      	ldr	r0, [pc, #56]	@ (8001c60 <sign+0x64>)
	mlen &= 0xff;
 8001c28:	6029      	str	r1, [r5, #0]
	randombytes(m,mlen);
 8001c2a:	f001 fc17 	bl	800345c <randombytes>
	PQCLEAN_MLDSA44_CLEAN_crypto_sign(sm, &smlen, m, mlen, sk, trigger_idx, poly_idx, &rej_num);
 8001c2e:	4a0d      	ldr	r2, [pc, #52]	@ (8001c64 <sign+0x68>)
 8001c30:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <sign+0x6c>)
 8001c32:	6811      	ldr	r1, [r2, #0]
 8001c34:	480d      	ldr	r0, [pc, #52]	@ (8001c6c <sign+0x70>)
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	4c0d      	ldr	r4, [pc, #52]	@ (8001c70 <sign+0x74>)
 8001c3a:	682b      	ldr	r3, [r5, #0]
 8001c3c:	9201      	str	r2, [sp, #4]
 8001c3e:	e9cd 1002 	strd	r1, r0, [sp, #8]
 8001c42:	4a07      	ldr	r2, [pc, #28]	@ (8001c60 <sign+0x64>)
 8001c44:	490b      	ldr	r1, [pc, #44]	@ (8001c74 <sign+0x78>)
 8001c46:	9400      	str	r4, [sp, #0]
 8001c48:	480b      	ldr	r0, [pc, #44]	@ (8001c78 <sign+0x7c>)
 8001c4a:	f002 f883 	bl	8003d54 <PQCLEAN_MLDSA44_CLEAN_crypto_sign>
}
 8001c4e:	b005      	add	sp, #20
 8001c50:	bd30      	pop	{r4, r5, pc}
 8001c52:	bf00      	nop
 8001c54:	20000008 	.word	0x20000008
 8001c58:	20000034 	.word	0x20000034
 8001c5c:	200024e0 	.word	0x200024e0
 8001c60:	200020d8 	.word	0x200020d8
 8001c64:	20000038 	.word	0x20000038
 8001c68:	2000003c 	.word	0x2000003c
 8001c6c:	20000040 	.word	0x20000040
 8001c70:	20000044 	.word	0x20000044
 8001c74:	200024dc 	.word	0x200024dc
 8001c78:	20000f64 	.word	0x20000f64

08001c7c <test_algorithm>:

void test_algorithm(){
 8001c7c:	b510      	push	{r4, lr}
	int ret = 0;

	ret = PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(pk, sk);
 8001c7e:	4938      	ldr	r1, [pc, #224]	@ (8001d60 <test_algorithm+0xe4>)
 8001c80:	4838      	ldr	r0, [pc, #224]	@ (8001d64 <test_algorithm+0xe8>)
void test_algorithm(){
 8001c82:	b084      	sub	sp, #16
	ret = PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(pk, sk);
 8001c84:	f001 fc72 	bl	800356c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair>
	if(ret!=0)
 8001c88:	2800      	cmp	r0, #0
 8001c8a:	d150      	bne.n	8001d2e <test_algorithm+0xb2>
		HAL_UART_Transmit(&huart2,"key gen wrong\n",strlen("key gen wrong\n"),1000);
	mlen = 33;
 8001c8c:	4c36      	ldr	r4, [pc, #216]	@ (8001d68 <test_algorithm+0xec>)
	randombytes(m,mlen);
 8001c8e:	4837      	ldr	r0, [pc, #220]	@ (8001d6c <test_algorithm+0xf0>)
	mlen = 33;
 8001c90:	2121      	movs	r1, #33	@ 0x21
 8001c92:	6021      	str	r1, [r4, #0]
	randombytes(m,mlen);
 8001c94:	f001 fbe2 	bl	800345c <randombytes>
	ret = PQCLEAN_MLDSA44_CLEAN_crypto_sign(sm, &smlen, m, mlen, sk,-2,-2,&rej_num);
 8001c98:	4935      	ldr	r1, [pc, #212]	@ (8001d70 <test_algorithm+0xf4>)
 8001c9a:	4831      	ldr	r0, [pc, #196]	@ (8001d60 <test_algorithm+0xe4>)
 8001c9c:	6823      	ldr	r3, [r4, #0]
 8001c9e:	9000      	str	r0, [sp, #0]
 8001ca0:	f06f 0201 	mvn.w	r2, #1
 8001ca4:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8001ca8:	9201      	str	r2, [sp, #4]
 8001caa:	4932      	ldr	r1, [pc, #200]	@ (8001d74 <test_algorithm+0xf8>)
 8001cac:	4a2f      	ldr	r2, [pc, #188]	@ (8001d6c <test_algorithm+0xf0>)
 8001cae:	4832      	ldr	r0, [pc, #200]	@ (8001d78 <test_algorithm+0xfc>)
 8001cb0:	f002 f850 	bl	8003d54 <PQCLEAN_MLDSA44_CLEAN_crypto_sign>
	if(ret!=0)
 8001cb4:	2800      	cmp	r0, #0
 8001cb6:	d14a      	bne.n	8001d4e <test_algorithm+0xd2>
		HAL_UART_Transmit(&huart2,"sign wrong\n",strlen("sign wrong\n"),1000);
	ret = PQCLEAN_MLDSA44_CLEAN_crypto_sign_open(m2,&mlen2,sm,smlen,pk);
 8001cb8:	4b2e      	ldr	r3, [pc, #184]	@ (8001d74 <test_algorithm+0xf8>)
 8001cba:	482a      	ldr	r0, [pc, #168]	@ (8001d64 <test_algorithm+0xe8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001d78 <test_algorithm+0xfc>)
 8001cc0:	9000      	str	r0, [sp, #0]
 8001cc2:	492e      	ldr	r1, [pc, #184]	@ (8001d7c <test_algorithm+0x100>)
 8001cc4:	482e      	ldr	r0, [pc, #184]	@ (8001d80 <test_algorithm+0x104>)
 8001cc6:	f002 f86b 	bl	8003da0 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open>
	if(ret!=0)
 8001cca:	2800      	cmp	r0, #0
 8001ccc:	d137      	bne.n	8001d3e <test_algorithm+0xc2>
		HAL_UART_Transmit(&huart2,"sign open wrong\n",strlen("sign open wrong\n"),1000);
	if(mlen != mlen2)
 8001cce:	4a2b      	ldr	r2, [pc, #172]	@ (8001d7c <test_algorithm+0x100>)
 8001cd0:	6823      	ldr	r3, [r4, #0]
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	428b      	cmp	r3, r1
 8001cd6:	d121      	bne.n	8001d1c <test_algorithm+0xa0>
		HAL_UART_Transmit(&huart2,"mlen2 wrong\n",strlen("mlen2 wrong\n"),1000);
	for(int i=0;i<mlen;++i){
 8001cd8:	b1b1      	cbz	r1, 8001d08 <test_algorithm+0x8c>
 8001cda:	4b24      	ldr	r3, [pc, #144]	@ (8001d6c <test_algorithm+0xf0>)
 8001cdc:	4a28      	ldr	r2, [pc, #160]	@ (8001d80 <test_algorithm+0x104>)
 8001cde:	eb01 0c03 	add.w	ip, r1, r3
 8001ce2:	e001      	b.n	8001ce8 <test_algorithm+0x6c>
 8001ce4:	4563      	cmp	r3, ip
 8001ce6:	d00f      	beq.n	8001d08 <test_algorithm+0x8c>
		if(m[i]!=m2[i]){
 8001ce8:	f813 0b01 	ldrb.w	r0, [r3], #1
 8001cec:	f812 1b01 	ldrb.w	r1, [r2], #1
 8001cf0:	4288      	cmp	r0, r1
 8001cf2:	d0f7      	beq.n	8001ce4 <test_algorithm+0x68>
			HAL_UART_Transmit(&huart2,"m2 wrong\n",strlen("m2 wrong\n"),1000);
 8001cf4:	4923      	ldr	r1, [pc, #140]	@ (8001d84 <test_algorithm+0x108>)
 8001cf6:	4824      	ldr	r0, [pc, #144]	@ (8001d88 <test_algorithm+0x10c>)
 8001cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cfc:	2209      	movs	r2, #9
			return;
		}
	}
	HAL_UART_Transmit(&huart2,"sign test success\n",strlen("sign test success\n"),1000);
}
 8001cfe:	b004      	add	sp, #16
 8001d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2,"sign test success\n",strlen("sign test success\n"),1000);
 8001d04:	f002 bf82 	b.w	8004c0c <HAL_UART_Transmit>
 8001d08:	4920      	ldr	r1, [pc, #128]	@ (8001d8c <test_algorithm+0x110>)
 8001d0a:	481f      	ldr	r0, [pc, #124]	@ (8001d88 <test_algorithm+0x10c>)
 8001d0c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d10:	2212      	movs	r2, #18
}
 8001d12:	b004      	add	sp, #16
 8001d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Transmit(&huart2,"sign test success\n",strlen("sign test success\n"),1000);
 8001d18:	f002 bf78 	b.w	8004c0c <HAL_UART_Transmit>
		HAL_UART_Transmit(&huart2,"mlen2 wrong\n",strlen("mlen2 wrong\n"),1000);
 8001d1c:	491c      	ldr	r1, [pc, #112]	@ (8001d90 <test_algorithm+0x114>)
 8001d1e:	481a      	ldr	r0, [pc, #104]	@ (8001d88 <test_algorithm+0x10c>)
 8001d20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d24:	220c      	movs	r2, #12
 8001d26:	f002 ff71 	bl	8004c0c <HAL_UART_Transmit>
	for(int i=0;i<mlen;++i){
 8001d2a:	6821      	ldr	r1, [r4, #0]
 8001d2c:	e7d4      	b.n	8001cd8 <test_algorithm+0x5c>
		HAL_UART_Transmit(&huart2,"key gen wrong\n",strlen("key gen wrong\n"),1000);
 8001d2e:	4919      	ldr	r1, [pc, #100]	@ (8001d94 <test_algorithm+0x118>)
 8001d30:	4815      	ldr	r0, [pc, #84]	@ (8001d88 <test_algorithm+0x10c>)
 8001d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d36:	220e      	movs	r2, #14
 8001d38:	f002 ff68 	bl	8004c0c <HAL_UART_Transmit>
 8001d3c:	e7a6      	b.n	8001c8c <test_algorithm+0x10>
		HAL_UART_Transmit(&huart2,"sign open wrong\n",strlen("sign open wrong\n"),1000);
 8001d3e:	4916      	ldr	r1, [pc, #88]	@ (8001d98 <test_algorithm+0x11c>)
 8001d40:	4811      	ldr	r0, [pc, #68]	@ (8001d88 <test_algorithm+0x10c>)
 8001d42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d46:	2210      	movs	r2, #16
 8001d48:	f002 ff60 	bl	8004c0c <HAL_UART_Transmit>
 8001d4c:	e7bf      	b.n	8001cce <test_algorithm+0x52>
		HAL_UART_Transmit(&huart2,"sign wrong\n",strlen("sign wrong\n"),1000);
 8001d4e:	4913      	ldr	r1, [pc, #76]	@ (8001d9c <test_algorithm+0x120>)
 8001d50:	480d      	ldr	r0, [pc, #52]	@ (8001d88 <test_algorithm+0x10c>)
 8001d52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d56:	220b      	movs	r2, #11
 8001d58:	f002 ff58 	bl	8004c0c <HAL_UART_Transmit>
 8001d5c:	e7ac      	b.n	8001cb8 <test_algorithm+0x3c>
 8001d5e:	bf00      	nop
 8001d60:	20000044 	.word	0x20000044
 8001d64:	20000a44 	.word	0x20000a44
 8001d68:	200024e0 	.word	0x200024e0
 8001d6c:	200020d8 	.word	0x200020d8
 8001d70:	20000040 	.word	0x20000040
 8001d74:	200024dc 	.word	0x200024dc
 8001d78:	20000f64 	.word	0x20000f64
 8001d7c:	200024d8 	.word	0x200024d8
 8001d80:	20001cd8 	.word	0x20001cd8
 8001d84:	08005064 	.word	0x08005064
 8001d88:	200024e8 	.word	0x200024e8
 8001d8c:	08005070 	.word	0x08005070
 8001d90:	08005054 	.word	0x08005054
 8001d94:	08005020 	.word	0x08005020
 8001d98:	08005040 	.word	0x08005040
 8001d9c:	08005034 	.word	0x08005034

08001da0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	2300      	movs	r3, #0
{
 8001da4:	b095      	sub	sp, #84	@ 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da6:	e9cd 330a 	strd	r3, r3, [sp, #40]	@ 0x28
 8001daa:	e9cd 330c 	strd	r3, r3, [sp, #48]	@ 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dae:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8001db2:	e9cd 3305 	strd	r3, r3, [sp, #20]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001db6:	4921      	ldr	r1, [pc, #132]	@ (8001e3c <SystemClock_Config+0x9c>)
 8001db8:	9301      	str	r3, [sp, #4]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001dba:	9307      	str	r3, [sp, #28]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dbc:	6c08      	ldr	r0, [r1, #64]	@ 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dbe:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <SystemClock_Config+0xa0>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	f040 5080 	orr.w	r0, r0, #268435456	@ 0x10000000
 8001dc4:	6408      	str	r0, [r1, #64]	@ 0x40
 8001dc6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8001dc8:	f001 5180 	and.w	r1, r1, #268435456	@ 0x10000000
 8001dcc:	9101      	str	r1, [sp, #4]
 8001dce:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dd0:	9302      	str	r3, [sp, #8]
 8001dd2:	6813      	ldr	r3, [r2, #0]
 8001dd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dd8:	6013      	str	r3, [r2, #0]
 8001dda:	6813      	ldr	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001ddc:	2001      	movs	r0, #1
 8001dde:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001de6:	e9cd 0108 	strd	r0, r1, [sp, #32]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001dea:	9302      	str	r3, [sp, #8]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001dec:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001df0:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001df2:	e9cd 410e 	strd	r4, r1, [sp, #56]	@ 0x38
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001df6:	9802      	ldr	r0, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 4;
  RCC_OscInitStruct.PLL.PLLN = 168;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df8:	2104      	movs	r1, #4
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e00:	2204      	movs	r2, #4
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e02:	23a8      	movs	r3, #168	@ 0xa8
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e04:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001e06:	9210      	str	r2, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001e08:	9311      	str	r3, [sp, #68]	@ 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e0a:	f002 fb99 	bl	8004540 <HAL_RCC_OscConfig>
 8001e0e:	b108      	cbz	r0, 8001e14 <SystemClock_Config+0x74>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e10:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e12:	e7fe      	b.n	8001e12 <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e14:	220f      	movs	r2, #15
 8001e16:	4603      	mov	r3, r0
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e18:	e9cd 2403 	strd	r2, r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e1c:	f44f 55a0 	mov.w	r5, #5120	@ 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e20:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e24:	a803      	add	r0, sp, #12
 8001e26:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e28:	e9cd 3505 	strd	r3, r5, [sp, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e2c:	9207      	str	r2, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e2e:	f002 fd9d 	bl	800496c <HAL_RCC_ClockConfig>
 8001e32:	b108      	cbz	r0, 8001e38 <SystemClock_Config+0x98>
 8001e34:	b672      	cpsid	i
  while (1)
 8001e36:	e7fe      	b.n	8001e36 <SystemClock_Config+0x96>
}
 8001e38:	b015      	add	sp, #84	@ 0x54
 8001e3a:	bd30      	pop	{r4, r5, pc}
 8001e3c:	40023800 	.word	0x40023800
 8001e40:	40007000 	.word	0x40007000

08001e44 <main>:
{
 8001e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001e48:	b082      	sub	sp, #8
  HAL_Init();
 8001e4a:	f002 f8f7 	bl	800403c <HAL_Init>
  SystemClock_Config();
 8001e4e:	f7ff ffa7 	bl	8001da0 <SystemClock_Config>
  MX_GPIO_Init();
 8001e52:	f7fe fd53 	bl	80008fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e56:	f002 f84b 	bl	8003ef0 <MX_USART2_UART_Init>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	4611      	mov	r1, r2
 8001e5e:	4848      	ldr	r0, [pc, #288]	@ (8001f80 <main+0x13c>)
		randombytes(tmp,4);
 8001e60:	4d48      	ldr	r5, [pc, #288]	@ (8001f84 <main+0x140>)
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8001e62:	f002 fb69 	bl	8004538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8001e66:	4846      	ldr	r0, [pc, #280]	@ (8001f80 <main+0x13c>)
 8001e68:	2201      	movs	r2, #1
 8001e6a:	2102      	movs	r1, #2
 8001e6c:	f002 fb64 	bl	8004538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8001e70:	4843      	ldr	r0, [pc, #268]	@ (8001f80 <main+0x13c>)
 8001e72:	2201      	movs	r2, #1
 8001e74:	2104      	movs	r1, #4
 8001e76:	f002 fb5f 	bl	8004538 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_SET);
 8001e7a:	4841      	ldr	r0, [pc, #260]	@ (8001f80 <main+0x13c>)
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	2108      	movs	r1, #8
 8001e80:	f002 fb5a 	bl	8004538 <HAL_GPIO_WritePin>
	unsigned char op = 0;
 8001e84:	2300      	movs	r3, #0
	randombytes_init(0x3f3f3f3f);
 8001e86:	f04f 303f 	mov.w	r0, #1061109567	@ 0x3f3f3f3f
	unsigned char op = 0;
 8001e8a:	f88d 3007 	strb.w	r3, [sp, #7]
	randombytes_init(0x3f3f3f3f);
 8001e8e:	f001 fadf 	bl	8003450 <randombytes_init>
 8001e92:	2464      	movs	r4, #100	@ 0x64
		randombytes(tmp,4);
 8001e94:	2104      	movs	r1, #4
 8001e96:	4628      	mov	r0, r5
 8001e98:	f001 fae0 	bl	800345c <randombytes>
	for(int i=0;i<100;++i)
 8001e9c:	3c01      	subs	r4, #1
 8001e9e:	d1f9      	bne.n	8001e94 <main+0x50>
	PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(pk, sk); //固定种子生成公私钥，以固定公私钥
 8001ea0:	4939      	ldr	r1, [pc, #228]	@ (8001f88 <main+0x144>)
 8001ea2:	483a      	ldr	r0, [pc, #232]	@ (8001f8c <main+0x148>)
 8001ea4:	f001 fb62 	bl	800356c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair>
	__HAL_FLASH_PREFETCH_BUFFER_DISABLE();
 8001ea8:	4b39      	ldr	r3, [pc, #228]	@ (8001f90 <main+0x14c>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001eb0:	601a      	str	r2, [r3, #0]
	__HAL_FLASH_DATA_CACHE_DISABLE();
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001eb8:	601a      	str	r2, [r3, #0]
 8001eba:	b672      	cpsid	i
 8001ebc:	4f35      	ldr	r7, [pc, #212]	@ (8001f94 <main+0x150>)
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8001ebe:	4e36      	ldr	r6, [pc, #216]	@ (8001f98 <main+0x154>)
				randombytes(tmp,4);
 8001ec0:	4d30      	ldr	r5, [pc, #192]	@ (8001f84 <main+0x140>)
			PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(pk, sk); //固定种子生成公私钥，以固定公私钥
 8001ec2:	f8df 80c4 	ldr.w	r8, [pc, #196]	@ 8001f88 <main+0x144>
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
	  op=0;
 8001eca:	2400      	movs	r4, #0
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8001ecc:	2201      	movs	r2, #1
 8001ece:	f10d 0107 	add.w	r1, sp, #7
 8001ed2:	4630      	mov	r0, r6
	  op=0;
 8001ed4:	f88d 4007 	strb.w	r4, [sp, #7]
	  HAL_UART_Receive(&huart2,&op,1,1000);
 8001ed8:	f002 ff1c 	bl	8004d14 <HAL_UART_Receive>
	  switch(op){
 8001edc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	2b04      	cmp	r3, #4
 8001ee4:	d815      	bhi.n	8001f12 <main+0xce>
 8001ee6:	e8df f003 	tbb	[pc, r3]
 8001eea:	2817      	.short	0x2817
 8001eec:	1403      	.short	0x1403
 8001eee:	12          	.byte	0x12
 8001eef:	00          	.byte	0x00
			randombytes_init(0x3f3f3f3f);
 8001ef0:	f04f 303f 	mov.w	r0, #1061109567	@ 0x3f3f3f3f
 8001ef4:	f001 faac 	bl	8003450 <randombytes_init>
 8001ef8:	2464      	movs	r4, #100	@ 0x64
				randombytes(tmp,4);
 8001efa:	2104      	movs	r1, #4
 8001efc:	4628      	mov	r0, r5
 8001efe:	f001 faad 	bl	800345c <randombytes>
			for(int i=0;i<100;++i)
 8001f02:	3c01      	subs	r4, #1
 8001f04:	d1f9      	bne.n	8001efa <main+0xb6>
			PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(pk, sk); //固定种子生成公私钥，以固定公私钥
 8001f06:	4821      	ldr	r0, [pc, #132]	@ (8001f8c <main+0x148>)
 8001f08:	4641      	mov	r1, r8
 8001f0a:	f001 fb2f 	bl	800356c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair>
		  test_algorithm();
 8001f0e:	f7ff feb5 	bl	8001c7c <test_algorithm>
		  trigger_idx = 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	603b      	str	r3, [r7, #0]
 8001f16:	e7d6      	b.n	8001ec6 <main+0x82>
		  HAL_UART_Receive(&huart2,(unsigned char*)&seed,sizeof(unsigned int),1000);
 8001f18:	4920      	ldr	r1, [pc, #128]	@ (8001f9c <main+0x158>)
 8001f1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f1e:	2204      	movs	r2, #4
 8001f20:	4630      	mov	r0, r6
 8001f22:	f002 fef7 	bl	8004d14 <HAL_UART_Receive>
		  cal_sign_rej_num();
 8001f26:	f7ff fe21 	bl	8001b6c <cal_sign_rej_num>
		  HAL_UART_Transmit(&huart2,(unsigned char*)&rej_num,4,1000);
 8001f2a:	491d      	ldr	r1, [pc, #116]	@ (8001fa0 <main+0x15c>)
 8001f2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f30:	2204      	movs	r2, #4
 8001f32:	4630      	mov	r0, r6
 8001f34:	f002 fe6a 	bl	8004c0c <HAL_UART_Transmit>
		  break;
 8001f38:	e7c5      	b.n	8001ec6 <main+0x82>
		  HAL_UART_Receive(&huart2,(unsigned char*)&seed,sizeof(unsigned int),1000);
 8001f3a:	4918      	ldr	r1, [pc, #96]	@ (8001f9c <main+0x158>)
 8001f3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f40:	2204      	movs	r2, #4
 8001f42:	4630      	mov	r0, r6
 8001f44:	f002 fee6 	bl	8004d14 <HAL_UART_Receive>
		  HAL_UART_Receive(&huart2,(unsigned char*)&trigger_idx,sizeof(int),1000);
 8001f48:	4912      	ldr	r1, [pc, #72]	@ (8001f94 <main+0x150>)
 8001f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4e:	2204      	movs	r2, #4
 8001f50:	4630      	mov	r0, r6
 8001f52:	f002 fedf 	bl	8004d14 <HAL_UART_Receive>
		  HAL_UART_Receive(&huart2,(unsigned char*)&poly_idx,sizeof(int),1000);
 8001f56:	4913      	ldr	r1, [pc, #76]	@ (8001fa4 <main+0x160>)
 8001f58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f5c:	2204      	movs	r2, #4
 8001f5e:	4630      	mov	r0, r6
 8001f60:	f002 fed8 	bl	8004d14 <HAL_UART_Receive>
		  sign();
 8001f64:	f7ff fe4a 	bl	8001bfc <sign>
		  HAL_UART_Transmit(&huart2,(unsigned char*)done_flag,strlen(done_flag),1000);
 8001f68:	480f      	ldr	r0, [pc, #60]	@ (8001fa8 <main+0x164>)
 8001f6a:	f7fe f92d 	bl	80001c8 <strlen>
 8001f6e:	490e      	ldr	r1, [pc, #56]	@ (8001fa8 <main+0x164>)
 8001f70:	b282      	uxth	r2, r0
 8001f72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f76:	4630      	mov	r0, r6
 8001f78:	f002 fe48 	bl	8004c0c <HAL_UART_Transmit>
		  break;
 8001f7c:	e7a3      	b.n	8001ec6 <main+0x82>
 8001f7e:	bf00      	nop
 8001f80:	40020800 	.word	0x40020800
 8001f84:	20000034 	.word	0x20000034
 8001f88:	20000044 	.word	0x20000044
 8001f8c:	20000a44 	.word	0x20000a44
 8001f90:	40023c00 	.word	0x40023c00
 8001f94:	2000003c 	.word	0x2000003c
 8001f98:	200024e8 	.word	0x200024e8
 8001f9c:	20000008 	.word	0x20000008
 8001fa0:	20000040 	.word	0x20000040
 8001fa4:	20000038 	.word	0x20000038
 8001fa8:	20000000 	.word	0x20000000

08001fac <Error_Handler>:
 8001fac:	b672      	cpsid	i
  while (1)
 8001fae:	e7fe      	b.n	8001fae <Error_Handler+0x2>

08001fb0 <PQCLEAN_MLDSA44_CLEAN_ntt>:
* Description: Forward NTT, in-place. No modular reduction is performed after
*              additions or subtractions. Output vector is in bitreversed order.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_ntt(int32_t a[N]) {
 8001fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    unsigned int len, start, j, k;
    int32_t zeta, t;

    k = 0;
    for (len = 128; len > 0; len >>= 1) {
 8001fb4:	2180      	movs	r1, #128	@ 0x80
void PQCLEAN_MLDSA44_CLEAN_ntt(int32_t a[N]) {
 8001fb6:	b087      	sub	sp, #28
        for (start = 0; start < N; start = j + len) {
            zeta = zetas[++k];
 8001fb8:	2508      	movs	r5, #8
 8001fba:	f246 47f7 	movw	r7, #25847	@ 0x64f7
    k = 0;
 8001fbe:	f04f 0c00 	mov.w	ip, #0
 8001fc2:	460a      	mov	r2, r1
 8001fc4:	4682      	mov	sl, r0
        for (start = 0; start < N; start = j + len) {
 8001fc6:	4b29      	ldr	r3, [pc, #164]	@ (800206c <PQCLEAN_MLDSA44_CLEAN_ntt+0xbc>)
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	f10c 0901 	add.w	r9, ip, #1
 8001fce:	eb03 0e89 	add.w	lr, r3, r9, lsl #2
 8001fd2:	e9cd c504 	strd	ip, r5, [sp, #16]
 8001fd6:	1e53      	subs	r3, r2, #1
 8001fd8:	f04f 0b00 	mov.w	fp, #0
 8001fdc:	9302      	str	r3, [sp, #8]
 8001fde:	1c53      	adds	r3, r2, #1
 8001fe0:	4649      	mov	r1, r9
 8001fe2:	9303      	str	r3, [sp, #12]
 8001fe4:	46b9      	mov	r9, r7
 8001fe6:	46d0      	mov	r8, sl
 8001fe8:	465f      	mov	r7, fp
 8001fea:	46f3      	mov	fp, lr
            for (j = start; j < start + len; ++j) {
 8001fec:	9b01      	ldr	r3, [sp, #4]
 8001fee:	9100      	str	r1, [sp, #0]
 8001ff0:	eb03 0a07 	add.w	sl, r3, r7
 8001ff4:	eb08 068a 	add.w	r6, r8, sl, lsl #2
 8001ff8:	f107 4480 	add.w	r4, r7, #1073741824	@ 0x40000000
 8001ffc:	4633      	mov	r3, r6
 8001ffe:	3c01      	subs	r4, #1
 8002000:	eb08 0484 	add.w	r4, r8, r4, lsl #2
 8002004:	463e      	mov	r6, r7
 8002006:	461d      	mov	r5, r3
                t = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 8002008:	6829      	ldr	r1, [r5, #0]
 800200a:	fb81 0109 	smull	r0, r1, r1, r9
 800200e:	f001 f9f9 	bl	8003404 <PQCLEAN_MLDSA44_CLEAN_montgomery_reduce>
                a[j + len] = a[j] - t;
 8002012:	f854 2f04 	ldr.w	r2, [r4, #4]!
 8002016:	1a12      	subs	r2, r2, r0
 8002018:	f845 2b04 	str.w	r2, [r5], #4
                a[j] = a[j] + t;
 800201c:	6822      	ldr	r2, [r4, #0]
            for (j = start; j < start + len; ++j) {
 800201e:	3601      	adds	r6, #1
                a[j] = a[j] + t;
 8002020:	4402      	add	r2, r0
            for (j = start; j < start + len; ++j) {
 8002022:	4556      	cmp	r6, sl
                a[j] = a[j] + t;
 8002024:	6022      	str	r2, [r4, #0]
            for (j = start; j < start + len; ++j) {
 8002026:	d3ef      	bcc.n	8002008 <PQCLEAN_MLDSA44_CLEAN_ntt+0x58>
 8002028:	9b02      	ldr	r3, [sp, #8]
 800202a:	9a03      	ldr	r2, [sp, #12]
 800202c:	9900      	ldr	r1, [sp, #0]
 800202e:	1c78      	adds	r0, r7, #1
 8002030:	4582      	cmp	sl, r0
 8002032:	bf38      	it	cc
 8002034:	2300      	movcc	r3, #0
 8002036:	443a      	add	r2, r7
        for (start = 0; start < N; start = j + len) {
 8002038:	189f      	adds	r7, r3, r2
 800203a:	2fff      	cmp	r7, #255	@ 0xff
 800203c:	d804      	bhi.n	8002048 <PQCLEAN_MLDSA44_CLEAN_ntt+0x98>
            zeta = zetas[++k];
 800203e:	9104      	str	r1, [sp, #16]
 8002040:	f85b 9f04 	ldr.w	r9, [fp, #4]!
 8002044:	3101      	adds	r1, #1
 8002046:	e7d1      	b.n	8001fec <PQCLEAN_MLDSA44_CLEAN_ntt+0x3c>
    for (len = 128; len > 0; len >>= 1) {
 8002048:	e9dd c504 	ldrd	ip, r5, [sp, #16]
 800204c:	9a01      	ldr	r2, [sp, #4]
 800204e:	3d01      	subs	r5, #1
 8002050:	46c2      	mov	sl, r8
 8002052:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8002056:	d006      	beq.n	8002066 <PQCLEAN_MLDSA44_CLEAN_ntt+0xb6>
            zeta = zetas[++k];
 8002058:	f10c 0302 	add.w	r3, ip, #2
 800205c:	468c      	mov	ip, r1
 800205e:	4903      	ldr	r1, [pc, #12]	@ (800206c <PQCLEAN_MLDSA44_CLEAN_ntt+0xbc>)
 8002060:	f851 7023 	ldr.w	r7, [r1, r3, lsl #2]
 8002064:	e7af      	b.n	8001fc6 <PQCLEAN_MLDSA44_CLEAN_ntt+0x16>
            }
        }
    }
}
 8002066:	b007      	add	sp, #28
 8002068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800206c:	08005084 	.word	0x08005084

08002070 <PQCLEAN_MLDSA44_CLEAN_invntt_tomont>:
*              Q in absolute value. Output coefficient are smaller than Q in
*              absolute value.
*
* Arguments:   - uint32_t p[N]: input/output coefficient array
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_invntt_tomont(int32_t a[N]) {
 8002070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002074:	b085      	sub	sp, #20
    int32_t t, zeta;
    const int32_t f = 41978; // mont^2/256

    k = 256;
    for (len = 1; len < N; len <<= 1) {
        for (start = 0; start < N; start = j + len) {
 8002076:	2408      	movs	r4, #8
    k = 256;
 8002078:	f44f 7980 	mov.w	r9, #256	@ 0x100
    for (len = 1; len < N; len <<= 1) {
 800207c:	f04f 0801 	mov.w	r8, #1
 8002080:	1f03      	subs	r3, r0, #4
 8002082:	9403      	str	r4, [sp, #12]
 8002084:	4602      	mov	r2, r0
 8002086:	464c      	mov	r4, r9
 8002088:	46c3      	mov	fp, r8
 800208a:	9302      	str	r3, [sp, #8]
        for (start = 0; start < N; start = j + len) {
 800208c:	4b29      	ldr	r3, [pc, #164]	@ (8002134 <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0xc4>)
 800208e:	eb03 0a84 	add.w	sl, r3, r4, lsl #2
 8002092:	465d      	mov	r5, fp
 8002094:	2600      	movs	r6, #0
 8002096:	46a3      	mov	fp, r4
 8002098:	4654      	mov	r4, sl
            zeta = -zetas[--k];
 800209a:	f854 1d04 	ldr.w	r1, [r4, #-4]!
            for (j = start; j < start + len; ++j) {
 800209e:	eb06 0a05 	add.w	sl, r6, r5
 80020a2:	45b2      	cmp	sl, r6
            zeta = -zetas[--k];
 80020a4:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80020a8:	f1c1 0900 	rsb	r9, r1, #0
            for (j = start; j < start + len; ++j) {
 80020ac:	d93f      	bls.n	800212e <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0xbe>
 80020ae:	f106 4780 	add.w	r7, r6, #1073741824	@ 0x40000000
 80020b2:	9b02      	ldr	r3, [sp, #8]
 80020b4:	9401      	str	r4, [sp, #4]
 80020b6:	3f01      	subs	r7, #1
 80020b8:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 80020bc:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 80020c0:	463c      	mov	r4, r7
 80020c2:	eb03 088a 	add.w	r8, r3, sl, lsl #2
 80020c6:	4637      	mov	r7, r6
 80020c8:	4616      	mov	r6, r2
                t = a[j];
 80020ca:	f854 1f04 	ldr.w	r1, [r4, #4]!
                a[j] = t + a[j + len];
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	440a      	add	r2, r1
 80020d2:	6022      	str	r2, [r4, #0]
                a[j + len] = t - a[j + len];
 80020d4:	f857 2b04 	ldr.w	r2, [r7], #4
 80020d8:	1a89      	subs	r1, r1, r2
 80020da:	f847 1c04 	str.w	r1, [r7, #-4]
                a[j + len] = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 80020de:	fb81 0109 	smull	r0, r1, r1, r9
 80020e2:	f001 f98f 	bl	8003404 <PQCLEAN_MLDSA44_CLEAN_montgomery_reduce>
            for (j = start; j < start + len; ++j) {
 80020e6:	45a0      	cmp	r8, r4
                a[j + len] = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)zeta * a[j + len]);
 80020e8:	f847 0c04 	str.w	r0, [r7, #-4]
            for (j = start; j < start + len; ++j) {
 80020ec:	d1ed      	bne.n	80020ca <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0x5a>
        for (start = 0; start < N; start = j + len) {
 80020ee:	4632      	mov	r2, r6
 80020f0:	eb0a 0605 	add.w	r6, sl, r5
 80020f4:	2eff      	cmp	r6, #255	@ 0xff
 80020f6:	9c01      	ldr	r4, [sp, #4]
 80020f8:	d9cf      	bls.n	800209a <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0x2a>
    for (len = 1; len < N; len <<= 1) {
 80020fa:	9b03      	ldr	r3, [sp, #12]
 80020fc:	3b01      	subs	r3, #1
 80020fe:	465c      	mov	r4, fp
 8002100:	9303      	str	r3, [sp, #12]
 8002102:	ea4f 0b45 	mov.w	fp, r5, lsl #1
 8002106:	d1c1      	bne.n	800208c <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0x1c>
 8002108:	9b02      	ldr	r3, [sp, #8]
 800210a:	f502 7b7f 	add.w	fp, r2, #1020	@ 0x3fc
 800210e:	4699      	mov	r9, r3
            }
        }
    }

    for (j = 0; j < N; ++j) {
        a[j] = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)f * a[j]);
 8002110:	f24a 34fa 	movw	r4, #41978	@ 0xa3fa
 8002114:	f859 1f04 	ldr.w	r1, [r9, #4]!
 8002118:	fb81 0104 	smull	r0, r1, r1, r4
 800211c:	f001 f972 	bl	8003404 <PQCLEAN_MLDSA44_CLEAN_montgomery_reduce>
    for (j = 0; j < N; ++j) {
 8002120:	45d9      	cmp	r9, fp
        a[j] = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)f * a[j]);
 8002122:	f8c9 0000 	str.w	r0, [r9]
    for (j = 0; j < N; ++j) {
 8002126:	d1f5      	bne.n	8002114 <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0xa4>
    }
}
 8002128:	b005      	add	sp, #20
 800212a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            for (j = start; j < start + len; ++j) {
 800212e:	4656      	mov	r6, sl
 8002130:	e7b3      	b.n	800209a <PQCLEAN_MLDSA44_CLEAN_invntt_tomont+0x2a>
 8002132:	bf00      	nop
 8002134:	08005084 	.word	0x08005084

08002138 <PQCLEAN_MLDSA44_CLEAN_pack_pk>:
*              - const uint8_t rho[]: byte array containing rho
*              - const polyveck *t1: pointer to vector t1
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_pack_pk(uint8_t pk[PQCLEAN_MLDSA44_CLEAN_CRYPTO_PUBLICKEYBYTES],
                                   const uint8_t rho[SEEDBYTES],
                                   const polyveck *t1) {
 8002138:	1c4b      	adds	r3, r1, #1
 800213a:	1ac3      	subs	r3, r0, r3
 800213c:	2b02      	cmp	r3, #2
 800213e:	b570      	push	{r4, r5, r6, lr}
 8002140:	4684      	mov	ip, r0
 8002142:	4616      	mov	r6, r2
 8002144:	d91e      	bls.n	8002184 <PQCLEAN_MLDSA44_CLEAN_pack_pk+0x4c>
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
        pk[i] = rho[i];
 8002146:	680b      	ldr	r3, [r1, #0]
 8002148:	6003      	str	r3, [r0, #0]
 800214a:	684b      	ldr	r3, [r1, #4]
 800214c:	6043      	str	r3, [r0, #4]
 800214e:	688b      	ldr	r3, [r1, #8]
 8002150:	6083      	str	r3, [r0, #8]
 8002152:	68cb      	ldr	r3, [r1, #12]
 8002154:	60c3      	str	r3, [r0, #12]
 8002156:	690b      	ldr	r3, [r1, #16]
 8002158:	6103      	str	r3, [r0, #16]
 800215a:	694b      	ldr	r3, [r1, #20]
 800215c:	6143      	str	r3, [r0, #20]
 800215e:	698b      	ldr	r3, [r1, #24]
 8002160:	6183      	str	r3, [r0, #24]
 8002162:	69cb      	ldr	r3, [r1, #28]
 8002164:	61c3      	str	r3, [r0, #28]
    for (i = 0; i < SEEDBYTES; ++i) {
 8002166:	f10c 0420 	add.w	r4, ip, #32
 800216a:	f50c 65a4 	add.w	r5, ip, #1312	@ 0x520
    }
    pk += SEEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyt1_pack(pk + i * POLYT1_PACKEDBYTES, &t1->vec[i]);
 800216e:	4631      	mov	r1, r6
 8002170:	4620      	mov	r0, r4
    for (i = 0; i < K; ++i) {
 8002172:	f504 74a0 	add.w	r4, r4, #320	@ 0x140
        PQCLEAN_MLDSA44_CLEAN_polyt1_pack(pk + i * POLYT1_PACKEDBYTES, &t1->vec[i]);
 8002176:	f000 fd25 	bl	8002bc4 <PQCLEAN_MLDSA44_CLEAN_polyt1_pack>
    for (i = 0; i < K; ++i) {
 800217a:	42ac      	cmp	r4, r5
 800217c:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 8002180:	d1f5      	bne.n	800216e <PQCLEAN_MLDSA44_CLEAN_pack_pk+0x36>
    }
}
 8002182:	bd70      	pop	{r4, r5, r6, pc}
 8002184:	1e4b      	subs	r3, r1, #1
 8002186:	3801      	subs	r0, #1
 8002188:	f101 0e1f 	add.w	lr, r1, #31
        pk[i] = rho[i];
 800218c:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8002190:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 8002194:	4573      	cmp	r3, lr
 8002196:	d1f9      	bne.n	800218c <PQCLEAN_MLDSA44_CLEAN_pack_pk+0x54>
 8002198:	e7e5      	b.n	8002166 <PQCLEAN_MLDSA44_CLEAN_pack_pk+0x2e>
 800219a:	bf00      	nop

0800219c <PQCLEAN_MLDSA44_CLEAN_unpack_pk>:
*              - const polyveck *t1: pointer to output vector t1
*              - uint8_t pk[]: byte array containing bit-packed pk
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_unpack_pk(uint8_t rho[SEEDBYTES],
                                     polyveck *t1,
                                     const uint8_t pk[PQCLEAN_MLDSA44_CLEAN_CRYPTO_PUBLICKEYBYTES]) {
 800219c:	b570      	push	{r4, r5, r6, lr}
 800219e:	1c54      	adds	r4, r2, #1
 80021a0:	1b04      	subs	r4, r0, r4
 80021a2:	2c02      	cmp	r4, #2
 80021a4:	460e      	mov	r6, r1
 80021a6:	d91e      	bls.n	80021e6 <PQCLEAN_MLDSA44_CLEAN_unpack_pk+0x4a>
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
        rho[i] = pk[i];
 80021a8:	6811      	ldr	r1, [r2, #0]
 80021aa:	6001      	str	r1, [r0, #0]
 80021ac:	6851      	ldr	r1, [r2, #4]
 80021ae:	6041      	str	r1, [r0, #4]
 80021b0:	6891      	ldr	r1, [r2, #8]
 80021b2:	6081      	str	r1, [r0, #8]
 80021b4:	68d1      	ldr	r1, [r2, #12]
 80021b6:	60c1      	str	r1, [r0, #12]
 80021b8:	6911      	ldr	r1, [r2, #16]
 80021ba:	6101      	str	r1, [r0, #16]
 80021bc:	6951      	ldr	r1, [r2, #20]
 80021be:	6141      	str	r1, [r0, #20]
 80021c0:	6991      	ldr	r1, [r2, #24]
 80021c2:	6181      	str	r1, [r0, #24]
 80021c4:	69d1      	ldr	r1, [r2, #28]
 80021c6:	61c1      	str	r1, [r0, #28]
    for (i = 0; i < SEEDBYTES; ++i) {
 80021c8:	f102 0420 	add.w	r4, r2, #32
 80021cc:	f502 65a4 	add.w	r5, r2, #1312	@ 0x520
    }
    pk += SEEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyt1_unpack(&t1->vec[i], pk + i * POLYT1_PACKEDBYTES);
 80021d0:	4621      	mov	r1, r4
 80021d2:	4630      	mov	r0, r6
    for (i = 0; i < K; ++i) {
 80021d4:	f504 74a0 	add.w	r4, r4, #320	@ 0x140
        PQCLEAN_MLDSA44_CLEAN_polyt1_unpack(&t1->vec[i], pk + i * POLYT1_PACKEDBYTES);
 80021d8:	f000 fd16 	bl	8002c08 <PQCLEAN_MLDSA44_CLEAN_polyt1_unpack>
    for (i = 0; i < K; ++i) {
 80021dc:	42ac      	cmp	r4, r5
 80021de:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80021e2:	d1f5      	bne.n	80021d0 <PQCLEAN_MLDSA44_CLEAN_unpack_pk+0x34>
    }
}
 80021e4:	bd70      	pop	{r4, r5, r6, pc}
 80021e6:	f102 3cff 	add.w	ip, r2, #4294967295	@ 0xffffffff
 80021ea:	1e43      	subs	r3, r0, #1
 80021ec:	f102 0e1f 	add.w	lr, r2, #31
        rho[i] = pk[i];
 80021f0:	f81c 4f01 	ldrb.w	r4, [ip, #1]!
 80021f4:	f803 4f01 	strb.w	r4, [r3, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 80021f8:	45f4      	cmp	ip, lr
 80021fa:	d1f9      	bne.n	80021f0 <PQCLEAN_MLDSA44_CLEAN_unpack_pk+0x54>
 80021fc:	e7e4      	b.n	80021c8 <PQCLEAN_MLDSA44_CLEAN_unpack_pk+0x2c>
 80021fe:	bf00      	nop

08002200 <PQCLEAN_MLDSA44_CLEAN_pack_sk>:
                                   const uint8_t rho[SEEDBYTES],
                                   const uint8_t tr[TRBYTES],
                                   const uint8_t key[SEEDBYTES],
                                   const polyveck *t0,
                                   const polyvecl *s1,
                                   const polyveck *s2) {
 8002200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002202:	4604      	mov	r4, r0
 8002204:	1c48      	adds	r0, r1, #1
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
 8002206:	1a20      	subs	r0, r4, r0
 8002208:	2802      	cmp	r0, #2
 800220a:	d970      	bls.n	80022ee <PQCLEAN_MLDSA44_CLEAN_pack_sk+0xee>
        sk[i] = rho[i];
 800220c:	6808      	ldr	r0, [r1, #0]
 800220e:	6020      	str	r0, [r4, #0]
 8002210:	6848      	ldr	r0, [r1, #4]
 8002212:	6060      	str	r0, [r4, #4]
 8002214:	6888      	ldr	r0, [r1, #8]
 8002216:	60a0      	str	r0, [r4, #8]
 8002218:	68c8      	ldr	r0, [r1, #12]
 800221a:	60e0      	str	r0, [r4, #12]
 800221c:	6908      	ldr	r0, [r1, #16]
 800221e:	6120      	str	r0, [r4, #16]
 8002220:	6948      	ldr	r0, [r1, #20]
 8002222:	6160      	str	r0, [r4, #20]
 8002224:	6988      	ldr	r0, [r1, #24]
 8002226:	61a0      	str	r0, [r4, #24]
 8002228:	69c9      	ldr	r1, [r1, #28]
 800222a:	61e1      	str	r1, [r4, #28]
    for (i = 0; i < SEEDBYTES; ++i) {
 800222c:	1ae1      	subs	r1, r4, r3
 800222e:	311f      	adds	r1, #31
 8002230:	2902      	cmp	r1, #2
 8002232:	d969      	bls.n	8002308 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x108>
    }
    sk += SEEDBYTES;

    for (i = 0; i < SEEDBYTES; ++i) {
        sk[i] = key[i];
 8002234:	6819      	ldr	r1, [r3, #0]
 8002236:	6221      	str	r1, [r4, #32]
 8002238:	6859      	ldr	r1, [r3, #4]
 800223a:	6261      	str	r1, [r4, #36]	@ 0x24
 800223c:	6899      	ldr	r1, [r3, #8]
 800223e:	62a1      	str	r1, [r4, #40]	@ 0x28
 8002240:	68d9      	ldr	r1, [r3, #12]
 8002242:	62e1      	str	r1, [r4, #44]	@ 0x2c
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	6321      	str	r1, [r4, #48]	@ 0x30
 8002248:	6959      	ldr	r1, [r3, #20]
 800224a:	6361      	str	r1, [r4, #52]	@ 0x34
 800224c:	6999      	ldr	r1, [r3, #24]
 800224e:	63a1      	str	r1, [r4, #56]	@ 0x38
 8002250:	69db      	ldr	r3, [r3, #28]
 8002252:	63e3      	str	r3, [r4, #60]	@ 0x3c
    for (i = 0; i < SEEDBYTES; ++i) {
 8002254:	1aa3      	subs	r3, r4, r2
 8002256:	333f      	adds	r3, #63	@ 0x3f
 8002258:	2b02      	cmp	r3, #2
 800225a:	d963      	bls.n	8002324 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x124>
    }
    sk += SEEDBYTES;

    for (i = 0; i < TRBYTES; ++i) {
        sk[i] = tr[i];
 800225c:	6813      	ldr	r3, [r2, #0]
 800225e:	6423      	str	r3, [r4, #64]	@ 0x40
 8002260:	6853      	ldr	r3, [r2, #4]
 8002262:	6463      	str	r3, [r4, #68]	@ 0x44
 8002264:	6893      	ldr	r3, [r2, #8]
 8002266:	64a3      	str	r3, [r4, #72]	@ 0x48
 8002268:	68d3      	ldr	r3, [r2, #12]
 800226a:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800226c:	6913      	ldr	r3, [r2, #16]
 800226e:	6523      	str	r3, [r4, #80]	@ 0x50
 8002270:	6953      	ldr	r3, [r2, #20]
 8002272:	6563      	str	r3, [r4, #84]	@ 0x54
 8002274:	6993      	ldr	r3, [r2, #24]
 8002276:	65a3      	str	r3, [r4, #88]	@ 0x58
 8002278:	69d3      	ldr	r3, [r2, #28]
 800227a:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800227c:	6a13      	ldr	r3, [r2, #32]
 800227e:	6623      	str	r3, [r4, #96]	@ 0x60
 8002280:	6a53      	ldr	r3, [r2, #36]	@ 0x24
 8002282:	6663      	str	r3, [r4, #100]	@ 0x64
 8002284:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8002286:	66a3      	str	r3, [r4, #104]	@ 0x68
 8002288:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800228a:	66e3      	str	r3, [r4, #108]	@ 0x6c
 800228c:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800228e:	6723      	str	r3, [r4, #112]	@ 0x70
 8002290:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8002292:	6763      	str	r3, [r4, #116]	@ 0x74
 8002294:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8002296:	67a3      	str	r3, [r4, #120]	@ 0x78
 8002298:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800229a:	67e3      	str	r3, [r4, #124]	@ 0x7c
    for (i = 0; i < TRBYTES; ++i) {
 800229c:	9f07      	ldr	r7, [sp, #28]
 800229e:	f104 0680 	add.w	r6, r4, #128	@ 0x80
 80022a2:	f504 7500 	add.w	r5, r4, #512	@ 0x200
    }
    sk += TRBYTES;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s1->vec[i]);
 80022a6:	4639      	mov	r1, r7
 80022a8:	4630      	mov	r0, r6
    for (i = 0; i < L; ++i) {
 80022aa:	3660      	adds	r6, #96	@ 0x60
        PQCLEAN_MLDSA44_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s1->vec[i]);
 80022ac:	f000 fbf4 	bl	8002a98 <PQCLEAN_MLDSA44_CLEAN_polyeta_pack>
    for (i = 0; i < L; ++i) {
 80022b0:	42b5      	cmp	r5, r6
 80022b2:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80022b6:	d1f6      	bne.n	80022a6 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0xa6>
 80022b8:	9f08      	ldr	r7, [sp, #32]
 80022ba:	f504 7660 	add.w	r6, r4, #896	@ 0x380
    }
    sk += L * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s2->vec[i]);
 80022be:	4639      	mov	r1, r7
 80022c0:	4628      	mov	r0, r5
    for (i = 0; i < K; ++i) {
 80022c2:	3560      	adds	r5, #96	@ 0x60
        PQCLEAN_MLDSA44_CLEAN_polyeta_pack(sk + i * POLYETA_PACKEDBYTES, &s2->vec[i]);
 80022c4:	f000 fbe8 	bl	8002a98 <PQCLEAN_MLDSA44_CLEAN_polyeta_pack>
    for (i = 0; i < K; ++i) {
 80022c8:	42ae      	cmp	r6, r5
 80022ca:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80022ce:	d1f6      	bne.n	80022be <PQCLEAN_MLDSA44_CLEAN_pack_sk+0xbe>
 80022d0:	4635      	mov	r5, r6
 80022d2:	9e06      	ldr	r6, [sp, #24]
 80022d4:	f504 6420 	add.w	r4, r4, #2560	@ 0xa00
    }
    sk += K * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyt0_pack(sk + i * POLYT0_PACKEDBYTES, &t0->vec[i]);
 80022d8:	4631      	mov	r1, r6
 80022da:	4628      	mov	r0, r5
    for (i = 0; i < K; ++i) {
 80022dc:	f505 75d0 	add.w	r5, r5, #416	@ 0x1a0
        PQCLEAN_MLDSA44_CLEAN_polyt0_pack(sk + i * POLYT0_PACKEDBYTES, &t0->vec[i]);
 80022e0:	f000 fcbe 	bl	8002c60 <PQCLEAN_MLDSA44_CLEAN_polyt0_pack>
    for (i = 0; i < K; ++i) {
 80022e4:	42ac      	cmp	r4, r5
 80022e6:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 80022ea:	d1f5      	bne.n	80022d8 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0xd8>
    }
}
 80022ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80022ee:	1e48      	subs	r0, r1, #1
 80022f0:	1e65      	subs	r5, r4, #1
 80022f2:	311f      	adds	r1, #31
        sk[i] = rho[i];
 80022f4:	f810 6f01 	ldrb.w	r6, [r0, #1]!
 80022f8:	f805 6f01 	strb.w	r6, [r5, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 80022fc:	4281      	cmp	r1, r0
 80022fe:	d1f9      	bne.n	80022f4 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0xf4>
 8002300:	1ae1      	subs	r1, r4, r3
 8002302:	311f      	adds	r1, #31
 8002304:	2902      	cmp	r1, #2
 8002306:	d895      	bhi.n	8002234 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x34>
 8002308:	1e59      	subs	r1, r3, #1
 800230a:	f104 001f 	add.w	r0, r4, #31
 800230e:	331f      	adds	r3, #31
        sk[i] = key[i];
 8002310:	f811 5f01 	ldrb.w	r5, [r1, #1]!
 8002314:	f800 5f01 	strb.w	r5, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 8002318:	4299      	cmp	r1, r3
 800231a:	d1f9      	bne.n	8002310 <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x110>
 800231c:	1aa3      	subs	r3, r4, r2
 800231e:	333f      	adds	r3, #63	@ 0x3f
 8002320:	2b02      	cmp	r3, #2
 8002322:	d89b      	bhi.n	800225c <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x5c>
 8002324:	1e53      	subs	r3, r2, #1
 8002326:	f104 013f 	add.w	r1, r4, #63	@ 0x3f
 800232a:	323f      	adds	r2, #63	@ 0x3f
        sk[i] = tr[i];
 800232c:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8002330:	f801 0f01 	strb.w	r0, [r1, #1]!
    for (i = 0; i < TRBYTES; ++i) {
 8002334:	4293      	cmp	r3, r2
 8002336:	d1f9      	bne.n	800232c <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x12c>
 8002338:	e7b0      	b.n	800229c <PQCLEAN_MLDSA44_CLEAN_pack_sk+0x9c>
 800233a:	bf00      	nop

0800233c <PQCLEAN_MLDSA44_CLEAN_unpack_sk>:
                                     uint8_t tr[TRBYTES],
                                     uint8_t key[SEEDBYTES],
                                     polyveck *t0,
                                     polyvecl *s1,
                                     polyveck *s2,
                                     const uint8_t sk[PQCLEAN_MLDSA44_CLEAN_CRYPTO_SECRETKEYBYTES]) {
 800233c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002340:	9d08      	ldr	r5, [sp, #32]
 8002342:	461e      	mov	r6, r3
 8002344:	1c6b      	adds	r3, r5, #1
 8002346:	1ac3      	subs	r3, r0, r3
 8002348:	2b02      	cmp	r3, #2
 800234a:	d972      	bls.n	8002432 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0xf6>
    unsigned int i;

    for (i = 0; i < SEEDBYTES; ++i) {
        rho[i] = sk[i];
 800234c:	682b      	ldr	r3, [r5, #0]
 800234e:	6003      	str	r3, [r0, #0]
 8002350:	686b      	ldr	r3, [r5, #4]
 8002352:	6043      	str	r3, [r0, #4]
 8002354:	68ab      	ldr	r3, [r5, #8]
 8002356:	6083      	str	r3, [r0, #8]
 8002358:	68eb      	ldr	r3, [r5, #12]
 800235a:	60c3      	str	r3, [r0, #12]
 800235c:	692b      	ldr	r3, [r5, #16]
 800235e:	6103      	str	r3, [r0, #16]
 8002360:	696b      	ldr	r3, [r5, #20]
 8002362:	6143      	str	r3, [r0, #20]
 8002364:	69ab      	ldr	r3, [r5, #24]
 8002366:	6183      	str	r3, [r0, #24]
 8002368:	69eb      	ldr	r3, [r5, #28]
 800236a:	61c3      	str	r3, [r0, #28]
    for (i = 0; i < SEEDBYTES; ++i) {
 800236c:	f105 0321 	add.w	r3, r5, #33	@ 0x21
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d96c      	bls.n	8002450 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0x114>
    }
    sk += SEEDBYTES;

    for (i = 0; i < SEEDBYTES; ++i) {
        key[i] = sk[i];
 8002376:	6a2b      	ldr	r3, [r5, #32]
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 800237c:	6053      	str	r3, [r2, #4]
 800237e:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8002380:	6093      	str	r3, [r2, #8]
 8002382:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8002384:	60d3      	str	r3, [r2, #12]
 8002386:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8002388:	6113      	str	r3, [r2, #16]
 800238a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800238c:	6153      	str	r3, [r2, #20]
 800238e:	6bab      	ldr	r3, [r5, #56]	@ 0x38
 8002390:	6193      	str	r3, [r2, #24]
 8002392:	6beb      	ldr	r3, [r5, #60]	@ 0x3c
 8002394:	61d3      	str	r3, [r2, #28]
    for (i = 0; i < SEEDBYTES; ++i) {
 8002396:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 800239a:	1acb      	subs	r3, r1, r3
 800239c:	2b02      	cmp	r3, #2
 800239e:	d967      	bls.n	8002470 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0x134>
    }
    sk += SEEDBYTES;

    for (i = 0; i < TRBYTES; ++i) {
        tr[i] = sk[i];
 80023a0:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 80023a2:	600b      	str	r3, [r1, #0]
 80023a4:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 80023aa:	608b      	str	r3, [r1, #8]
 80023ac:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 80023ae:	60cb      	str	r3, [r1, #12]
 80023b0:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 80023b2:	610b      	str	r3, [r1, #16]
 80023b4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 80023b6:	614b      	str	r3, [r1, #20]
 80023b8:	6dab      	ldr	r3, [r5, #88]	@ 0x58
 80023ba:	618b      	str	r3, [r1, #24]
 80023bc:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 80023be:	61cb      	str	r3, [r1, #28]
 80023c0:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 80023c2:	620b      	str	r3, [r1, #32]
 80023c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80023c6:	624b      	str	r3, [r1, #36]	@ 0x24
 80023c8:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 80023ca:	628b      	str	r3, [r1, #40]	@ 0x28
 80023cc:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80023ce:	62cb      	str	r3, [r1, #44]	@ 0x2c
 80023d0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 80023d2:	630b      	str	r3, [r1, #48]	@ 0x30
 80023d4:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 80023d6:	634b      	str	r3, [r1, #52]	@ 0x34
 80023d8:	6fab      	ldr	r3, [r5, #120]	@ 0x78
 80023da:	638b      	str	r3, [r1, #56]	@ 0x38
 80023dc:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 80023de:	63cb      	str	r3, [r1, #60]	@ 0x3c
    for (i = 0; i < TRBYTES; ++i) {
 80023e0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80023e4:	f105 0780 	add.w	r7, r5, #128	@ 0x80
 80023e8:	f505 7400 	add.w	r4, r5, #512	@ 0x200
    }
    sk += TRBYTES;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyeta_unpack(&s1->vec[i], sk + i * POLYETA_PACKEDBYTES);
 80023ec:	4639      	mov	r1, r7
 80023ee:	4640      	mov	r0, r8
    for (i = 0; i < L; ++i) {
 80023f0:	3760      	adds	r7, #96	@ 0x60
        PQCLEAN_MLDSA44_CLEAN_polyeta_unpack(&s1->vec[i], sk + i * POLYETA_PACKEDBYTES);
 80023f2:	f000 fb95 	bl	8002b20 <PQCLEAN_MLDSA44_CLEAN_polyeta_unpack>
    for (i = 0; i < L; ++i) {
 80023f6:	42bc      	cmp	r4, r7
 80023f8:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
 80023fc:	d1f6      	bne.n	80023ec <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0xb0>
 80023fe:	9f07      	ldr	r7, [sp, #28]
 8002400:	f505 7860 	add.w	r8, r5, #896	@ 0x380
    }
    sk += L * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyeta_unpack(&s2->vec[i], sk + i * POLYETA_PACKEDBYTES);
 8002404:	4621      	mov	r1, r4
 8002406:	4638      	mov	r0, r7
    for (i = 0; i < K; ++i) {
 8002408:	3460      	adds	r4, #96	@ 0x60
        PQCLEAN_MLDSA44_CLEAN_polyeta_unpack(&s2->vec[i], sk + i * POLYETA_PACKEDBYTES);
 800240a:	f000 fb89 	bl	8002b20 <PQCLEAN_MLDSA44_CLEAN_polyeta_unpack>
    for (i = 0; i < K; ++i) {
 800240e:	4544      	cmp	r4, r8
 8002410:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002414:	d1f6      	bne.n	8002404 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0xc8>
 8002416:	f505 6520 	add.w	r5, r5, #2560	@ 0xa00
    }
    sk += K * POLYETA_PACKEDBYTES;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyt0_unpack(&t0->vec[i], sk + i * POLYT0_PACKEDBYTES);
 800241a:	4621      	mov	r1, r4
 800241c:	4630      	mov	r0, r6
    for (i = 0; i < K; ++i) {
 800241e:	f504 74d0 	add.w	r4, r4, #416	@ 0x1a0
        PQCLEAN_MLDSA44_CLEAN_polyt0_unpack(&t0->vec[i], sk + i * POLYT0_PACKEDBYTES);
 8002422:	f000 fc8d 	bl	8002d40 <PQCLEAN_MLDSA44_CLEAN_polyt0_unpack>
    for (i = 0; i < K; ++i) {
 8002426:	42a5      	cmp	r5, r4
 8002428:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800242c:	d1f5      	bne.n	800241a <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0xde>
    }
}
 800242e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002432:	3801      	subs	r0, #1
 8002434:	1e6b      	subs	r3, r5, #1
 8002436:	f105 071f 	add.w	r7, r5, #31
        rho[i] = sk[i];
 800243a:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 800243e:	f800 4f01 	strb.w	r4, [r0, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 8002442:	429f      	cmp	r7, r3
 8002444:	d1f9      	bne.n	800243a <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0xfe>
 8002446:	f105 0321 	add.w	r3, r5, #33	@ 0x21
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d892      	bhi.n	8002376 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0x3a>
 8002450:	f105 031f 	add.w	r3, r5, #31
 8002454:	3a01      	subs	r2, #1
 8002456:	f105 043f 	add.w	r4, r5, #63	@ 0x3f
        key[i] = sk[i];
 800245a:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 800245e:	f802 0f01 	strb.w	r0, [r2, #1]!
    for (i = 0; i < SEEDBYTES; ++i) {
 8002462:	42a3      	cmp	r3, r4
 8002464:	d1f9      	bne.n	800245a <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0x11e>
 8002466:	f105 0341 	add.w	r3, r5, #65	@ 0x41
 800246a:	1acb      	subs	r3, r1, r3
 800246c:	2b02      	cmp	r3, #2
 800246e:	d897      	bhi.n	80023a0 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0x64>
 8002470:	f105 023f 	add.w	r2, r5, #63	@ 0x3f
 8002474:	3901      	subs	r1, #1
 8002476:	f105 037f 	add.w	r3, r5, #127	@ 0x7f
        tr[i] = sk[i];
 800247a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800247e:	f801 4f01 	strb.w	r4, [r1, #1]!
    for (i = 0; i < TRBYTES; ++i) {
 8002482:	429a      	cmp	r2, r3
 8002484:	d1f9      	bne.n	800247a <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0x13e>
 8002486:	e7ab      	b.n	80023e0 <PQCLEAN_MLDSA44_CLEAN_unpack_sk+0xa4>

08002488 <PQCLEAN_MLDSA44_CLEAN_pack_sig>:
*              - const polyveck *h: pointer to hint vector h
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_pack_sig(uint8_t sig[PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES],
                                    const uint8_t c[CTILDEBYTES],
                                    const polyvecl *z,
                                    const polyveck *h) {
 8002488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800248c:	4605      	mov	r5, r0
    unsigned int i, j, k;

    for (i = 0; i < CTILDEBYTES; ++i) {
 800248e:	1c48      	adds	r0, r1, #1
 8002490:	1a28      	subs	r0, r5, r0
 8002492:	2802      	cmp	r0, #2
                                    const polyveck *h) {
 8002494:	4690      	mov	r8, r2
 8002496:	461f      	mov	r7, r3
 8002498:	d93b      	bls.n	8002512 <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x8a>
        sig[i] = c[i];
 800249a:	680b      	ldr	r3, [r1, #0]
 800249c:	602b      	str	r3, [r5, #0]
 800249e:	684b      	ldr	r3, [r1, #4]
 80024a0:	606b      	str	r3, [r5, #4]
 80024a2:	688b      	ldr	r3, [r1, #8]
 80024a4:	60ab      	str	r3, [r5, #8]
 80024a6:	68cb      	ldr	r3, [r1, #12]
 80024a8:	60eb      	str	r3, [r5, #12]
 80024aa:	690b      	ldr	r3, [r1, #16]
 80024ac:	612b      	str	r3, [r5, #16]
 80024ae:	694b      	ldr	r3, [r1, #20]
 80024b0:	616b      	str	r3, [r5, #20]
 80024b2:	698b      	ldr	r3, [r1, #24]
 80024b4:	61ab      	str	r3, [r5, #24]
 80024b6:	69cb      	ldr	r3, [r1, #28]
 80024b8:	61eb      	str	r3, [r5, #28]
    for (i = 0; i < CTILDEBYTES; ++i) {
 80024ba:	f105 0620 	add.w	r6, r5, #32
 80024be:	f505 6412 	add.w	r4, r5, #2336	@ 0x920
    }
    sig += CTILDEBYTES;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyz_pack(sig + i * POLYZ_PACKEDBYTES, &z->vec[i]);
 80024c2:	4641      	mov	r1, r8
 80024c4:	4630      	mov	r0, r6
    for (i = 0; i < L; ++i) {
 80024c6:	f506 7610 	add.w	r6, r6, #576	@ 0x240
        PQCLEAN_MLDSA44_CLEAN_polyz_pack(sig + i * POLYZ_PACKEDBYTES, &z->vec[i]);
 80024ca:	f000 fcb7 	bl	8002e3c <PQCLEAN_MLDSA44_CLEAN_polyz_pack>
    for (i = 0; i < L; ++i) {
 80024ce:	42b4      	cmp	r4, r6
 80024d0:	f508 6880 	add.w	r8, r8, #1024	@ 0x400
 80024d4:	d1f5      	bne.n	80024c2 <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x3a>
    }
    sig += L * POLYZ_PACKEDBYTES;

    /* Encode h */
    for (i = 0; i < OMEGA + K; ++i) {
        sig[i] = 0;
 80024d6:	2254      	movs	r2, #84	@ 0x54
 80024d8:	2100      	movs	r1, #0
 80024da:	4620      	mov	r0, r4
 80024dc:	f002 fcf8 	bl	8004ed0 <memset>
 80024e0:	1f3e      	subs	r6, r7, #4
 80024e2:	f605 1c6f 	addw	ip, r5, #2415	@ 0x96f
    }

    k = 0;
 80024e6:	2000      	movs	r0, #0
 80024e8:	f605 1573 	addw	r5, r5, #2419	@ 0x973
                                    const polyveck *h) {
 80024ec:	4632      	mov	r2, r6
    for (i = 0; i < K; ++i) {
        for (j = 0; j < N; ++j) {
 80024ee:	2300      	movs	r3, #0
            if (h->vec[i].coeffs[j] != 0) {
 80024f0:	f852 1f04 	ldr.w	r1, [r2, #4]!
 80024f4:	b109      	cbz	r1, 80024fa <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x72>
                sig[k++] = (uint8_t) j;
 80024f6:	5423      	strb	r3, [r4, r0]
 80024f8:	3001      	adds	r0, #1
        for (j = 0; j < N; ++j) {
 80024fa:	3301      	adds	r3, #1
 80024fc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002500:	d1f6      	bne.n	80024f0 <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x68>
            }
        }

        sig[OMEGA + i] = (uint8_t) k;
 8002502:	f80c 0f01 	strb.w	r0, [ip, #1]!
    for (i = 0; i < K; ++i) {
 8002506:	45ac      	cmp	ip, r5
 8002508:	f506 6680 	add.w	r6, r6, #1024	@ 0x400
 800250c:	d1ee      	bne.n	80024ec <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x64>
    }
}
 800250e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002512:	1e4c      	subs	r4, r1, #1
 8002514:	1e6b      	subs	r3, r5, #1
 8002516:	311f      	adds	r1, #31
        sig[i] = c[i];
 8002518:	f814 2f01 	ldrb.w	r2, [r4, #1]!
 800251c:	f803 2f01 	strb.w	r2, [r3, #1]!
    for (i = 0; i < CTILDEBYTES; ++i) {
 8002520:	42a1      	cmp	r1, r4
 8002522:	d1f9      	bne.n	8002518 <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x90>
 8002524:	e7c9      	b.n	80024ba <PQCLEAN_MLDSA44_CLEAN_pack_sig+0x32>
 8002526:	bf00      	nop

08002528 <PQCLEAN_MLDSA44_CLEAN_unpack_sig>:
* Returns 1 in case of malformed signature; otherwise 0.
**************************************************/
int PQCLEAN_MLDSA44_CLEAN_unpack_sig(uint8_t c[CTILDEBYTES],
                                     polyvecl *z,
                                     polyveck *h,
                                     const uint8_t sig[PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES]) {
 8002528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800252c:	461d      	mov	r5, r3
 800252e:	4603      	mov	r3, r0
 8002530:	1c68      	adds	r0, r5, #1
 8002532:	1a18      	subs	r0, r3, r0
 8002534:	2802      	cmp	r0, #2
 8002536:	460f      	mov	r7, r1
 8002538:	4616      	mov	r6, r2
    unsigned int i, j, k;

    for (i = 0; i < CTILDEBYTES; ++i) {
 800253a:	d962      	bls.n	8002602 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xda>
        c[i] = sig[i];
 800253c:	682a      	ldr	r2, [r5, #0]
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	686a      	ldr	r2, [r5, #4]
 8002542:	605a      	str	r2, [r3, #4]
 8002544:	68aa      	ldr	r2, [r5, #8]
 8002546:	609a      	str	r2, [r3, #8]
 8002548:	68ea      	ldr	r2, [r5, #12]
 800254a:	60da      	str	r2, [r3, #12]
 800254c:	692a      	ldr	r2, [r5, #16]
 800254e:	611a      	str	r2, [r3, #16]
 8002550:	696a      	ldr	r2, [r5, #20]
 8002552:	615a      	str	r2, [r3, #20]
 8002554:	69aa      	ldr	r2, [r5, #24]
 8002556:	619a      	str	r2, [r3, #24]
 8002558:	69ea      	ldr	r2, [r5, #28]
 800255a:	61da      	str	r2, [r3, #28]
    for (i = 0; i < CTILDEBYTES; ++i) {
 800255c:	f105 0420 	add.w	r4, r5, #32
 8002560:	f505 6812 	add.w	r8, r5, #2336	@ 0x920
    }
    sig += CTILDEBYTES;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyz_unpack(&z->vec[i], sig + i * POLYZ_PACKEDBYTES,0);
 8002564:	4621      	mov	r1, r4
 8002566:	4638      	mov	r0, r7
 8002568:	2200      	movs	r2, #0
    for (i = 0; i < L; ++i) {
 800256a:	f504 7410 	add.w	r4, r4, #576	@ 0x240
        PQCLEAN_MLDSA44_CLEAN_polyz_unpack(&z->vec[i], sig + i * POLYZ_PACKEDBYTES,0);
 800256e:	f000 fca5 	bl	8002ebc <PQCLEAN_MLDSA44_CLEAN_polyz_unpack>
    for (i = 0; i < L; ++i) {
 8002572:	45a0      	cmp	r8, r4
 8002574:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8002578:	d1f4      	bne.n	8002564 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0x3c>
    }
    sig += L * POLYZ_PACKEDBYTES;

    /* Decode h */
    k = 0;
    for (i = 0; i < K; ++i) {
 800257a:	f605 196f 	addw	r9, r5, #2415	@ 0x96f
    k = 0;
 800257e:	2400      	movs	r4, #0
 8002580:	464f      	mov	r7, r9
    for (i = 0; i < K; ++i) {
 8002582:	46a0      	mov	r8, r4
        for (j = 0; j < N; ++j) {
            h->vec[i].coeffs[j] = 0;
 8002584:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002588:	2100      	movs	r1, #0
 800258a:	eb06 2088 	add.w	r0, r6, r8, lsl #10
 800258e:	f002 fc9f 	bl	8004ed0 <memset>
        }

        if (sig[OMEGA + i] < k || sig[OMEGA + i] > OMEGA) {
 8002592:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 8002596:	42a1      	cmp	r1, r4
 8002598:	460a      	mov	r2, r1
 800259a:	f04f 0301 	mov.w	r3, #1
 800259e:	d32d      	bcc.n	80025fc <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xd4>
 80025a0:	2950      	cmp	r1, #80	@ 0x50
 80025a2:	d82b      	bhi.n	80025fc <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xd4>
            return 1;
        }

        for (j = k; j < sig[OMEGA + i]; ++j) {
 80025a4:	42a1      	cmp	r1, r4
 80025a6:	d916      	bls.n	80025d6 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xae>
 80025a8:	f604 101f 	addw	r0, r4, #2335	@ 0x91f
 80025ac:	4428      	add	r0, r5
 80025ae:	4621      	mov	r1, r4
            /* Coefficients are ordered for strong unforgeability */
            if (j > k && sig[j] <= sig[j - 1]) {
                return 1;
            }
            h->vec[i].coeffs[sig[j]] = 1;
 80025b0:	ea4f 2e08 	mov.w	lr, r8, lsl #8
            if (j > k && sig[j] <= sig[j - 1]) {
 80025b4:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80025b8:	42a1      	cmp	r1, r4
            h->vec[i].coeffs[sig[j]] = 1;
 80025ba:	eb0e 0c02 	add.w	ip, lr, r2
        for (j = k; j < sig[OMEGA + i]; ++j) {
 80025be:	f101 0101 	add.w	r1, r1, #1
            if (j > k && sig[j] <= sig[j - 1]) {
 80025c2:	d903      	bls.n	80025cc <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xa4>
 80025c4:	f810 ac01 	ldrb.w	sl, [r0, #-1]
 80025c8:	4592      	cmp	sl, r2
 80025ca:	d217      	bcs.n	80025fc <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xd4>
            h->vec[i].coeffs[sig[j]] = 1;
 80025cc:	f846 302c 	str.w	r3, [r6, ip, lsl #2]
        for (j = k; j < sig[OMEGA + i]; ++j) {
 80025d0:	783a      	ldrb	r2, [r7, #0]
 80025d2:	428a      	cmp	r2, r1
 80025d4:	d8ee      	bhi.n	80025b4 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0x8c>
    for (i = 0; i < K; ++i) {
 80025d6:	f108 0801 	add.w	r8, r8, #1
 80025da:	f1b8 0f04 	cmp.w	r8, #4
 80025de:	d001      	beq.n	80025e4 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xbc>
 80025e0:	4614      	mov	r4, r2
 80025e2:	e7cf      	b.n	8002584 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0x5c>

        k = sig[OMEGA + i];
    }

    /* Extra indices are zero for strong unforgeability */
    for (j = k; j < OMEGA; ++j) {
 80025e4:	2a4f      	cmp	r2, #79	@ 0x4f
 80025e6:	d817      	bhi.n	8002618 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xf0>
 80025e8:	f602 121f 	addw	r2, r2, #2335	@ 0x91f
 80025ec:	4415      	add	r5, r2
 80025ee:	e001      	b.n	80025f4 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xcc>
 80025f0:	454d      	cmp	r5, r9
 80025f2:	d004      	beq.n	80025fe <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xd6>
        if (sig[j]) {
 80025f4:	f815 0f01 	ldrb.w	r0, [r5, #1]!
 80025f8:	2800      	cmp	r0, #0
 80025fa:	d0f9      	beq.n	80025f0 <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xc8>
            return 1;
 80025fc:	2001      	movs	r0, #1
            return 1;
        }
    }

    return 0;
}
 80025fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002602:	1e6a      	subs	r2, r5, #1
 8002604:	3b01      	subs	r3, #1
 8002606:	f105 0c1f 	add.w	ip, r5, #31
        c[i] = sig[i];
 800260a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
 800260e:	f803 4f01 	strb.w	r4, [r3, #1]!
    for (i = 0; i < CTILDEBYTES; ++i) {
 8002612:	4562      	cmp	r2, ip
 8002614:	d1f9      	bne.n	800260a <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xe2>
 8002616:	e7a1      	b.n	800255c <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0x34>
    return 0;
 8002618:	2000      	movs	r0, #0
 800261a:	e7f0      	b.n	80025fe <PQCLEAN_MLDSA44_CLEAN_unpack_sig+0xd6>

0800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>:
* Description: Inplace reduction of all coefficients of polynomial to
*              representative in [-6283008,6283008].
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_reduce(poly *a) {
 800261c:	b538      	push	{r3, r4, r5, lr}
 800261e:	1f04      	subs	r4, r0, #4
 8002620:	f500 757f 	add.w	r5, r0, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        a->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_reduce32(a->coeffs[i]);
 8002624:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8002628:	f000 fefe 	bl	8003428 <PQCLEAN_MLDSA44_CLEAN_reduce32>
    for (i = 0; i < N; ++i) {
 800262c:	42ac      	cmp	r4, r5
        a->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_reduce32(a->coeffs[i]);
 800262e:	6020      	str	r0, [r4, #0]
    for (i = 0; i < N; ++i) {
 8002630:	d1f8      	bne.n	8002624 <PQCLEAN_MLDSA44_CLEAN_poly_reduce+0x8>
    }

    DBENCH_STOP(*tred);
}
 8002632:	bd38      	pop	{r3, r4, r5, pc}

08002634 <PQCLEAN_MLDSA44_CLEAN_poly_caddq>:
* Description: For all coefficients of in/out polynomial add Q if
*              coefficient is negative.
*
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_caddq(poly *a) {
 8002634:	b538      	push	{r3, r4, r5, lr}
 8002636:	1f04      	subs	r4, r0, #4
 8002638:	f500 757f 	add.w	r5, r0, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        a->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_caddq(a->coeffs[i]);
 800263c:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8002640:	f000 fefe 	bl	8003440 <PQCLEAN_MLDSA44_CLEAN_caddq>
    for (i = 0; i < N; ++i) {
 8002644:	42ac      	cmp	r4, r5
        a->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_caddq(a->coeffs[i]);
 8002646:	6020      	str	r0, [r4, #0]
    for (i = 0; i < N; ++i) {
 8002648:	d1f8      	bne.n	800263c <PQCLEAN_MLDSA44_CLEAN_poly_caddq+0x8>
    }

    DBENCH_STOP(*tred);
}
 800264a:	bd38      	pop	{r3, r4, r5, pc}

0800264c <PQCLEAN_MLDSA44_CLEAN_poly_add>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first summand
*              - const poly *b: pointer to second summand
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_add(poly *c, const poly *a, const poly *b)  {
 800264c:	b500      	push	{lr}
 800264e:	f1a1 0c04 	sub.w	ip, r1, #4
 8002652:	f1a2 0e04 	sub.w	lr, r2, #4
 8002656:	1f02      	subs	r2, r0, #4
 8002658:	f501 707f 	add.w	r0, r1, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 800265c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8002660:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    for (i = 0; i < N; ++i) {
 8002664:	4584      	cmp	ip, r0
        c->coeffs[i] = a->coeffs[i] + b->coeffs[i];
 8002666:	440b      	add	r3, r1
 8002668:	f842 3f04 	str.w	r3, [r2, #4]!
    for (i = 0; i < N; ++i) {
 800266c:	d1f6      	bne.n	800265c <PQCLEAN_MLDSA44_CLEAN_poly_add+0x10>
    }

    DBENCH_STOP(*tadd);
}
 800266e:	f85d fb04 	ldr.w	pc, [sp], #4
 8002672:	bf00      	nop

08002674 <PQCLEAN_MLDSA44_CLEAN_poly_sub>:
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial to be
*                               subtraced from first input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_sub(poly *c, const poly *a, const poly *b) {
 8002674:	b500      	push	{lr}
 8002676:	f1a1 0c04 	sub.w	ip, r1, #4
 800267a:	f1a2 0e04 	sub.w	lr, r2, #4
 800267e:	1f02      	subs	r2, r0, #4
 8002680:	f501 707f 	add.w	r0, r1, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 8002684:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8002688:	f85e 1f04 	ldr.w	r1, [lr, #4]!
    for (i = 0; i < N; ++i) {
 800268c:	4584      	cmp	ip, r0
        c->coeffs[i] = a->coeffs[i] - b->coeffs[i];
 800268e:	eba3 0301 	sub.w	r3, r3, r1
 8002692:	f842 3f04 	str.w	r3, [r2, #4]!
    for (i = 0; i < N; ++i) {
 8002696:	d1f5      	bne.n	8002684 <PQCLEAN_MLDSA44_CLEAN_poly_sub+0x10>
    }

    DBENCH_STOP(*tadd);
}
 8002698:	f85d fb04 	ldr.w	pc, [sp], #4

0800269c <PQCLEAN_MLDSA44_CLEAN_poly_shiftl>:
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_shiftl(poly *a) {
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
 800269c:	1f03      	subs	r3, r0, #4
 800269e:	f500 717f 	add.w	r1, r0, #1020	@ 0x3fc
        a->coeffs[i] <<= D;
 80026a2:	f853 2f04 	ldr.w	r2, [r3, #4]!
 80026a6:	0352      	lsls	r2, r2, #13
    for (i = 0; i < N; ++i) {
 80026a8:	428b      	cmp	r3, r1
        a->coeffs[i] <<= D;
 80026aa:	601a      	str	r2, [r3, #0]
    for (i = 0; i < N; ++i) {
 80026ac:	d1f9      	bne.n	80026a2 <PQCLEAN_MLDSA44_CLEAN_poly_shiftl+0x6>
    }

    DBENCH_STOP(*tmul);
}
 80026ae:	4770      	bx	lr

080026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>:
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_ntt(poly *a) {
    DBENCH_START();

    PQCLEAN_MLDSA44_CLEAN_ntt(a->coeffs);
 80026b0:	f7ff bc7e 	b.w	8001fb0 <PQCLEAN_MLDSA44_CLEAN_ntt>

080026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>:
* Arguments:   - poly *a: pointer to input/output polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(poly *a) {
    DBENCH_START();

    PQCLEAN_MLDSA44_CLEAN_invntt_tomont(a->coeffs);
 80026b4:	f7ff bcdc 	b.w	8002070 <PQCLEAN_MLDSA44_CLEAN_invntt_tomont>

080026b8 <PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery>:
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const poly *a: pointer to first input polynomial
*              - const poly *b: pointer to second input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery(poly *c, const poly *a, const poly *b) {
 80026b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ba:	1f0c      	subs	r4, r1, #4
 80026bc:	1f16      	subs	r6, r2, #4
 80026be:	1f05      	subs	r5, r0, #4
 80026c0:	f501 777f 	add.w	r7, r1, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        c->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 80026c4:	f854 1f04 	ldr.w	r1, [r4, #4]!
 80026c8:	f856 0f04 	ldr.w	r0, [r6, #4]!
 80026cc:	fb81 0100 	smull	r0, r1, r1, r0
 80026d0:	f000 fe98 	bl	8003404 <PQCLEAN_MLDSA44_CLEAN_montgomery_reduce>
    for (i = 0; i < N; ++i) {
 80026d4:	42bc      	cmp	r4, r7
        c->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_montgomery_reduce((int64_t)a->coeffs[i] * b->coeffs[i]);
 80026d6:	f845 0f04 	str.w	r0, [r5, #4]!
    for (i = 0; i < N; ++i) {
 80026da:	d1f3      	bne.n	80026c4 <PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery+0xc>
    }

    DBENCH_STOP(*tmul);
}
 80026dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80026de:	bf00      	nop

080026e0 <PQCLEAN_MLDSA44_CLEAN_poly_power2round>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_power2round(poly *a1, poly *a0, const poly *a) {
 80026e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026e2:	1f15      	subs	r5, r2, #4
 80026e4:	460c      	mov	r4, r1
 80026e6:	1f06      	subs	r6, r0, #4
 80026e8:	f502 777f 	add.w	r7, r2, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        a1->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_power2round(&a0->coeffs[i], a->coeffs[i]);
 80026ec:	f855 1f04 	ldr.w	r1, [r5, #4]!
 80026f0:	4620      	mov	r0, r4
 80026f2:	f000 fecf 	bl	8003494 <PQCLEAN_MLDSA44_CLEAN_power2round>
    for (i = 0; i < N; ++i) {
 80026f6:	42bd      	cmp	r5, r7
        a1->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_power2round(&a0->coeffs[i], a->coeffs[i]);
 80026f8:	f846 0f04 	str.w	r0, [r6, #4]!
    for (i = 0; i < N; ++i) {
 80026fc:	f104 0404 	add.w	r4, r4, #4
 8002700:	d1f4      	bne.n	80026ec <PQCLEAN_MLDSA44_CLEAN_poly_power2round+0xc>
    }

    DBENCH_STOP(*tround);
}
 8002702:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002704 <PQCLEAN_MLDSA44_CLEAN_poly_decompose>:
*
* Arguments:   - poly *a1: pointer to output polynomial with coefficients c1
*              - poly *a0: pointer to output polynomial with coefficients c0
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_decompose(poly *a1, poly *a0, const poly *a) {
 8002704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002706:	1f15      	subs	r5, r2, #4
 8002708:	460c      	mov	r4, r1
 800270a:	1f06      	subs	r6, r0, #4
 800270c:	f502 777f 	add.w	r7, r2, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        a1->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_decompose(&a0->coeffs[i], a->coeffs[i]);
 8002710:	f855 1f04 	ldr.w	r1, [r5, #4]!
 8002714:	4620      	mov	r0, r4
 8002716:	f000 fec7 	bl	80034a8 <PQCLEAN_MLDSA44_CLEAN_decompose>
    for (i = 0; i < N; ++i) {
 800271a:	42bd      	cmp	r5, r7
        a1->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_decompose(&a0->coeffs[i], a->coeffs[i]);
 800271c:	f846 0f04 	str.w	r0, [r6, #4]!
    for (i = 0; i < N; ++i) {
 8002720:	f104 0404 	add.w	r4, r4, #4
 8002724:	d1f4      	bne.n	8002710 <PQCLEAN_MLDSA44_CLEAN_poly_decompose+0xc>
    }

    DBENCH_STOP(*tround);
}
 8002726:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002728 <PQCLEAN_MLDSA44_CLEAN_poly_make_hint>:
*              - const poly *a0: pointer to low part of input polynomial
*              - const poly *a1: pointer to high part of input polynomial
*
* Returns number of 1 bits.
**************************************************/
unsigned int PQCLEAN_MLDSA44_CLEAN_poly_make_hint(poly *h, const poly *a0, const poly *a1) {
 8002728:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800272c:	1f0c      	subs	r4, r1, #4
 800272e:	1f16      	subs	r6, r2, #4
 8002730:	1f05      	subs	r5, r0, #4
 8002732:	f501 787f 	add.w	r8, r1, #1020	@ 0x3fc
    unsigned int i, s = 0;
 8002736:	2700      	movs	r7, #0
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        h->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_make_hint(a0->coeffs[i], a1->coeffs[i]);
 8002738:	f854 0f04 	ldr.w	r0, [r4, #4]!
 800273c:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8002740:	f000 fed6 	bl	80034f0 <PQCLEAN_MLDSA44_CLEAN_make_hint>
    for (i = 0; i < N; ++i) {
 8002744:	4544      	cmp	r4, r8
        h->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_make_hint(a0->coeffs[i], a1->coeffs[i]);
 8002746:	f845 0f04 	str.w	r0, [r5, #4]!
        s += h->coeffs[i];
 800274a:	4407      	add	r7, r0
    for (i = 0; i < N; ++i) {
 800274c:	d1f4      	bne.n	8002738 <PQCLEAN_MLDSA44_CLEAN_poly_make_hint+0x10>
    }

    DBENCH_STOP(*tround);
    return s;
}
 800274e:	4638      	mov	r0, r7
 8002750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002754 <PQCLEAN_MLDSA44_CLEAN_poly_use_hint>:
*
* Arguments:   - poly *b: pointer to output polynomial with corrected high bits
*              - const poly *a: pointer to input polynomial
*              - const poly *h: pointer to input hint polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_use_hint(poly *b, const poly *a, const poly *h) {
 8002754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002756:	1f0c      	subs	r4, r1, #4
 8002758:	1f16      	subs	r6, r2, #4
 800275a:	1f05      	subs	r5, r0, #4
 800275c:	f501 777f 	add.w	r7, r1, #1020	@ 0x3fc
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N; ++i) {
        b->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_use_hint(a->coeffs[i], h->coeffs[i]);
 8002760:	f854 0f04 	ldr.w	r0, [r4, #4]!
 8002764:	f856 1f04 	ldr.w	r1, [r6, #4]!
 8002768:	f000 fed2 	bl	8003510 <PQCLEAN_MLDSA44_CLEAN_use_hint>
    for (i = 0; i < N; ++i) {
 800276c:	42bc      	cmp	r4, r7
        b->coeffs[i] = PQCLEAN_MLDSA44_CLEAN_use_hint(a->coeffs[i], h->coeffs[i]);
 800276e:	f845 0f04 	str.w	r0, [r5, #4]!
    for (i = 0; i < N; ++i) {
 8002772:	d1f5      	bne.n	8002760 <PQCLEAN_MLDSA44_CLEAN_poly_use_hint+0xc>
    }

    DBENCH_STOP(*tround);
}
 8002774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002776:	bf00      	nop

08002778 <PQCLEAN_MLDSA44_CLEAN_poly_chknorm>:
int PQCLEAN_MLDSA44_CLEAN_poly_chknorm(const poly *a, int32_t B) {
    unsigned int i;
    int32_t t;
    DBENCH_START();

    if (B > (Q - 1) / 8) {
 8002778:	4b0a      	ldr	r3, [pc, #40]	@ (80027a4 <PQCLEAN_MLDSA44_CLEAN_poly_chknorm+0x2c>)
 800277a:	4299      	cmp	r1, r3
 800277c:	dc0e      	bgt.n	800279c <PQCLEAN_MLDSA44_CLEAN_poly_chknorm+0x24>
 800277e:	f1a0 0c04 	sub.w	ip, r0, #4
 8002782:	f500 707f 	add.w	r0, r0, #1020	@ 0x3fc
 8002786:	e001      	b.n	800278c <PQCLEAN_MLDSA44_CLEAN_poly_chknorm+0x14>
    }

    /* It is ok to leak which coefficient violates the bound since
       the probability for each coefficient is independent of secret
       data but we must not leak the sign of the centralized representative. */
    for (i = 0; i < N; ++i) {
 8002788:	4584      	cmp	ip, r0
 800278a:	d009      	beq.n	80027a0 <PQCLEAN_MLDSA44_CLEAN_poly_chknorm+0x28>
        /* Absolute value */
        t = a->coeffs[i] >> 31;
 800278c:	f85c 3f04 	ldr.w	r3, [ip, #4]!
 8002790:	17da      	asrs	r2, r3, #31
        t = a->coeffs[i] - (t & 2 * a->coeffs[i]);
 8002792:	ea02 0243 	and.w	r2, r2, r3, lsl #1
 8002796:	1a9b      	subs	r3, r3, r2

        if (t >= B) {
 8002798:	4299      	cmp	r1, r3
 800279a:	dcf5      	bgt.n	8002788 <PQCLEAN_MLDSA44_CLEAN_poly_chknorm+0x10>
        return 1;
 800279c:	2001      	movs	r0, #1
        }
    }

    DBENCH_STOP(*tsample);
    return 0;
}
 800279e:	4770      	bx	lr
    return 0;
 80027a0:	2000      	movs	r0, #0
 80027a2:	4770      	bx	lr
 80027a4:	000ffc00 	.word	0x000ffc00

080027a8 <PQCLEAN_MLDSA44_CLEAN_poly_uniform>:
*              - uint16_t nonce: 2-byte nonce
**************************************************/
#define POLY_UNIFORM_NBLOCKS ((768 + STREAM128_BLOCKBYTES - 1)/STREAM128_BLOCKBYTES)
void PQCLEAN_MLDSA44_CLEAN_poly_uniform(poly *a,
                                        const uint8_t seed[SEEDBYTES],
                                        uint16_t nonce) {
 80027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ac:	f5ad 6d84 	sub.w	sp, sp, #1056	@ 0x420
    unsigned int buflen = POLY_UNIFORM_NBLOCKS * STREAM128_BLOCKBYTES;
    uint8_t buf[POLY_UNIFORM_NBLOCKS * STREAM128_BLOCKBYTES + 2];
    stream128_state state;

    stream128_init(&state, seed, nonce);
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 80027b0:	ae35      	add	r6, sp, #212	@ 0xd4
                                        uint16_t nonce) {
 80027b2:	4680      	mov	r8, r0
    stream128_init(&state, seed, nonce);
 80027b4:	4668      	mov	r0, sp
 80027b6:	f001 fb61 	bl	8003e7c <PQCLEAN_MLDSA44_CLEAN_dilithium_shake128_stream_init>
    stream128_squeezeblocks(buf, POLY_UNIFORM_NBLOCKS, &state);
 80027ba:	466a      	mov	r2, sp
 80027bc:	f44f 7152 	mov.w	r1, #840	@ 0x348
 80027c0:	4630      	mov	r0, r6
 80027c2:	f7fd ff13 	bl	80005ec <shake128_inc_squeeze>
        if (t < Q) {
 80027c6:	4d36      	ldr	r5, [pc, #216]	@ (80028a0 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0xf8>)
 80027c8:	f20d 471c 	addw	r7, sp, #1052	@ 0x41c

    ctr = rej_uniform(a->coeffs, N, buf, buflen);
 80027cc:	4632      	mov	r2, r6
    ctr = pos = 0;
 80027ce:	2400      	movs	r4, #0
 80027d0:	e002      	b.n	80027d8 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x30>
 80027d2:	460c      	mov	r4, r1
    while (ctr < len && pos + 3 <= buflen) {
 80027d4:	42ba      	cmp	r2, r7
 80027d6:	d019      	beq.n	800280c <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x64>
        t |= (uint32_t)buf[pos++] << 16;
 80027d8:	7893      	ldrb	r3, [r2, #2]
        t |= (uint32_t)buf[pos++] << 8;
 80027da:	7850      	ldrb	r0, [r2, #1]
        t  = buf[pos++];
 80027dc:	7811      	ldrb	r1, [r2, #0]
        t |= (uint32_t)buf[pos++] << 16;
 80027de:	041b      	lsls	r3, r3, #16
 80027e0:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
 80027e4:	430b      	orrs	r3, r1
        t &= 0x7FFFFF;
 80027e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (t < Q) {
 80027ea:	42ab      	cmp	r3, r5
    while (ctr < len && pos + 3 <= buflen) {
 80027ec:	f102 0203 	add.w	r2, r2, #3
            a[ctr++] = t;
 80027f0:	f104 0101 	add.w	r1, r4, #1
        if (t < Q) {
 80027f4:	d8ee      	bhi.n	80027d4 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x2c>
    while (ctr < len && pos + 3 <= buflen) {
 80027f6:	2cff      	cmp	r4, #255	@ 0xff
            a[ctr++] = t;
 80027f8:	f848 3024 	str.w	r3, [r8, r4, lsl #2]
    while (ctr < len && pos + 3 <= buflen) {
 80027fc:	d1e9      	bne.n	80027d2 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x2a>

        stream128_squeezeblocks(buf + off, 1, &state);
        buflen = STREAM128_BLOCKBYTES + off;
        ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
    }
    stream128_release(&state);
 80027fe:	4668      	mov	r0, sp
 8002800:	f7fd ff3a 	bl	8000678 <shake128_inc_ctx_release>
}
 8002804:	f50d 6d84 	add.w	sp, sp, #1056	@ 0x420
 8002808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        off = buflen % 3;
 800280c:	4f25      	ldr	r7, [pc, #148]	@ (80028a4 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0xfc>)
        if (t < Q) {
 800280e:	4d24      	ldr	r5, [pc, #144]	@ (80028a0 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0xf8>)
 8002810:	f44f 7052 	mov.w	r0, #840	@ 0x348
        off = buflen % 3;
 8002814:	fba7 2300 	umull	r2, r3, r7, r0
 8002818:	f023 0901 	bic.w	r9, r3, #1
 800281c:	eb09 0953 	add.w	r9, r9, r3, lsr #1
        for (i = 0; i < off; ++i) {
 8002820:	ebb0 0909 	subs.w	r9, r0, r9
 8002824:	d009      	beq.n	800283a <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x92>
            buf[i] = buf[buflen - off + i];
 8002826:	eba0 0009 	sub.w	r0, r0, r9
        for (i = 0; i < off; ++i) {
 800282a:	f1b9 0f02 	cmp.w	r9, #2
            buf[i] = buf[buflen - off + i];
 800282e:	5c33      	ldrb	r3, [r6, r0]
 8002830:	7033      	strb	r3, [r6, #0]
        for (i = 0; i < off; ++i) {
 8002832:	d102      	bne.n	800283a <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x92>
            buf[i] = buf[buflen - off + i];
 8002834:	4430      	add	r0, r6
 8002836:	7843      	ldrb	r3, [r0, #1]
 8002838:	7073      	strb	r3, [r6, #1]
        stream128_squeezeblocks(buf + off, 1, &state);
 800283a:	466a      	mov	r2, sp
 800283c:	21a8      	movs	r1, #168	@ 0xa8
 800283e:	eb06 0009 	add.w	r0, r6, r9
 8002842:	f7fd fed3 	bl	80005ec <shake128_inc_squeeze>
    ctr = pos = 0;
 8002846:	2100      	movs	r1, #0
        buflen = STREAM128_BLOCKBYTES + off;
 8002848:	f109 00a8 	add.w	r0, r9, #168	@ 0xa8
        ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 800284c:	f5c4 7e80 	rsb	lr, r4, #256	@ 0x100
 8002850:	4632      	mov	r2, r6
    while (ctr < len && pos + 3 <= buflen) {
 8002852:	f1c6 0c03 	rsb	ip, r6, #3
 8002856:	e001      	b.n	800285c <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0xb4>
 8002858:	4548      	cmp	r0, r9
 800285a:	d317      	bcc.n	800288c <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0xe4>
        t |= (uint32_t)buf[pos++] << 16;
 800285c:	7893      	ldrb	r3, [r2, #2]
        t |= (uint32_t)buf[pos++] << 8;
 800285e:	f892 a001 	ldrb.w	sl, [r2, #1]
        t  = buf[pos++];
 8002862:	f892 9000 	ldrb.w	r9, [r2]
        t |= (uint32_t)buf[pos++] << 16;
 8002866:	041b      	lsls	r3, r3, #16
 8002868:	ea43 230a 	orr.w	r3, r3, sl, lsl #8
 800286c:	ea43 0309 	orr.w	r3, r3, r9
        t &= 0x7FFFFF;
 8002870:	f3c3 0316 	ubfx	r3, r3, #0, #23
        if (t < Q) {
 8002874:	42ab      	cmp	r3, r5
            a[ctr++] = t;
 8002876:	eb04 0a01 	add.w	sl, r4, r1
 800287a:	bf9c      	itt	ls
 800287c:	3101      	addls	r1, #1
 800287e:	f848 302a 	strls.w	r3, [r8, sl, lsl #2]
    while (ctr < len && pos + 3 <= buflen) {
 8002882:	3203      	adds	r2, #3
 8002884:	458e      	cmp	lr, r1
 8002886:	eb0c 0902 	add.w	r9, ip, r2
 800288a:	d8e5      	bhi.n	8002858 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0xb0>
        ctr += rej_uniform(a->coeffs + ctr, N - ctr, buf, buflen);
 800288c:	440c      	add	r4, r1
    while (ctr < N) {
 800288e:	2cff      	cmp	r4, #255	@ 0xff
 8002890:	d9c0      	bls.n	8002814 <PQCLEAN_MLDSA44_CLEAN_poly_uniform+0x6c>
    stream128_release(&state);
 8002892:	4668      	mov	r0, sp
 8002894:	f7fd fef0 	bl	8000678 <shake128_inc_ctx_release>
}
 8002898:	f50d 6d84 	add.w	sp, sp, #1056	@ 0x420
 800289c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028a0:	007fe000 	.word	0x007fe000
 80028a4:	aaaaaaab 	.word	0xaaaaaaab

080028a8 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta>:
*              - uint16_t nonce: 2-byte nonce
**************************************************/
#define POLY_UNIFORM_ETA_NBLOCKS ((136 + STREAM256_BLOCKBYTES - 1)/STREAM256_BLOCKBYTES)
void PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta(poly *a,
        const uint8_t seed[CRHBYTES],
        uint16_t nonce) {
 80028a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028aa:	b0d7      	sub	sp, #348	@ 0x15c
    unsigned int ctr;
    unsigned int buflen = POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES;
    uint8_t buf[POLY_UNIFORM_ETA_NBLOCKS * STREAM256_BLOCKBYTES];
    stream256_state state;

    stream256_init(&state, seed, nonce);
 80028ac:	ac22      	add	r4, sp, #136	@ 0x88
        uint16_t nonce) {
 80028ae:	4605      	mov	r5, r0
    stream256_init(&state, seed, nonce);
 80028b0:	4620      	mov	r0, r4
 80028b2:	f001 fafb 	bl	8003eac <PQCLEAN_MLDSA44_CLEAN_dilithium_shake256_stream_init>
    stream256_squeezeblocks(buf, POLY_UNIFORM_ETA_NBLOCKS, &state);
 80028b6:	4668      	mov	r0, sp
 80028b8:	2188      	movs	r1, #136	@ 0x88
 80028ba:	4622      	mov	r2, r4
 80028bc:	f7fd ff52 	bl	8000764 <shake256_inc_squeeze>
    ctr = pos = 0;
 80028c0:	2600      	movs	r6, #0

    ctr = rej_eta(a->coeffs, N, buf, buflen);
 80028c2:	4668      	mov	r0, sp
        t0 = buf[pos] & 0x0F;
 80028c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80028c8:	f002 010f 	and.w	r1, r2, #15
            t0 = t0 - (205 * t0 >> 10) * 5;
 80028cc:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80028d0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80028d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80028d8:	0a9b      	lsrs	r3, r3, #10
 80028da:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            a[ctr++] = 2 - t0;
 80028de:	f1c1 0c02 	rsb	ip, r1, #2
        if (t0 < 15) {
 80028e2:	290f      	cmp	r1, #15
            a[ctr++] = 2 - t0;
 80028e4:	f106 0701 	add.w	r7, r6, #1
 80028e8:	4463      	add	r3, ip
        t1 = buf[pos++] >> 4;
 80028ea:	ea4f 1212 	mov.w	r2, r2, lsr #4
        if (t0 < 15) {
 80028ee:	d00b      	beq.n	8002908 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x60>
        if (t1 < 15 && ctr < len) {
 80028f0:	2a0f      	cmp	r2, #15
            a[ctr++] = 2 - t0;
 80028f2:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
        if (t1 < 15 && ctr < len) {
 80028f6:	d05e      	beq.n	80029b6 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x10e>
 80028f8:	f5b7 7f80 	cmp.w	r7, #256	@ 0x100
 80028fc:	d15d      	bne.n	80029ba <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x112>

    while (ctr < N) {
        stream256_squeezeblocks(buf, 1, &state);
        ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
    }
    stream256_release(&state);
 80028fe:	4620      	mov	r0, r4
 8002900:	f7fd ff76 	bl	80007f0 <shake256_inc_ctx_release>
}
 8002904:	b057      	add	sp, #348	@ 0x15c
 8002906:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (t1 < 15 && ctr < len) {
 8002908:	2a0f      	cmp	r2, #15
 800290a:	d011      	beq.n	8002930 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x88>
            t1 = t1 - (205 * t1 >> 10) * 5;
 800290c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8002910:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8002914:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002918:	0a9b      	lsrs	r3, r3, #10
 800291a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            a[ctr++] = 2 - t1;
 800291e:	f1c2 0202 	rsb	r2, r2, #2
 8002922:	4413      	add	r3, r2
 8002924:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
 8002928:	3601      	adds	r6, #1
    while (ctr < len && pos < buflen) {
 800292a:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 800292e:	d0e6      	beq.n	80028fe <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x56>
 8002930:	42a0      	cmp	r0, r4
 8002932:	d1c7      	bne.n	80028c4 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x1c>
 8002934:	e00c      	b.n	8002950 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xa8>
            t1 = t1 - (205 * t1 >> 10) * 5;
 8002936:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 800293a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800293e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if (t1 < 15 && ctr < len) {
 8002942:	458c      	cmp	ip, r1
            t1 = t1 - (205 * t1 >> 10) * 5;
 8002944:	ea4f 2393 	mov.w	r3, r3, lsr #10
        if (t1 < 15 && ctr < len) {
 8002948:	d82c      	bhi.n	80029a4 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xfc>
        ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 800294a:	440e      	add	r6, r1
    while (ctr < N) {
 800294c:	2eff      	cmp	r6, #255	@ 0xff
 800294e:	d8d6      	bhi.n	80028fe <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x56>
        stream256_squeezeblocks(buf, 1, &state);
 8002950:	2188      	movs	r1, #136	@ 0x88
 8002952:	4668      	mov	r0, sp
 8002954:	4622      	mov	r2, r4
 8002956:	f7fd ff05 	bl	8000764 <shake256_inc_squeeze>
    ctr = pos = 0;
 800295a:	2100      	movs	r1, #0
        ctr += rej_eta(a->coeffs + ctr, N - ctr, buf, STREAM256_BLOCKBYTES);
 800295c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8002960:	f5c6 7c80 	rsb	ip, r6, #256	@ 0x100
 8002964:	4668      	mov	r0, sp
        t0 = buf[pos] & 0x0F;
 8002966:	f810 2b01 	ldrb.w	r2, [r0], #1
 800296a:	f002 070f 	and.w	r7, r2, #15
            t0 = t0 - (205 * t0 >> 10) * 5;
 800296e:	eb07 0387 	add.w	r3, r7, r7, lsl #2
 8002972:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8002976:	eb03 0383 	add.w	r3, r3, r3, lsl #2
        if (t0 < 15) {
 800297a:	2f0f      	cmp	r7, #15
        t1 = buf[pos++] >> 4;
 800297c:	ea4f 1212 	mov.w	r2, r2, lsr #4
            t0 = t0 - (205 * t0 >> 10) * 5;
 8002980:	ea4f 2393 	mov.w	r3, r3, lsr #10
        if (t0 < 15) {
 8002984:	d007      	beq.n	8002996 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xee>
            t0 = t0 - (205 * t0 >> 10) * 5;
 8002986:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            a[ctr++] = 2 - t0;
 800298a:	f1c7 0702 	rsb	r7, r7, #2
 800298e:	443b      	add	r3, r7
 8002990:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 8002994:	3101      	adds	r1, #1
        if (t1 < 15 && ctr < len) {
 8002996:	2a0f      	cmp	r2, #15
 8002998:	d1cd      	bne.n	8002936 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x8e>
    while (ctr < len && pos < buflen) {
 800299a:	458c      	cmp	ip, r1
 800299c:	d9d5      	bls.n	800294a <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xa2>
 800299e:	42a0      	cmp	r0, r4
 80029a0:	d1e1      	bne.n	8002966 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xbe>
 80029a2:	e7d2      	b.n	800294a <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xa2>
            t1 = t1 - (205 * t1 >> 10) * 5;
 80029a4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
            a[ctr++] = 2 - t1;
 80029a8:	f1c2 0202 	rsb	r2, r2, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	f84e 3021 	str.w	r3, [lr, r1, lsl #2]
 80029b2:	3101      	adds	r1, #1
 80029b4:	e7f1      	b.n	800299a <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0xf2>
 80029b6:	463e      	mov	r6, r7
 80029b8:	e7b7      	b.n	800292a <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x82>
 80029ba:	463e      	mov	r6, r7
 80029bc:	e7a6      	b.n	800290c <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta+0x64>
 80029be:	bf00      	nop

080029c0 <PQCLEAN_MLDSA44_CLEAN_poly_challenge>:
*              SHAKE256(seed).
*
* Arguments:   - poly *c: pointer to output polynomial
*              - const uint8_t mu[]: byte array containing seed of length CTILDEBYTES
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_poly_challenge(poly *c, const uint8_t seed[CTILDEBYTES]) {
 80029c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029c2:	b0d7      	sub	sp, #348	@ 0x15c
 80029c4:	460c      	mov	r4, r1
 80029c6:	4607      	mov	r7, r0
    unsigned int i, b, pos;
    uint64_t signs;
    uint8_t buf[SHAKE256_RATE];
    shake256incctx state;

    shake256_inc_init(&state);
 80029c8:	a822      	add	r0, sp, #136	@ 0x88
 80029ca:	f7fd fe57 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, seed, CTILDEBYTES);
 80029ce:	4621      	mov	r1, r4
 80029d0:	2220      	movs	r2, #32
 80029d2:	a822      	add	r0, sp, #136	@ 0x88
 80029d4:	f7fd fe5e 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 80029d8:	a822      	add	r0, sp, #136	@ 0x88
 80029da:	f7fd fe97 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(buf, sizeof buf, &state);
 80029de:	2188      	movs	r1, #136	@ 0x88
 80029e0:	eb0d 0201 	add.w	r2, sp, r1
 80029e4:	4668      	mov	r0, sp
 80029e6:	f7fd febd 	bl	8000764 <shake256_inc_squeeze>

    signs = 0;
    for (i = 0; i < 8; ++i) {
        signs |= (uint64_t)buf[i] << 8 * i;
 80029ea:	f89d 5001 	ldrb.w	r5, [sp, #1]
 80029ee:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80029f2:	f89d 6004 	ldrb.w	r6, [sp, #4]
 80029f6:	022d      	lsls	r5, r5, #8
 80029f8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80029fc:	f89d 3000 	ldrb.w	r3, [sp]
 8002a00:	431d      	orrs	r5, r3
 8002a02:	f89d 3003 	ldrb.w	r3, [sp, #3]
 8002a06:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 8002a0a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002a0e:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
 8002a12:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8002a16:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8002a1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    }
    pos = 8;

    for (i = 0; i < N; ++i) {
        c->coeffs[i] = 0;
 8002a1e:	2100      	movs	r1, #0
 8002a20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a24:	4638      	mov	r0, r7
        signs |= (uint64_t)buf[i] << 8 * i;
 8002a26:	ea46 6603 	orr.w	r6, r6, r3, lsl #24
    }
    for (i = N - TAU; i < N; ++i) {
 8002a2a:	24d9      	movs	r4, #217	@ 0xd9
        c->coeffs[i] = 0;
 8002a2c:	f002 fa50 	bl	8004ed0 <memset>
    pos = 8;
 8002a30:	2108      	movs	r1, #8
 8002a32:	e005      	b.n	8002a40 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0x80>
            if (pos >= SHAKE256_RATE) {
                shake256_inc_squeeze(buf, sizeof buf, &state);
                pos = 0;
            }

            b = buf[pos++];
 8002a34:	f81d 3001 	ldrb.w	r3, [sp, r1]
        } while (b > i);
 8002a38:	429c      	cmp	r4, r3
            b = buf[pos++];
 8002a3a:	f101 0101 	add.w	r1, r1, #1
        } while (b > i);
 8002a3e:	d20f      	bcs.n	8002a60 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0xa0>
            if (pos >= SHAKE256_RATE) {
 8002a40:	2988      	cmp	r1, #136	@ 0x88
 8002a42:	d1f7      	bne.n	8002a34 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0x74>
                shake256_inc_squeeze(buf, sizeof buf, &state);
 8002a44:	aa22      	add	r2, sp, #136	@ 0x88
 8002a46:	4668      	mov	r0, sp
 8002a48:	f7fd fe8c 	bl	8000764 <shake256_inc_squeeze>
            b = buf[pos++];
 8002a4c:	f89d 3000 	ldrb.w	r3, [sp]
        } while (b > i);
 8002a50:	42a3      	cmp	r3, r4
            b = buf[pos++];
 8002a52:	f04f 0102 	mov.w	r1, #2
        } while (b > i);
 8002a56:	d91c      	bls.n	8002a92 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0xd2>
            b = buf[pos++];
 8002a58:	f89d 3001 	ldrb.w	r3, [sp, #1]
        } while (b > i);
 8002a5c:	42a3      	cmp	r3, r4
 8002a5e:	d8e9      	bhi.n	8002a34 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0x74>

        c->coeffs[i] = c->coeffs[b];
 8002a60:	f857 0023 	ldr.w	r0, [r7, r3, lsl #2]
 8002a64:	f847 0024 	str.w	r0, [r7, r4, lsl #2]
        c->coeffs[b] = 1 - 2 * (signs & 1);
 8002a68:	f005 0201 	and.w	r2, r5, #1
 8002a6c:	0052      	lsls	r2, r2, #1
    for (i = N - TAU; i < N; ++i) {
 8002a6e:	3401      	adds	r4, #1
        c->coeffs[b] = 1 - 2 * (signs & 1);
 8002a70:	f1c2 0201 	rsb	r2, r2, #1
        signs >>= 1;
 8002a74:	086d      	lsrs	r5, r5, #1
    for (i = N - TAU; i < N; ++i) {
 8002a76:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
        signs >>= 1;
 8002a7a:	ea45 75c6 	orr.w	r5, r5, r6, lsl #31
        c->coeffs[b] = 1 - 2 * (signs & 1);
 8002a7e:	f847 2023 	str.w	r2, [r7, r3, lsl #2]
        signs >>= 1;
 8002a82:	ea4f 0656 	mov.w	r6, r6, lsr #1
    for (i = N - TAU; i < N; ++i) {
 8002a86:	d1db      	bne.n	8002a40 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0x80>
    }
    shake256_inc_ctx_release(&state);
 8002a88:	a822      	add	r0, sp, #136	@ 0x88
 8002a8a:	f7fd feb1 	bl	80007f0 <shake256_inc_ctx_release>
}
 8002a8e:	b057      	add	sp, #348	@ 0x15c
 8002a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a92:	2101      	movs	r1, #1
 8002a94:	e7e4      	b.n	8002a60 <PQCLEAN_MLDSA44_CLEAN_poly_challenge+0xa0>
 8002a96:	bf00      	nop

08002a98 <PQCLEAN_MLDSA44_CLEAN_polyeta_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYETA_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyeta_pack(uint8_t *r, const poly *a) {
 8002a98:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a9c:	f501 6480 	add.w	r4, r1, #1024	@ 0x400
    DBENCH_START();

    for (i = 0; i < N / 8; ++i) {
        t[0] = (uint8_t) (ETA - a->coeffs[8 * i + 0]);
        t[1] = (uint8_t) (ETA - a->coeffs[8 * i + 1]);
        t[2] = (uint8_t) (ETA - a->coeffs[8 * i + 2]);
 8002aa0:	e9d1 6302 	ldrd	r6, r3, [r1, #8]
        t[3] = (uint8_t) (ETA - a->coeffs[8 * i + 3]);
        t[4] = (uint8_t) (ETA - a->coeffs[8 * i + 4]);
        t[5] = (uint8_t) (ETA - a->coeffs[8 * i + 5]);
 8002aa4:	e9d1 7504 	ldrd	r7, r5, [r1, #16]
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
 8002aa8:	698a      	ldr	r2, [r1, #24]
        t[7] = (uint8_t) (ETA - a->coeffs[8 * i + 7]);
 8002aaa:	f8d1 901c 	ldr.w	r9, [r1, #28]
        t[1] = (uint8_t) (ETA - a->coeffs[8 * i + 1]);
 8002aae:	f8d1 8004 	ldr.w	r8, [r1, #4]
        t[3] = (uint8_t) (ETA - a->coeffs[8 * i + 3]);
 8002ab2:	f1c3 0302 	rsb	r3, r3, #2
        t[2] = (uint8_t) (ETA - a->coeffs[8 * i + 2]);
 8002ab6:	f1c6 0e02 	rsb	lr, r6, #2
        t[3] = (uint8_t) (ETA - a->coeffs[8 * i + 3]);
 8002aba:	b2db      	uxtb	r3, r3
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
 8002abc:	f1c2 0202 	rsb	r2, r2, #2
        t[0] = (uint8_t) (ETA - a->coeffs[8 * i + 0]);
 8002ac0:	f851 6b20 	ldr.w	r6, [r1], #32
        t[2] = (uint8_t) (ETA - a->coeffs[8 * i + 2]);
 8002ac4:	fa5f fe8e 	uxtb.w	lr, lr
        t[4] = (uint8_t) (ETA - a->coeffs[8 * i + 4]);
 8002ac8:	f1c7 0702 	rsb	r7, r7, #2
        t[5] = (uint8_t) (ETA - a->coeffs[8 * i + 5]);
 8002acc:	f1c5 0502 	rsb	r5, r5, #2
        t[6] = (uint8_t) (ETA - a->coeffs[8 * i + 6]);
 8002ad0:	b2d2      	uxtb	r2, r2

        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002ad2:	005b      	lsls	r3, r3, #1
        t[5] = (uint8_t) (ETA - a->coeffs[8 * i + 5]);
 8002ad4:	b2ed      	uxtb	r5, r5
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002ad6:	ea4f 1c8e 	mov.w	ip, lr, lsl #6
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002ada:	ea43 039e 	orr.w	r3, r3, lr, lsr #2
        t[4] = (uint8_t) (ETA - a->coeffs[8 * i + 4]);
 8002ade:	b2ff      	uxtb	r7, r7
        t[7] = (uint8_t) (ETA - a->coeffs[8 * i + 7]);
 8002ae0:	f1c9 0902 	rsb	r9, r9, #2
        t[1] = (uint8_t) (ETA - a->coeffs[8 * i + 1]);
 8002ae4:	f1c8 0802 	rsb	r8, r8, #2
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002ae8:	0092      	lsls	r2, r2, #2
        t[7] = (uint8_t) (ETA - a->coeffs[8 * i + 7]);
 8002aea:	fa5f fe89 	uxtb.w	lr, r9
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002aee:	ea4c 0cc8 	orr.w	ip, ip, r8, lsl #3
        t[0] = (uint8_t) (ETA - a->coeffs[8 * i + 0]);
 8002af2:	f1c6 0602 	rsb	r6, r6, #2
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002af6:	ea43 1307 	orr.w	r3, r3, r7, lsl #4
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002afa:	ea42 0255 	orr.w	r2, r2, r5, lsr #1
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002afe:	ea4c 0c06 	orr.w	ip, ip, r6
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002b02:	ea43 13c5 	orr.w	r3, r3, r5, lsl #7
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002b06:	ea42 124e 	orr.w	r2, r2, lr, lsl #5
    for (i = 0; i < N / 8; ++i) {
 8002b0a:	428c      	cmp	r4, r1
        r[3 * i + 0]  = (t[0] >> 0) | (t[1] << 3) | (t[2] << 6);
 8002b0c:	f880 c000 	strb.w	ip, [r0]
        r[3 * i + 1]  = (t[2] >> 2) | (t[3] << 1) | (t[4] << 4) | (t[5] << 7);
 8002b10:	7043      	strb	r3, [r0, #1]
        r[3 * i + 2]  = (t[5] >> 1) | (t[6] << 2) | (t[7] << 5);
 8002b12:	7082      	strb	r2, [r0, #2]
    for (i = 0; i < N / 8; ++i) {
 8002b14:	f100 0003 	add.w	r0, r0, #3
 8002b18:	d1c2      	bne.n	8002aa0 <PQCLEAN_MLDSA44_CLEAN_polyeta_pack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8002b1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002b1e:	bf00      	nop

08002b20 <PQCLEAN_MLDSA44_CLEAN_polyeta_unpack>:
* Description: Unpack polynomial with coefficients in [-ETA,ETA].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyeta_unpack(poly *r, const uint8_t *a) {
 8002b20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b24:	f500 6c80 	add.w	ip, r0, #1024	@ 0x400
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 8; ++i) {
        r->coeffs[8 * i + 0] =  (a[3 * i + 0] >> 0) & 7;
 8002b28:	780c      	ldrb	r4, [r1, #0]
    for (i = 0; i < N / 8; ++i) {
 8002b2a:	3020      	adds	r0, #32
        r->coeffs[8 * i + 0] =  (a[3 * i + 0] >> 0) & 7;
 8002b2c:	f004 0407 	and.w	r4, r4, #7
 8002b30:	f840 4c20 	str.w	r4, [r0, #-32]
        r->coeffs[8 * i + 1] =  (a[3 * i + 0] >> 3) & 7;
 8002b34:	780e      	ldrb	r6, [r1, #0]
 8002b36:	f3c6 06c2 	ubfx	r6, r6, #3, #3
 8002b3a:	f840 6c1c 	str.w	r6, [r0, #-28]
        r->coeffs[8 * i + 2] = ((a[3 * i + 0] >> 6) | (a[3 * i + 1] << 2)) & 7;
 8002b3e:	784b      	ldrb	r3, [r1, #1]
 8002b40:	780a      	ldrb	r2, [r1, #0]
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	ea43 1392 	orr.w	r3, r3, r2, lsr #6
 8002b48:	f003 0307 	and.w	r3, r3, #7
 8002b4c:	f840 3c18 	str.w	r3, [r0, #-24]
        r->coeffs[8 * i + 3] =  (a[3 * i + 1] >> 1) & 7;
 8002b50:	f891 e001 	ldrb.w	lr, [r1, #1]
 8002b54:	f3ce 0542 	ubfx	r5, lr, #1, #3
 8002b58:	f840 5c14 	str.w	r5, [r0, #-20]
        r->coeffs[8 * i + 4] =  (a[3 * i + 1] >> 4) & 7;
 8002b5c:	f891 8001 	ldrb.w	r8, [r1, #1]
 8002b60:	f3c8 1802 	ubfx	r8, r8, #4, #3
 8002b64:	f840 8c10 	str.w	r8, [r0, #-16]
        r->coeffs[8 * i + 6] =  (a[3 * i + 2] >> 2) & 7;
        r->coeffs[8 * i + 7] =  (a[3 * i + 2] >> 5) & 7;

        r->coeffs[8 * i + 0] = ETA - r->coeffs[8 * i + 0];
        r->coeffs[8 * i + 1] = ETA - r->coeffs[8 * i + 1];
        r->coeffs[8 * i + 2] = ETA - r->coeffs[8 * i + 2];
 8002b68:	f1c3 0702 	rsb	r7, r3, #2
        r->coeffs[8 * i + 5] = ((a[3 * i + 1] >> 7) | (a[3 * i + 2] << 1)) & 7;
 8002b6c:	788b      	ldrb	r3, [r1, #2]
 8002b6e:	784a      	ldrb	r2, [r1, #1]
 8002b70:	005b      	lsls	r3, r3, #1
 8002b72:	ea43 13d2 	orr.w	r3, r3, r2, lsr #7
 8002b76:	f003 0307 	and.w	r3, r3, #7
 8002b7a:	f840 3c0c 	str.w	r3, [r0, #-12]
        r->coeffs[8 * i + 6] =  (a[3 * i + 2] >> 2) & 7;
 8002b7e:	788a      	ldrb	r2, [r1, #2]
 8002b80:	f3c2 0282 	ubfx	r2, r2, #2, #3
 8002b84:	f840 2c08 	str.w	r2, [r0, #-8]
        r->coeffs[8 * i + 3] = ETA - r->coeffs[8 * i + 3];
 8002b88:	f1c5 0e02 	rsb	lr, r5, #2
        r->coeffs[8 * i + 7] =  (a[3 * i + 2] >> 5) & 7;
 8002b8c:	788d      	ldrb	r5, [r1, #2]
 8002b8e:	096d      	lsrs	r5, r5, #5
        r->coeffs[8 * i + 0] = ETA - r->coeffs[8 * i + 0];
 8002b90:	f1c4 0402 	rsb	r4, r4, #2
        r->coeffs[8 * i + 1] = ETA - r->coeffs[8 * i + 1];
 8002b94:	f1c6 0602 	rsb	r6, r6, #2
        r->coeffs[8 * i + 4] = ETA - r->coeffs[8 * i + 4];
 8002b98:	f1c8 0802 	rsb	r8, r8, #2
        r->coeffs[8 * i + 5] = ETA - r->coeffs[8 * i + 5];
 8002b9c:	f1c3 0302 	rsb	r3, r3, #2
        r->coeffs[8 * i + 6] = ETA - r->coeffs[8 * i + 6];
 8002ba0:	f1c2 0202 	rsb	r2, r2, #2
        r->coeffs[8 * i + 7] = ETA - r->coeffs[8 * i + 7];
 8002ba4:	f1c5 0502 	rsb	r5, r5, #2
    for (i = 0; i < N / 8; ++i) {
 8002ba8:	4584      	cmp	ip, r0
        r->coeffs[8 * i + 1] = ETA - r->coeffs[8 * i + 1];
 8002baa:	e940 4608 	strd	r4, r6, [r0, #-32]
        r->coeffs[8 * i + 3] = ETA - r->coeffs[8 * i + 3];
 8002bae:	e940 7e06 	strd	r7, lr, [r0, #-24]
        r->coeffs[8 * i + 5] = ETA - r->coeffs[8 * i + 5];
 8002bb2:	e940 8304 	strd	r8, r3, [r0, #-16]
        r->coeffs[8 * i + 7] = ETA - r->coeffs[8 * i + 7];
 8002bb6:	e940 2502 	strd	r2, r5, [r0, #-8]
    for (i = 0; i < N / 8; ++i) {
 8002bba:	f101 0103 	add.w	r1, r1, #3
 8002bbe:	d1b3      	bne.n	8002b28 <PQCLEAN_MLDSA44_CLEAN_polyeta_unpack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8002bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002bc4 <PQCLEAN_MLDSA44_CLEAN_polyt1_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT1_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyt1_pack(uint8_t *r, const poly *a) {
 8002bc4:	b410      	push	{r4}
 8002bc6:	f501 6280 	add.w	r2, r1, #1024	@ 0x400
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        r[5 * i + 0] = (uint8_t) (a->coeffs[4 * i + 0] >> 0);
 8002bca:	680b      	ldr	r3, [r1, #0]
 8002bcc:	7003      	strb	r3, [r0, #0]
        r[5 * i + 1] = (uint8_t) ((a->coeffs[4 * i + 0] >> 8) | (a->coeffs[4 * i + 1] << 2));
 8002bce:	684b      	ldr	r3, [r1, #4]
 8002bd0:	680c      	ldr	r4, [r1, #0]
 8002bd2:	009b      	lsls	r3, r3, #2
 8002bd4:	ea43 2324 	orr.w	r3, r3, r4, asr #8
 8002bd8:	7043      	strb	r3, [r0, #1]
        r[5 * i + 2] = (uint8_t) ((a->coeffs[4 * i + 1] >> 6) | (a->coeffs[4 * i + 2] << 4));
 8002bda:	688b      	ldr	r3, [r1, #8]
 8002bdc:	684c      	ldr	r4, [r1, #4]
 8002bde:	011b      	lsls	r3, r3, #4
 8002be0:	ea43 13a4 	orr.w	r3, r3, r4, asr #6
 8002be4:	7083      	strb	r3, [r0, #2]
        r[5 * i + 3] = (uint8_t) ((a->coeffs[4 * i + 2] >> 4) | (a->coeffs[4 * i + 3] << 6));
 8002be6:	68cb      	ldr	r3, [r1, #12]
 8002be8:	688c      	ldr	r4, [r1, #8]
 8002bea:	019b      	lsls	r3, r3, #6
 8002bec:	ea43 1324 	orr.w	r3, r3, r4, asr #4
 8002bf0:	70c3      	strb	r3, [r0, #3]
        r[5 * i + 4] = (uint8_t) (a->coeffs[4 * i + 3] >> 2);
 8002bf2:	68cb      	ldr	r3, [r1, #12]
    for (i = 0; i < N / 4; ++i) {
 8002bf4:	3110      	adds	r1, #16
        r[5 * i + 4] = (uint8_t) (a->coeffs[4 * i + 3] >> 2);
 8002bf6:	109b      	asrs	r3, r3, #2
    for (i = 0; i < N / 4; ++i) {
 8002bf8:	4291      	cmp	r1, r2
        r[5 * i + 4] = (uint8_t) (a->coeffs[4 * i + 3] >> 2);
 8002bfa:	7103      	strb	r3, [r0, #4]
    for (i = 0; i < N / 4; ++i) {
 8002bfc:	f100 0005 	add.w	r0, r0, #5
 8002c00:	d1e3      	bne.n	8002bca <PQCLEAN_MLDSA44_CLEAN_polyt1_pack+0x6>
    }

    DBENCH_STOP(*tpack);
}
 8002c02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <PQCLEAN_MLDSA44_CLEAN_polyt1_unpack>:
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyt1_unpack(poly *r, const uint8_t *a) {
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
 8002c08:	f501 72a0 	add.w	r2, r1, #320	@ 0x140
        r->coeffs[4 * i + 0] = ((a[5 * i + 0] >> 0) | ((uint32_t)a[5 * i + 1] << 8)) & 0x3FF;
 8002c0c:	f891 c001 	ldrb.w	ip, [r1, #1]
 8002c10:	780b      	ldrb	r3, [r1, #0]
 8002c12:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    for (i = 0; i < N / 4; ++i) {
 8002c16:	3105      	adds	r1, #5
        r->coeffs[4 * i + 0] = ((a[5 * i + 0] >> 0) | ((uint32_t)a[5 * i + 1] << 8)) & 0x3FF;
 8002c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1c:	6003      	str	r3, [r0, #0]
        r->coeffs[4 * i + 1] = ((a[5 * i + 1] >> 2) | ((uint32_t)a[5 * i + 2] << 6)) & 0x3FF;
 8002c1e:	f811 3c03 	ldrb.w	r3, [r1, #-3]
 8002c22:	f811 cc04 	ldrb.w	ip, [r1, #-4]
 8002c26:	019b      	lsls	r3, r3, #6
 8002c28:	ea43 039c 	orr.w	r3, r3, ip, lsr #2
 8002c2c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c30:	6043      	str	r3, [r0, #4]
        r->coeffs[4 * i + 2] = ((a[5 * i + 2] >> 4) | ((uint32_t)a[5 * i + 3] << 4)) & 0x3FF;
 8002c32:	f811 3c02 	ldrb.w	r3, [r1, #-2]
 8002c36:	f811 cc03 	ldrb.w	ip, [r1, #-3]
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	ea43 131c 	orr.w	r3, r3, ip, lsr #4
 8002c40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c44:	6083      	str	r3, [r0, #8]
        r->coeffs[4 * i + 3] = ((a[5 * i + 3] >> 6) | ((uint32_t)a[5 * i + 4] << 2)) & 0x3FF;
 8002c46:	f811 3c01 	ldrb.w	r3, [r1, #-1]
 8002c4a:	f811 cc02 	ldrb.w	ip, [r1, #-2]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	ea43 139c 	orr.w	r3, r3, ip, lsr #6
    for (i = 0; i < N / 4; ++i) {
 8002c54:	428a      	cmp	r2, r1
        r->coeffs[4 * i + 3] = ((a[5 * i + 3] >> 6) | ((uint32_t)a[5 * i + 4] << 2)) & 0x3FF;
 8002c56:	60c3      	str	r3, [r0, #12]
    for (i = 0; i < N / 4; ++i) {
 8002c58:	f100 0010 	add.w	r0, r0, #16
 8002c5c:	d1d6      	bne.n	8002c0c <PQCLEAN_MLDSA44_CLEAN_polyt1_unpack+0x4>
    }

    DBENCH_STOP(*tpack);
}
 8002c5e:	4770      	bx	lr

08002c60 <PQCLEAN_MLDSA44_CLEAN_polyt0_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYT0_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyt0_pack(uint8_t *r, const poly *a) {
 8002c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c64:	f501 6480 	add.w	r4, r1, #1024	@ 0x400
 8002c68:	b083      	sub	sp, #12

    for (i = 0; i < N / 8; ++i) {
        t[0] = (1 << (D - 1)) - a->coeffs[8 * i + 0];
        t[1] = (1 << (D - 1)) - a->coeffs[8 * i + 1];
        t[2] = (1 << (D - 1)) - a->coeffs[8 * i + 2];
        t[3] = (1 << (D - 1)) - a->coeffs[8 * i + 3];
 8002c6a:	68cb      	ldr	r3, [r1, #12]
        t[4] = (1 << (D - 1)) - a->coeffs[8 * i + 4];
        t[5] = (1 << (D - 1)) - a->coeffs[8 * i + 5];
 8002c6c:	694e      	ldr	r6, [r1, #20]
        t[3] = (1 << (D - 1)) - a->coeffs[8 * i + 3];
 8002c6e:	f5c3 5580 	rsb	r5, r3, #4096	@ 0x1000
        t[6] = (1 << (D - 1)) - a->coeffs[8 * i + 6];
        t[7] = (1 << (D - 1)) - a->coeffs[8 * i + 7];
 8002c72:	69cb      	ldr	r3, [r1, #28]
 8002c74:	9301      	str	r3, [sp, #4]
        t[4] = (1 << (D - 1)) - a->coeffs[8 * i + 4];
 8002c76:	690b      	ldr	r3, [r1, #16]
        t[2] = (1 << (D - 1)) - a->coeffs[8 * i + 2];
 8002c78:	e9d1 7201 	ldrd	r7, r2, [r1, #4]
        t[4] = (1 << (D - 1)) - a->coeffs[8 * i + 4];
 8002c7c:	f5c3 5880 	rsb	r8, r3, #4096	@ 0x1000
        t[6] = (1 << (D - 1)) - a->coeffs[8 * i + 6];
 8002c80:	698b      	ldr	r3, [r1, #24]
 8002c82:	f5c3 5980 	rsb	r9, r3, #4096	@ 0x1000
        t[0] = (1 << (D - 1)) - a->coeffs[8 * i + 0];
 8002c86:	680b      	ldr	r3, [r1, #0]
        t[1] = (1 << (D - 1)) - a->coeffs[8 * i + 1];
 8002c88:	f5c7 5780 	rsb	r7, r7, #4096	@ 0x1000
        t[0] = (1 << (D - 1)) - a->coeffs[8 * i + 0];
 8002c8c:	f5c3 5c80 	rsb	ip, r3, #4096	@ 0x1000

        r[13 * i + 0]  =  (uint8_t) t[0];
        r[13 * i + 1]  =  (uint8_t) (t[0] >>  8);
        r[13 * i + 1] |=  (uint8_t) (t[1] <<  5);
 8002c90:	ea4f 1e47 	mov.w	lr, r7, lsl #5
        t[2] = (1 << (D - 1)) - a->coeffs[8 * i + 2];
 8002c94:	f5c2 5280 	rsb	r2, r2, #4096	@ 0x1000
        r[13 * i + 2]  =  (uint8_t) (t[1] >>  3);
        r[13 * i + 3]  =  (uint8_t) (t[1] >> 11);
        r[13 * i + 3] |=  (uint8_t) (t[2] <<  2);
        r[13 * i + 4]  =  (uint8_t) (t[2] >>  6);
        r[13 * i + 4] |=  (uint8_t) (t[3] <<  7);
 8002c98:	ea4f 1bc5 	mov.w	fp, r5, lsl #7
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002c9c:	f04f 0a00 	mov.w	sl, #0
        r[13 * i + 4] |=  (uint8_t) (t[3] <<  7);
 8002ca0:	ea4b 1b92 	orr.w	fp, fp, r2, lsr #6
        t[5] = (1 << (D - 1)) - a->coeffs[8 * i + 5];
 8002ca4:	f5c6 5680 	rsb	r6, r6, #4096	@ 0x1000
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002ca8:	f36c 0a07 	bfi	sl, ip, #0, #8
        r[13 * i + 1] |=  (uint8_t) (t[1] <<  5);
 8002cac:	ea4e 2c1c 	orr.w	ip, lr, ip, lsr #8
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002cb0:	f04f 0e00 	mov.w	lr, #0
 8002cb4:	f36b 0e07 	bfi	lr, fp, #0, #8
 8002cb8:	f36c 2a0f 	bfi	sl, ip, #8, #8
        r[13 * i + 5]  =  (uint8_t) (t[3] >>  1);
        r[13 * i + 6]  =  (uint8_t) (t[3] >>  9);
        r[13 * i + 6] |=  (uint8_t) (t[4] <<  4);
        r[13 * i + 7]  =  (uint8_t) (t[4] >>  4);
        r[13 * i + 8]  =  (uint8_t) (t[4] >> 12);
        r[13 * i + 8] |=  (uint8_t) (t[5] <<  1);
 8002cbc:	ea4f 0b46 	mov.w	fp, r6, lsl #1
        r[13 * i + 2]  =  (uint8_t) (t[1] >>  3);
 8002cc0:	ea4f 0cd7 	mov.w	ip, r7, lsr #3
        t[7] = (1 << (D - 1)) - a->coeffs[8 * i + 7];
 8002cc4:	9b01      	ldr	r3, [sp, #4]
        r[13 * i + 3] |=  (uint8_t) (t[2] <<  2);
 8002cc6:	0092      	lsls	r2, r2, #2
        r[13 * i + 8] |=  (uint8_t) (t[5] <<  1);
 8002cc8:	ea4b 3b18 	orr.w	fp, fp, r8, lsr #12
        r[13 * i + 3] |=  (uint8_t) (t[2] <<  2);
 8002ccc:	ea42 22d7 	orr.w	r2, r2, r7, lsr #11
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002cd0:	f36c 4a17 	bfi	sl, ip, #16, #8
        r[13 * i + 9]  =  (uint8_t) (t[5] >>  7);
        r[13 * i + 9] |=  (uint8_t) (t[6] <<  6);
 8002cd4:	ea4f 1789 	mov.w	r7, r9, lsl #6
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002cd8:	f04f 0c00 	mov.w	ip, #0
        t[7] = (1 << (D - 1)) - a->coeffs[8 * i + 7];
 8002cdc:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002ce0:	f36b 0c07 	bfi	ip, fp, #0, #8
 8002ce4:	f362 6a1f 	bfi	sl, r2, #24, #8
        r[13 * i + 5]  =  (uint8_t) (t[3] >>  1);
 8002ce8:	ea4f 0b55 	mov.w	fp, r5, lsr #1
        r[13 * i + 6] |=  (uint8_t) (t[4] <<  4);
 8002cec:	ea4f 1208 	mov.w	r2, r8, lsl #4
        r[13 * i + 9] |=  (uint8_t) (t[6] <<  6);
 8002cf0:	ea47 16d6 	orr.w	r6, r7, r6, lsr #7
        r[13 * i + 6] |=  (uint8_t) (t[4] <<  4);
 8002cf4:	ea42 2555 	orr.w	r5, r2, r5, lsr #9
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002cf8:	f366 2c0f 	bfi	ip, r6, #8, #8
        r[13 * i + 10]  =  (uint8_t) (t[6] >>  2);
        r[13 * i + 11]  =  (uint8_t) (t[6] >> 10);
        r[13 * i + 11] |=  (uint8_t) (t[7] <<  3);
 8002cfc:	00da      	lsls	r2, r3, #3
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002cfe:	f36b 2e0f 	bfi	lr, fp, #8, #8
        r[13 * i + 10]  =  (uint8_t) (t[6] >>  2);
 8002d02:	ea4f 0699 	mov.w	r6, r9, lsr #2
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002d06:	f365 4e17 	bfi	lr, r5, #16, #8
        r[13 * i + 7]  =  (uint8_t) (t[4] >>  4);
 8002d0a:	ea4f 1818 	mov.w	r8, r8, lsr #4
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002d0e:	f366 4c17 	bfi	ip, r6, #16, #8
        r[13 * i + 11] |=  (uint8_t) (t[7] <<  3);
 8002d12:	ea42 2299 	orr.w	r2, r2, r9, lsr #10
    for (i = 0; i < N / 8; ++i) {
 8002d16:	3120      	adds	r1, #32
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002d18:	f368 6e1f 	bfi	lr, r8, #24, #8
 8002d1c:	f362 6c1f 	bfi	ip, r2, #24, #8
        r[13 * i + 12]  =  (uint8_t) (t[7] >>  5);
 8002d20:	095b      	lsrs	r3, r3, #5
    for (i = 0; i < N / 8; ++i) {
 8002d22:	428c      	cmp	r4, r1
        r[13 * i + 0]  =  (uint8_t) t[0];
 8002d24:	f8c0 a000 	str.w	sl, [r0]
 8002d28:	f8c0 e004 	str.w	lr, [r0, #4]
 8002d2c:	f8c0 c008 	str.w	ip, [r0, #8]
        r[13 * i + 12]  =  (uint8_t) (t[7] >>  5);
 8002d30:	7303      	strb	r3, [r0, #12]
    for (i = 0; i < N / 8; ++i) {
 8002d32:	f100 000d 	add.w	r0, r0, #13
 8002d36:	d198      	bne.n	8002c6a <PQCLEAN_MLDSA44_CLEAN_polyt0_pack+0xa>
    }

    DBENCH_STOP(*tpack);
}
 8002d38:	b003      	add	sp, #12
 8002d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d3e:	bf00      	nop

08002d40 <PQCLEAN_MLDSA44_CLEAN_polyt0_unpack>:
* Description: Unpack polynomial t0 with coefficients in ]-2^{D-1}, 2^{D-1}].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyt0_unpack(poly *r, const uint8_t *a) {
 8002d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d44:	f501 7ed0 	add.w	lr, r1, #416	@ 0x1a0
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 8; ++i) {
        r->coeffs[8 * i + 0]  = a[13 * i + 0];
 8002d48:	780b      	ldrb	r3, [r1, #0]
 8002d4a:	6003      	str	r3, [r0, #0]
        r->coeffs[8 * i + 0] |= (uint32_t)a[13 * i + 1] << 8;
 8002d4c:	784a      	ldrb	r2, [r1, #1]
 8002d4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
        r->coeffs[8 * i + 0] &= 0x1FFF;
 8002d52:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d56:	6003      	str	r3, [r0, #0]

        r->coeffs[8 * i + 1]  = a[13 * i + 1] >> 5;
 8002d58:	784d      	ldrb	r5, [r1, #1]
 8002d5a:	096d      	lsrs	r5, r5, #5
 8002d5c:	6045      	str	r5, [r0, #4]

        r->coeffs[8 * i + 7]  = a[13 * i + 11] >> 3;
        r->coeffs[8 * i + 7] |= (uint32_t)a[13 * i + 12] << 5;
        r->coeffs[8 * i + 7] &= 0x1FFF;

        r->coeffs[8 * i + 0] = (1 << (D - 1)) - r->coeffs[8 * i + 0];
 8002d5e:	f5c3 5c80 	rsb	ip, r3, #4096	@ 0x1000
        r->coeffs[8 * i + 1] |= (uint32_t)a[13 * i + 2] << 3;
 8002d62:	788b      	ldrb	r3, [r1, #2]
 8002d64:	ea45 05c3 	orr.w	r5, r5, r3, lsl #3
 8002d68:	6045      	str	r5, [r0, #4]
        r->coeffs[8 * i + 1] |= (uint32_t)a[13 * i + 3] << 11;
 8002d6a:	78cb      	ldrb	r3, [r1, #3]
 8002d6c:	ea45 25c3 	orr.w	r5, r5, r3, lsl #11
        r->coeffs[8 * i + 1] &= 0x1FFF;
 8002d70:	f3c5 050c 	ubfx	r5, r5, #0, #13
 8002d74:	6045      	str	r5, [r0, #4]
        r->coeffs[8 * i + 2]  = a[13 * i + 3] >> 2;
 8002d76:	78cf      	ldrb	r7, [r1, #3]
 8002d78:	08bf      	lsrs	r7, r7, #2
 8002d7a:	6087      	str	r7, [r0, #8]
        r->coeffs[8 * i + 2] |= (uint32_t)a[13 * i + 4] << 6;
 8002d7c:	790b      	ldrb	r3, [r1, #4]
 8002d7e:	ea47 1783 	orr.w	r7, r7, r3, lsl #6
        r->coeffs[8 * i + 2] &= 0x1FFF;
 8002d82:	f3c7 070c 	ubfx	r7, r7, #0, #13
 8002d86:	6087      	str	r7, [r0, #8]
        r->coeffs[8 * i + 3]  = a[13 * i + 4] >> 7;
 8002d88:	790c      	ldrb	r4, [r1, #4]
 8002d8a:	09e4      	lsrs	r4, r4, #7
 8002d8c:	60c4      	str	r4, [r0, #12]
        r->coeffs[8 * i + 3] |= (uint32_t)a[13 * i + 5] << 1;
 8002d8e:	794b      	ldrb	r3, [r1, #5]
 8002d90:	ea44 0443 	orr.w	r4, r4, r3, lsl #1
 8002d94:	60c4      	str	r4, [r0, #12]
        r->coeffs[8 * i + 3] |= (uint32_t)a[13 * i + 6] << 9;
 8002d96:	798b      	ldrb	r3, [r1, #6]
 8002d98:	ea44 2443 	orr.w	r4, r4, r3, lsl #9
        r->coeffs[8 * i + 3] &= 0x1FFF;
 8002d9c:	f3c4 040c 	ubfx	r4, r4, #0, #13
 8002da0:	60c4      	str	r4, [r0, #12]
        r->coeffs[8 * i + 4]  = a[13 * i + 6] >> 4;
 8002da2:	798a      	ldrb	r2, [r1, #6]
 8002da4:	0912      	lsrs	r2, r2, #4
 8002da6:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 4] |= (uint32_t)a[13 * i + 7] << 4;
 8002da8:	79cb      	ldrb	r3, [r1, #7]
 8002daa:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
 8002dae:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 4] |= (uint32_t)a[13 * i + 8] << 12;
 8002db0:	7a0b      	ldrb	r3, [r1, #8]
 8002db2:	ea42 3203 	orr.w	r2, r2, r3, lsl #12
        r->coeffs[8 * i + 4] &= 0x1FFF;
 8002db6:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002dba:	6102      	str	r2, [r0, #16]
        r->coeffs[8 * i + 5]  = a[13 * i + 8] >> 1;
 8002dbc:	7a0e      	ldrb	r6, [r1, #8]
 8002dbe:	0876      	lsrs	r6, r6, #1
 8002dc0:	6146      	str	r6, [r0, #20]
        r->coeffs[8 * i + 5] |= (uint32_t)a[13 * i + 9] << 7;
 8002dc2:	7a4b      	ldrb	r3, [r1, #9]
 8002dc4:	ea46 16c3 	orr.w	r6, r6, r3, lsl #7
        r->coeffs[8 * i + 5] &= 0x1FFF;
 8002dc8:	f3c6 060c 	ubfx	r6, r6, #0, #13
 8002dcc:	6146      	str	r6, [r0, #20]
        r->coeffs[8 * i + 6]  = a[13 * i + 9] >> 6;
 8002dce:	7a4b      	ldrb	r3, [r1, #9]
 8002dd0:	099b      	lsrs	r3, r3, #6
 8002dd2:	6183      	str	r3, [r0, #24]
        r->coeffs[8 * i + 6] |= (uint32_t)a[13 * i + 10] << 2;
 8002dd4:	f891 800a 	ldrb.w	r8, [r1, #10]
 8002dd8:	ea43 0388 	orr.w	r3, r3, r8, lsl #2
 8002ddc:	6183      	str	r3, [r0, #24]
        r->coeffs[8 * i + 6] |= (uint32_t)a[13 * i + 11] << 10;
 8002dde:	f891 800b 	ldrb.w	r8, [r1, #11]
 8002de2:	ea43 2388 	orr.w	r3, r3, r8, lsl #10
        r->coeffs[8 * i + 6] &= 0x1FFF;
 8002de6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002dea:	6183      	str	r3, [r0, #24]
        r->coeffs[8 * i + 7]  = a[13 * i + 11] >> 3;
 8002dec:	f891 800b 	ldrb.w	r8, [r1, #11]
 8002df0:	ea4f 08d8 	mov.w	r8, r8, lsr #3
 8002df4:	f8c0 801c 	str.w	r8, [r0, #28]
        r->coeffs[8 * i + 7] |= (uint32_t)a[13 * i + 12] << 5;
 8002df8:	f891 900c 	ldrb.w	r9, [r1, #12]
    for (i = 0; i < N / 8; ++i) {
 8002dfc:	310d      	adds	r1, #13
        r->coeffs[8 * i + 7] |= (uint32_t)a[13 * i + 12] << 5;
 8002dfe:	ea48 1849 	orr.w	r8, r8, r9, lsl #5
        r->coeffs[8 * i + 1] = (1 << (D - 1)) - r->coeffs[8 * i + 1];
 8002e02:	f5c5 5580 	rsb	r5, r5, #4096	@ 0x1000
        r->coeffs[8 * i + 2] = (1 << (D - 1)) - r->coeffs[8 * i + 2];
 8002e06:	f5c7 5780 	rsb	r7, r7, #4096	@ 0x1000
        r->coeffs[8 * i + 3] = (1 << (D - 1)) - r->coeffs[8 * i + 3];
 8002e0a:	f5c4 5480 	rsb	r4, r4, #4096	@ 0x1000
        r->coeffs[8 * i + 4] = (1 << (D - 1)) - r->coeffs[8 * i + 4];
 8002e0e:	f5c2 5280 	rsb	r2, r2, #4096	@ 0x1000
        r->coeffs[8 * i + 5] = (1 << (D - 1)) - r->coeffs[8 * i + 5];
 8002e12:	f5c6 5680 	rsb	r6, r6, #4096	@ 0x1000
        r->coeffs[8 * i + 6] = (1 << (D - 1)) - r->coeffs[8 * i + 6];
 8002e16:	f5c3 5380 	rsb	r3, r3, #4096	@ 0x1000
        r->coeffs[8 * i + 7] = (1 << (D - 1)) - r->coeffs[8 * i + 7];
 8002e1a:	f5c8 5880 	rsb	r8, r8, #4096	@ 0x1000
    for (i = 0; i < N / 8; ++i) {
 8002e1e:	458e      	cmp	lr, r1
        r->coeffs[8 * i + 1] = (1 << (D - 1)) - r->coeffs[8 * i + 1];
 8002e20:	e9c0 c500 	strd	ip, r5, [r0]
        r->coeffs[8 * i + 3] = (1 << (D - 1)) - r->coeffs[8 * i + 3];
 8002e24:	e9c0 7402 	strd	r7, r4, [r0, #8]
        r->coeffs[8 * i + 5] = (1 << (D - 1)) - r->coeffs[8 * i + 5];
 8002e28:	e9c0 2604 	strd	r2, r6, [r0, #16]
        r->coeffs[8 * i + 7] = (1 << (D - 1)) - r->coeffs[8 * i + 7];
 8002e2c:	e9c0 3806 	strd	r3, r8, [r0, #24]
    for (i = 0; i < N / 8; ++i) {
 8002e30:	f100 0020 	add.w	r0, r0, #32
 8002e34:	d188      	bne.n	8002d48 <PQCLEAN_MLDSA44_CLEAN_polyt0_unpack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8002e36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e3a:	bf00      	nop

08002e3c <PQCLEAN_MLDSA44_CLEAN_polyz_pack>:
*
* Arguments:   - uint8_t *r: pointer to output byte array with at least
*                            POLYZ_PACKEDBYTES bytes
*              - const poly *a: pointer to input polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyz_pack(uint8_t *r, const poly *a) {
 8002e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002e40:	f500 7710 	add.w	r7, r0, #576	@ 0x240
    uint32_t t[4];
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
        t[0] = GAMMA1 - a->coeffs[4 * i + 0];
        t[1] = GAMMA1 - a->coeffs[4 * i + 1];
 8002e44:	e9d1 2401 	ldrd	r2, r4, [r1, #4]
        t[0] = GAMMA1 - a->coeffs[4 * i + 0];
 8002e48:	680d      	ldr	r5, [r1, #0]
        t[2] = GAMMA1 - a->coeffs[4 * i + 2];
        t[3] = GAMMA1 - a->coeffs[4 * i + 3];
 8002e4a:	68cb      	ldr	r3, [r1, #12]
        t[2] = GAMMA1 - a->coeffs[4 * i + 2];
 8002e4c:	f5c4 3400 	rsb	r4, r4, #131072	@ 0x20000
        t[1] = GAMMA1 - a->coeffs[4 * i + 1];
 8002e50:	f5c2 3200 	rsb	r2, r2, #131072	@ 0x20000
        r[9 * i + 1]  = (uint8_t) (t[0] >> 8);
        r[9 * i + 2]  = (uint8_t) (t[0] >> 16);
        r[9 * i + 2] |= (uint8_t) (t[1] << 2);
        r[9 * i + 3]  = (uint8_t) (t[1] >> 6);
        r[9 * i + 4]  = (uint8_t) (t[1] >> 14);
        r[9 * i + 4] |= (uint8_t) (t[2] << 4);
 8002e54:	0126      	lsls	r6, r4, #4
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e56:	f04f 0e00 	mov.w	lr, #0
        t[0] = GAMMA1 - a->coeffs[4 * i + 0];
 8002e5a:	f5c5 3500 	rsb	r5, r5, #131072	@ 0x20000
        t[3] = GAMMA1 - a->coeffs[4 * i + 3];
 8002e5e:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
        r[9 * i + 4] |= (uint8_t) (t[2] << 4);
 8002e62:	ea46 3692 	orr.w	r6, r6, r2, lsr #14
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e66:	46f4      	mov	ip, lr
        r[9 * i + 1]  = (uint8_t) (t[0] >> 8);
 8002e68:	ea4f 2a15 	mov.w	sl, r5, lsr #8
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e6c:	f365 0e07 	bfi	lr, r5, #0, #8
        r[9 * i + 2] |= (uint8_t) (t[1] << 2);
 8002e70:	ea4f 0882 	mov.w	r8, r2, lsl #2
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e74:	f366 0c07 	bfi	ip, r6, #0, #8
        r[9 * i + 5]  = (uint8_t) (t[2] >> 4);
 8002e78:	ea4f 1914 	mov.w	r9, r4, lsr #4
        r[9 * i + 6]  = (uint8_t) (t[2] >> 12);
        r[9 * i + 6] |= (uint8_t) (t[3] << 6);
 8002e7c:	019e      	lsls	r6, r3, #6
 8002e7e:	ea46 3414 	orr.w	r4, r6, r4, lsr #12
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e82:	f36a 2e0f 	bfi	lr, sl, #8, #8
        r[9 * i + 2] |= (uint8_t) (t[1] << 2);
 8002e86:	ea48 4515 	orr.w	r5, r8, r5, lsr #16
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e8a:	f369 2c0f 	bfi	ip, r9, #8, #8
 8002e8e:	f364 4c17 	bfi	ip, r4, #16, #8
 8002e92:	f365 4e17 	bfi	lr, r5, #16, #8
        r[9 * i + 7]  = (uint8_t) (t[3] >> 2);
 8002e96:	089c      	lsrs	r4, r3, #2
        r[9 * i + 3]  = (uint8_t) (t[1] >> 6);
 8002e98:	0992      	lsrs	r2, r2, #6
        r[9 * i + 0]  = (uint8_t) t[0];
 8002e9a:	f362 6e1f 	bfi	lr, r2, #24, #8
 8002e9e:	f364 6c1f 	bfi	ip, r4, #24, #8
        r[9 * i + 8]  = (uint8_t) (t[3] >> 10);
 8002ea2:	0a9b      	lsrs	r3, r3, #10
        r[9 * i + 0]  = (uint8_t) t[0];
 8002ea4:	f8c0 e000 	str.w	lr, [r0]
 8002ea8:	f8c0 c004 	str.w	ip, [r0, #4]
        r[9 * i + 8]  = (uint8_t) (t[3] >> 10);
 8002eac:	7203      	strb	r3, [r0, #8]
    for (i = 0; i < N / 4; ++i) {
 8002eae:	3009      	adds	r0, #9
 8002eb0:	4287      	cmp	r7, r0
 8002eb2:	f101 0110 	add.w	r1, r1, #16
 8002eb6:	d1c5      	bne.n	8002e44 <PQCLEAN_MLDSA44_CLEAN_polyz_pack+0x8>
    }

    DBENCH_STOP(*tpack);
}
 8002eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08002ebc <PQCLEAN_MLDSA44_CLEAN_polyz_unpack>:
*              in [-(GAMMA1 - 1), GAMMA1].
*
* Arguments:   - poly *r: pointer to output polynomial
*              - const uint8_t *a: byte array with bit-packed polynomial
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyz_unpack(poly *r, const uint8_t *a, int is_trigger) {
 8002ebc:	b530      	push	{r4, r5, lr}
 8002ebe:	f501 7c10 	add.w	ip, r1, #576	@ 0x240

//    if(is_trigger==1){
//  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
//    }
    for (i = 0; i < N / 4; ++i) {
        r->coeffs[4 * i + 0]  = a[9 * i + 0];
 8002ec2:	780c      	ldrb	r4, [r1, #0]
 8002ec4:	6004      	str	r4, [r0, #0]
        r->coeffs[4 * i + 0] |= (uint32_t)a[9 * i + 1] << 8;
 8002ec6:	784b      	ldrb	r3, [r1, #1]
 8002ec8:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
 8002ecc:	6004      	str	r4, [r0, #0]
        r->coeffs[4 * i + 0] |= (uint32_t)a[9 * i + 2] << 16;
 8002ece:	788b      	ldrb	r3, [r1, #2]
 8002ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
        r->coeffs[4 * i + 0] &= 0x3FFFF;
 8002ed4:	f3c4 0411 	ubfx	r4, r4, #0, #18
 8002ed8:	6004      	str	r4, [r0, #0]

        r->coeffs[4 * i + 1]  = a[9 * i + 2] >> 2;
 8002eda:	788a      	ldrb	r2, [r1, #2]
 8002edc:	0892      	lsrs	r2, r2, #2
 8002ede:	6042      	str	r2, [r0, #4]
        r->coeffs[4 * i + 1] |= (uint32_t)a[9 * i + 3] << 6;
 8002ee0:	78cb      	ldrb	r3, [r1, #3]
 8002ee2:	ea42 1283 	orr.w	r2, r2, r3, lsl #6
 8002ee6:	6042      	str	r2, [r0, #4]
        r->coeffs[4 * i + 1] |= (uint32_t)a[9 * i + 4] << 14;
 8002ee8:	790b      	ldrb	r3, [r1, #4]
 8002eea:	ea42 3283 	orr.w	r2, r2, r3, lsl #14
    for (i = 0; i < N / 4; ++i) {
 8002eee:	3109      	adds	r1, #9
        r->coeffs[4 * i + 1] &= 0x3FFFF;
 8002ef0:	f3c2 0211 	ubfx	r2, r2, #0, #18
 8002ef4:	6042      	str	r2, [r0, #4]

        r->coeffs[4 * i + 2]  = a[9 * i + 4] >> 4;
 8002ef6:	f811 3c05 	ldrb.w	r3, [r1, #-5]
 8002efa:	091b      	lsrs	r3, r3, #4
 8002efc:	6083      	str	r3, [r0, #8]
        r->coeffs[4 * i + 2] |= (uint32_t)a[9 * i + 5] << 4;
 8002efe:	f811 5c04 	ldrb.w	r5, [r1, #-4]
    for (i = 0; i < N / 4; ++i) {
 8002f02:	3010      	adds	r0, #16
        r->coeffs[4 * i + 2] |= (uint32_t)a[9 * i + 5] << 4;
 8002f04:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
 8002f08:	f840 3c08 	str.w	r3, [r0, #-8]
        r->coeffs[4 * i + 2] |= (uint32_t)a[9 * i + 6] << 12;
 8002f0c:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8002f10:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
        r->coeffs[4 * i + 2] &= 0x3FFFF;
 8002f14:	f3c3 0311 	ubfx	r3, r3, #0, #18
 8002f18:	f840 3c08 	str.w	r3, [r0, #-8]

        r->coeffs[4 * i + 3]  = a[9 * i + 6] >> 6;
 8002f1c:	f811 5c03 	ldrb.w	r5, [r1, #-3]
 8002f20:	09ad      	lsrs	r5, r5, #6
 8002f22:	f840 5c04 	str.w	r5, [r0, #-4]
        r->coeffs[4 * i + 3] |= (uint32_t)a[9 * i + 7] << 2;
 8002f26:	f811 ec02 	ldrb.w	lr, [r1, #-2]
 8002f2a:	ea45 058e 	orr.w	r5, r5, lr, lsl #2
 8002f2e:	f840 5c04 	str.w	r5, [r0, #-4]
        r->coeffs[4 * i + 3] |= (uint32_t)a[9 * i + 8] << 10;
 8002f32:	f811 ec01 	ldrb.w	lr, [r1, #-1]
 8002f36:	ea45 258e 	orr.w	r5, r5, lr, lsl #10
        r->coeffs[4 * i + 3] &= 0x3FFFF;

        r->coeffs[4 * i + 0] = GAMMA1 - r->coeffs[4 * i + 0];
 8002f3a:	f5c4 3400 	rsb	r4, r4, #131072	@ 0x20000
        r->coeffs[4 * i + 1] = GAMMA1 - r->coeffs[4 * i + 1];
 8002f3e:	f5c2 3200 	rsb	r2, r2, #131072	@ 0x20000
        r->coeffs[4 * i + 2] = GAMMA1 - r->coeffs[4 * i + 2];
 8002f42:	f5c3 3300 	rsb	r3, r3, #131072	@ 0x20000
        r->coeffs[4 * i + 3] = GAMMA1 - r->coeffs[4 * i + 3];
 8002f46:	f5c5 3500 	rsb	r5, r5, #131072	@ 0x20000
    for (i = 0; i < N / 4; ++i) {
 8002f4a:	458c      	cmp	ip, r1
        r->coeffs[4 * i + 2] = GAMMA1 - r->coeffs[4 * i + 2];
 8002f4c:	e940 2303 	strd	r2, r3, [r0, #-12]
        r->coeffs[4 * i + 0] = GAMMA1 - r->coeffs[4 * i + 0];
 8002f50:	f840 4c10 	str.w	r4, [r0, #-16]
        r->coeffs[4 * i + 3] = GAMMA1 - r->coeffs[4 * i + 3];
 8002f54:	f840 5c04 	str.w	r5, [r0, #-4]
    for (i = 0; i < N / 4; ++i) {
 8002f58:	d1b3      	bne.n	8002ec2 <PQCLEAN_MLDSA44_CLEAN_polyz_unpack+0x6>
//    if(is_trigger==1){
//  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
//    }

    DBENCH_STOP(*tpack);
}
 8002f5a:	bd30      	pop	{r4, r5, pc}

08002f5c <PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1>:
        uint16_t nonce, int is_trigger) {
 8002f5c:	b530      	push	{r4, r5, lr}
 8002f5e:	f5ad 7d5f 	sub.w	sp, sp, #892	@ 0x37c
 8002f62:	4604      	mov	r4, r0
    stream256_init(&state, seed, nonce);
 8002f64:	4668      	mov	r0, sp
        uint16_t nonce, int is_trigger) {
 8002f66:	461d      	mov	r5, r3
    stream256_init(&state, seed, nonce);
 8002f68:	f000 ffa0 	bl	8003eac <PQCLEAN_MLDSA44_CLEAN_dilithium_shake256_stream_init>
    stream256_squeezeblocks(buf, POLY_UNIFORM_GAMMA1_NBLOCKS, &state);
 8002f6c:	466a      	mov	r2, sp
 8002f6e:	f44f 712a 	mov.w	r1, #680	@ 0x2a8
 8002f72:	a834      	add	r0, sp, #208	@ 0xd0
 8002f74:	f7fd fbf6 	bl	8000764 <shake256_inc_squeeze>
    stream256_release(&state);
 8002f78:	4668      	mov	r0, sp
 8002f7a:	f7fd fc39 	bl	80007f0 <shake256_inc_ctx_release>
    PQCLEAN_MLDSA44_CLEAN_polyz_unpack(a, buf,is_trigger);
 8002f7e:	462a      	mov	r2, r5
 8002f80:	a934      	add	r1, sp, #208	@ 0xd0
 8002f82:	4620      	mov	r0, r4
 8002f84:	f7ff ff9a 	bl	8002ebc <PQCLEAN_MLDSA44_CLEAN_polyz_unpack>
}
 8002f88:	f50d 7d5f 	add.w	sp, sp, #892	@ 0x37c
 8002f8c:	bd30      	pop	{r4, r5, pc}
 8002f8e:	bf00      	nop

08002f90 <PQCLEAN_MLDSA44_CLEAN_polyw1_pack>:
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyw1_pack(uint8_t *r, const poly *a) {
    unsigned int i;
    DBENCH_START();

    for (i = 0; i < N / 4; ++i) {
 8002f90:	f100 0cc0 	add.w	ip, r0, #192	@ 0xc0
        r[3 * i + 0]  = (uint8_t) a->coeffs[4 * i + 0];
 8002f94:	780b      	ldrb	r3, [r1, #0]
 8002f96:	7003      	strb	r3, [r0, #0]
        r[3 * i + 0] |= (uint8_t) (a->coeffs[4 * i + 1] << 6);
 8002f98:	684a      	ldr	r2, [r1, #4]
    for (i = 0; i < N / 4; ++i) {
 8002f9a:	3003      	adds	r0, #3
        r[3 * i + 0] |= (uint8_t) (a->coeffs[4 * i + 1] << 6);
 8002f9c:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8002fa0:	f800 3c03 	strb.w	r3, [r0, #-3]
        r[3 * i + 1]  = (uint8_t) (a->coeffs[4 * i + 1] >> 2);
 8002fa4:	684b      	ldr	r3, [r1, #4]
    for (i = 0; i < N / 4; ++i) {
 8002fa6:	3110      	adds	r1, #16
        r[3 * i + 1]  = (uint8_t) (a->coeffs[4 * i + 1] >> 2);
 8002fa8:	f3c3 0387 	ubfx	r3, r3, #2, #8
 8002fac:	f800 3c02 	strb.w	r3, [r0, #-2]
        r[3 * i + 1] |= (uint8_t) (a->coeffs[4 * i + 2] << 4);
 8002fb0:	f851 2c08 	ldr.w	r2, [r1, #-8]
 8002fb4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8002fb8:	f800 3c02 	strb.w	r3, [r0, #-2]
        r[3 * i + 2]  = (uint8_t) (a->coeffs[4 * i + 2] >> 4);
 8002fbc:	f851 3c08 	ldr.w	r3, [r1, #-8]
 8002fc0:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8002fc4:	f800 3c01 	strb.w	r3, [r0, #-1]
        r[3 * i + 2] |= (uint8_t) (a->coeffs[4 * i + 3] << 2);
 8002fc8:	f851 2c04 	ldr.w	r2, [r1, #-4]
    for (i = 0; i < N / 4; ++i) {
 8002fcc:	4560      	cmp	r0, ip
        r[3 * i + 2] |= (uint8_t) (a->coeffs[4 * i + 3] << 2);
 8002fce:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
 8002fd2:	f800 3c01 	strb.w	r3, [r0, #-1]
    for (i = 0; i < N / 4; ++i) {
 8002fd6:	d1dd      	bne.n	8002f94 <PQCLEAN_MLDSA44_CLEAN_polyw1_pack+0x4>
    }

    DBENCH_STOP(*tpack);
}
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop

08002fdc <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand>:
*              sampling on the output stream of SHAKE128(rho|j|i)
*
* Arguments:   - polyvecl mat[K]: output matrix
*              - const uint8_t rho[]: byte array containing seed rho
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8002fdc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe0:	4688      	mov	r8, r1
 8002fe2:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 8002fe6:	2700      	movs	r7, #0
    unsigned int i, j;

    for (i = 0; i < K; ++i) {
        for (j = 0; j < L; ++j) {
 8002fe8:	f5a6 5580 	sub.w	r5, r6, #4096	@ 0x1000
void PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand(polyvecl mat[K], const uint8_t rho[SEEDBYTES]) {
 8002fec:	463c      	mov	r4, r7
            PQCLEAN_MLDSA44_CLEAN_poly_uniform(&mat[i].vec[j], rho, (uint16_t) ((i << 8) + j));
 8002fee:	4622      	mov	r2, r4
 8002ff0:	4628      	mov	r0, r5
 8002ff2:	4641      	mov	r1, r8
        for (j = 0; j < L; ++j) {
 8002ff4:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
            PQCLEAN_MLDSA44_CLEAN_poly_uniform(&mat[i].vec[j], rho, (uint16_t) ((i << 8) + j));
 8002ff8:	f7ff fbd6 	bl	80027a8 <PQCLEAN_MLDSA44_CLEAN_poly_uniform>
        for (j = 0; j < L; ++j) {
 8002ffc:	3401      	adds	r4, #1
 8002ffe:	42b5      	cmp	r5, r6
 8003000:	b2a4      	uxth	r4, r4
 8003002:	d1f4      	bne.n	8002fee <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand+0x12>
    for (i = 0; i < K; ++i) {
 8003004:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003008:	b2bf      	uxth	r7, r7
 800300a:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 800300e:	f505 5680 	add.w	r6, r5, #4096	@ 0x1000
 8003012:	d1e9      	bne.n	8002fe8 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand+0xc>
        }
    }
}
 8003014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08003018 <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length L **************/
/**************************************************************/

void PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_eta(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8003018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800301a:	4605      	mov	r5, r0
 800301c:	460e      	mov	r6, r1
 800301e:	4614      	mov	r4, r2
    unsigned int i;

    for (i = 0; i < L; ++i) {
 8003020:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
        PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta(&v->vec[i], seed, nonce++);
 8003024:	4622      	mov	r2, r4
 8003026:	1c63      	adds	r3, r4, #1
 8003028:	4628      	mov	r0, r5
 800302a:	4631      	mov	r1, r6
    for (i = 0; i < L; ++i) {
 800302c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta(&v->vec[i], seed, nonce++);
 8003030:	b29c      	uxth	r4, r3
 8003032:	f7ff fc39 	bl	80028a8 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta>
    for (i = 0; i < L; ++i) {
 8003036:	42bd      	cmp	r5, r7
 8003038:	d1f4      	bne.n	8003024 <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_eta+0xc>
    }
}
 800303a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800303c <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1>:

void PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce, int is_trigger,int poly_idx) {
 800303c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

    for(i = 0; i < L; ++i){
  	  if(i==poly_idx)
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), is_trigger);
  	  else
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), 0);
 8003040:	0092      	lsls	r2, r2, #2
void PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(polyvecl *v, const uint8_t seed[CRHBYTES], uint16_t nonce, int is_trigger,int poly_idx) {
 8003042:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003046:	460f      	mov	r7, r1
 8003048:	4699      	mov	r9, r3
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), 0);
 800304a:	b296      	uxth	r6, r2
 800304c:	4605      	mov	r5, r0
    for(i = 0; i < L; ++i){
 800304e:	2400      	movs	r4, #0
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), is_trigger);
 8003050:	1932      	adds	r2, r6, r4
  	  if(i==poly_idx)
 8003052:	45a0      	cmp	r8, r4
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), 0);
 8003054:	f04f 0300 	mov.w	r3, #0
 8003058:	4639      	mov	r1, r7
 800305a:	4628      	mov	r0, r5
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), is_trigger);
 800305c:	b292      	uxth	r2, r2
  	  if(i==poly_idx)
 800305e:	d008      	beq.n	8003072 <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1+0x36>
    for(i = 0; i < L; ++i){
 8003060:	3401      	adds	r4, #1
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), 0);
 8003062:	f7ff ff7b 	bl	8002f5c <PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1>
    for(i = 0; i < L; ++i){
 8003066:	2c04      	cmp	r4, #4
 8003068:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800306c:	d1f0      	bne.n	8003050 <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1+0x14>
    }
}
 800306e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  		PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1(&v->vec[i], seed, (uint16_t) (L * nonce + i), is_trigger);
 8003072:	464b      	mov	r3, r9
 8003074:	f7ff ff72 	bl	8002f5c <PQCLEAN_MLDSA44_CLEAN_poly_uniform_gamma1>
    for(i = 0; i < L; ++i){
 8003078:	f1b8 0f03 	cmp.w	r8, #3
 800307c:	f108 0401 	add.w	r4, r8, #1
 8003080:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003084:	d1e4      	bne.n	8003050 <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1+0x14>
}
 8003086:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800308a:	bf00      	nop

0800308c <PQCLEAN_MLDSA44_CLEAN_polyvecl_reduce>:

void PQCLEAN_MLDSA44_CLEAN_polyvecl_reduce(polyvecl *v) {
 800308c:	b510      	push	{r4, lr}
 800308e:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_reduce(&v->vec[i]);
 8003090:	f7ff fac4 	bl	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>
 8003094:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003098:	f7ff fac0 	bl	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>
 800309c:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 80030a0:	f7ff fabc 	bl	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>
 80030a4:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
    }
}
 80030a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_MLDSA44_CLEAN_poly_reduce(&v->vec[i]);
 80030ac:	f7ff bab6 	b.w	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>

080030b0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_add>:
*
* Arguments:   - polyvecl *w: pointer to output vector
*              - const polyvecl *u: pointer to first summand
*              - const polyvecl *v: pointer to second summand
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyvecl_add(polyvecl *w, const polyvecl *u, const polyvecl *v) {
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	4607      	mov	r7, r0
 80030b4:	460e      	mov	r6, r1
 80030b6:	4615      	mov	r5, r2
 80030b8:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 80030ba:	192a      	adds	r2, r5, r4
 80030bc:	1931      	adds	r1, r6, r4
 80030be:	1938      	adds	r0, r7, r4
    for (i = 0; i < L; ++i) {
 80030c0:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_add(&w->vec[i], &u->vec[i], &v->vec[i]);
 80030c4:	f7ff fac2 	bl	800264c <PQCLEAN_MLDSA44_CLEAN_poly_add>
    for (i = 0; i < L; ++i) {
 80030c8:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80030cc:	d1f5      	bne.n	80030ba <PQCLEAN_MLDSA44_CLEAN_polyvecl_add+0xa>
    }
}
 80030ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>:
* Description: Forward NTT of all polynomials in vector of length L. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyvecl *v: pointer to input/output vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(polyvecl *v) {
 80030d0:	b510      	push	{r4, lr}
 80030d2:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_ntt(&v->vec[i]);
 80030d4:	f7ff faec 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
 80030d8:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 80030dc:	f7ff fae8 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
 80030e0:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 80030e4:	f7ff fae4 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
 80030e8:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
    }
}
 80030ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_MLDSA44_CLEAN_poly_ntt(&v->vec[i]);
 80030f0:	f7ff bade 	b.w	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>

080030f4 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont>:

//    for (i = 0; i < L; ++i) {
//        PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
//    }

    for(i = 0; i < L; ++i){
 80030f4:	2901      	cmp	r1, #1
void PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont(polyvecl *v, int is_trigger,int poly_idx) {
 80030f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030f8:	4604      	mov	r4, r0
 80030fa:	4616      	mov	r6, r2
 80030fc:	d009      	beq.n	8003112 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0x1e>
    for(i = 0; i < L; ++i){
 80030fe:	2500      	movs	r5, #0
  	  if(i==poly_idx && is_trigger==1)
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
  	PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 8003100:	4620      	mov	r0, r4
    for(i = 0; i < L; ++i){
 8003102:	3501      	adds	r5, #1
  	PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 8003104:	f7ff fad6 	bl	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>
    for(i = 0; i < L; ++i){
 8003108:	2d04      	cmp	r5, #4
 800310a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800310e:	d1f7      	bne.n	8003100 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0xc>
      if(i==poly_idx && is_trigger==1)
      	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
    }

}
 8003110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003112:	4f11      	ldr	r7, [pc, #68]	@ (8003158 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0x64>)
    for(i = 0; i < L; ++i){
 8003114:	2500      	movs	r5, #0
  	  if(i==poly_idx && is_trigger==1)
 8003116:	42ae      	cmp	r6, r5
  	PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 8003118:	4620      	mov	r0, r4
  	  if(i==poly_idx && is_trigger==1)
 800311a:	d009      	beq.n	8003130 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0x3c>
    for(i = 0; i < L; ++i){
 800311c:	3501      	adds	r5, #1
  	PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 800311e:	f7ff fac9 	bl	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>
    for(i = 0; i < L; ++i){
 8003122:	2d04      	cmp	r5, #4
 8003124:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003128:	d0f2      	beq.n	8003110 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0x1c>
  	  if(i==poly_idx && is_trigger==1)
 800312a:	42ae      	cmp	r6, r5
  	PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 800312c:	4620      	mov	r0, r4
  	  if(i==poly_idx && is_trigger==1)
 800312e:	d1f5      	bne.n	800311c <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0x28>
  		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_RESET);
 8003130:	2200      	movs	r2, #0
 8003132:	2104      	movs	r1, #4
 8003134:	4638      	mov	r0, r7
 8003136:	f001 f9ff 	bl	8004538 <HAL_GPIO_WritePin>
  	PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 800313a:	4620      	mov	r0, r4
 800313c:	f7ff faba 	bl	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>
      	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_2, GPIO_PIN_SET);
 8003140:	2201      	movs	r2, #1
 8003142:	2104      	movs	r1, #4
 8003144:	4638      	mov	r0, r7
 8003146:	f001 f9f7 	bl	8004538 <HAL_GPIO_WritePin>
    for(i = 0; i < L; ++i){
 800314a:	2e03      	cmp	r6, #3
 800314c:	f106 0501 	add.w	r5, r6, #1
 8003150:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003154:	d1df      	bne.n	8003116 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont+0x22>
}
 8003156:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003158:	40020800 	.word	0x40020800

0800315c <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery>:

void PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery(polyvecl *r, const poly *a, const polyvecl *v) {
 800315c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800315e:	4607      	mov	r7, r0
 8003160:	460e      	mov	r6, r1
 8003162:	4615      	mov	r5, r2
 8003164:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8003166:	192a      	adds	r2, r5, r4
 8003168:	1938      	adds	r0, r7, r4
 800316a:	4631      	mov	r1, r6
    for (i = 0; i < L; ++i) {
 800316c:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery(&r->vec[i], a, &v->vec[i]);
 8003170:	f7ff faa2 	bl	80026b8 <PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery>
    for (i = 0; i < L; ++i) {
 8003174:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003178:	d1f5      	bne.n	8003166 <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery+0xa>
    }
}
 800317a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800317c <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_acc_montgomery>:
*              - const polyvecl *u: pointer to first input vector
*              - const polyvecl *v: pointer to second input vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_acc_montgomery(poly *w,
        const polyvecl *u,
        const polyvecl *v) {
 800317c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800317e:	f2ad 4d04 	subw	sp, sp, #1028	@ 0x404
 8003182:	4605      	mov	r5, r0
 8003184:	460f      	mov	r7, r1
 8003186:	4616      	mov	r6, r2
    unsigned int i;
    poly t;

    PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery(w, &u->vec[0], &v->vec[0]);
 8003188:	f7ff fa96 	bl	80026b8 <PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery>
 800318c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
    for (i = 1; i < L; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery(&t, &u->vec[i], &v->vec[i]);
 8003190:	1932      	adds	r2, r6, r4
 8003192:	1939      	adds	r1, r7, r4
 8003194:	4668      	mov	r0, sp
 8003196:	f7ff fa8f 	bl	80026b8 <PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery>
    for (i = 1; i < L; ++i) {
 800319a:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_add(w, w, &t);
 800319e:	466a      	mov	r2, sp
 80031a0:	4629      	mov	r1, r5
 80031a2:	4628      	mov	r0, r5
 80031a4:	f7ff fa52 	bl	800264c <PQCLEAN_MLDSA44_CLEAN_poly_add>
    for (i = 1; i < L; ++i) {
 80031a8:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80031ac:	d1f0      	bne.n	8003190 <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_acc_montgomery+0x14>
    }
}
 80031ae:	f20d 4d04 	addw	sp, sp, #1028	@ 0x404
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b4 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery>:
void PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery(polyveck *t, const polyvecl mat[K], const polyvecl *v) {
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	4604      	mov	r4, r0
 80031b8:	4616      	mov	r6, r2
 80031ba:	460d      	mov	r5, r1
 80031bc:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
        PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80031c0:	4629      	mov	r1, r5
 80031c2:	4620      	mov	r0, r4
 80031c4:	4632      	mov	r2, r6
    for (i = 0; i < K; ++i) {
 80031c6:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_acc_montgomery(&t->vec[i], &mat[i], v);
 80031ca:	f7ff ffd7 	bl	800317c <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_acc_montgomery>
    for (i = 0; i < K; ++i) {
 80031ce:	42bc      	cmp	r4, r7
 80031d0:	f505 5580 	add.w	r5, r5, #4096	@ 0x1000
 80031d4:	d1f4      	bne.n	80031c0 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery+0xc>
}
 80031d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080031d8 <PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials is strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm(const polyvecl *v, int32_t bound)  {
 80031d8:	b570      	push	{r4, r5, r6, lr}
 80031da:	4604      	mov	r4, r0
 80031dc:	460d      	mov	r5, r1
 80031de:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
    unsigned int i;

    for (i = 0; i < L; ++i) {
        if (PQCLEAN_MLDSA44_CLEAN_poly_chknorm(&v->vec[i], bound)) {
 80031e2:	4620      	mov	r0, r4
 80031e4:	4629      	mov	r1, r5
 80031e6:	f7ff fac7 	bl	8002778 <PQCLEAN_MLDSA44_CLEAN_poly_chknorm>
    for (i = 0; i < L; ++i) {
 80031ea:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        if (PQCLEAN_MLDSA44_CLEAN_poly_chknorm(&v->vec[i], bound)) {
 80031ee:	b910      	cbnz	r0, 80031f6 <PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm+0x1e>
    for (i = 0; i < L; ++i) {
 80031f0:	42b4      	cmp	r4, r6
 80031f2:	d1f6      	bne.n	80031e2 <PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm+0xa>
            return 1;
        }
    }

    return 0;
}
 80031f4:	bd70      	pop	{r4, r5, r6, pc}
            return 1;
 80031f6:	2001      	movs	r0, #1
}
 80031f8:	bd70      	pop	{r4, r5, r6, pc}
 80031fa:	bf00      	nop

080031fc <PQCLEAN_MLDSA44_CLEAN_polyveck_uniform_eta>:

/**************************************************************/
/************ Vectors of polynomials of length K **************/
/**************************************************************/

void PQCLEAN_MLDSA44_CLEAN_polyveck_uniform_eta(polyveck *v, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 80031fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031fe:	4605      	mov	r5, r0
 8003200:	460e      	mov	r6, r1
 8003202:	4614      	mov	r4, r2
 8003204:	f500 5780 	add.w	r7, r0, #4096	@ 0x1000
 8003208:	4622      	mov	r2, r4
 800320a:	1c63      	adds	r3, r4, #1
 800320c:	4628      	mov	r0, r5
 800320e:	4631      	mov	r1, r6
 8003210:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8003214:	b29c      	uxth	r4, r3
 8003216:	f7ff fb47 	bl	80028a8 <PQCLEAN_MLDSA44_CLEAN_poly_uniform_eta>
 800321a:	42bd      	cmp	r5, r7
 800321c:	d1f4      	bne.n	8003208 <PQCLEAN_MLDSA44_CLEAN_polyveck_uniform_eta+0xc>
 800321e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>:
* Description: Reduce coefficients of polynomials in vector of length K
*              to representatives in [-6283008,6283008].
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(polyveck *v) {
 8003220:	b510      	push	{r4, lr}
 8003222:	4604      	mov	r4, r0
 8003224:	f7ff f9fa 	bl	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>
 8003228:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 800322c:	f7ff f9f6 	bl	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>
 8003230:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003234:	f7ff f9f2 	bl	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>
 8003238:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
 800323c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003240:	f7ff b9ec 	b.w	800261c <PQCLEAN_MLDSA44_CLEAN_poly_reduce>

08003244 <PQCLEAN_MLDSA44_CLEAN_polyveck_caddq>:
* Description: For all coefficients of polynomials in vector of length K
*              add Q if coefficient is negative.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_caddq(polyveck *v) {
 8003244:	b510      	push	{r4, lr}
 8003246:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_caddq(&v->vec[i]);
 8003248:	f7ff f9f4 	bl	8002634 <PQCLEAN_MLDSA44_CLEAN_poly_caddq>
 800324c:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 8003250:	f7ff f9f0 	bl	8002634 <PQCLEAN_MLDSA44_CLEAN_poly_caddq>
 8003254:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003258:	f7ff f9ec 	bl	8002634 <PQCLEAN_MLDSA44_CLEAN_poly_caddq>
 800325c:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
    }
}
 8003260:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_MLDSA44_CLEAN_poly_caddq(&v->vec[i]);
 8003264:	f7ff b9e6 	b.w	8002634 <PQCLEAN_MLDSA44_CLEAN_poly_caddq>

08003268 <PQCLEAN_MLDSA44_CLEAN_polyveck_add>:
*
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first summand
*              - const polyveck *v: pointer to second summand
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_add(polyveck *w, const polyveck *u, const polyveck *v) {
 8003268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800326a:	4607      	mov	r7, r0
 800326c:	460e      	mov	r6, r1
 800326e:	4615      	mov	r5, r2
 8003270:	2400      	movs	r4, #0
 8003272:	192a      	adds	r2, r5, r4
 8003274:	1931      	adds	r1, r6, r4
 8003276:	1938      	adds	r0, r7, r4
 8003278:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800327c:	f7ff f9e6 	bl	800264c <PQCLEAN_MLDSA44_CLEAN_poly_add>
 8003280:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003284:	d1f5      	bne.n	8003272 <PQCLEAN_MLDSA44_CLEAN_polyveck_add+0xa>
 8003286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003288 <PQCLEAN_MLDSA44_CLEAN_polyveck_sub>:
* Arguments:   - polyveck *w: pointer to output vector
*              - const polyveck *u: pointer to first input vector
*              - const polyveck *v: pointer to second input vector to be
*                                   subtracted from first input vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_sub(polyveck *w, const polyveck *u, const polyveck *v) {
 8003288:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800328a:	4607      	mov	r7, r0
 800328c:	460e      	mov	r6, r1
 800328e:	4615      	mov	r5, r2
 8003290:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 8003292:	192a      	adds	r2, r5, r4
 8003294:	1931      	adds	r1, r6, r4
 8003296:	1938      	adds	r0, r7, r4
    for (i = 0; i < K; ++i) {
 8003298:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_sub(&w->vec[i], &u->vec[i], &v->vec[i]);
 800329c:	f7ff f9ea 	bl	8002674 <PQCLEAN_MLDSA44_CLEAN_poly_sub>
    for (i = 0; i < K; ++i) {
 80032a0:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80032a4:	d1f5      	bne.n	8003292 <PQCLEAN_MLDSA44_CLEAN_polyveck_sub+0xa>
    }
}
 80032a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080032a8 <PQCLEAN_MLDSA44_CLEAN_polyveck_shiftl>:
* Description: Multiply vector of polynomials of Length K by 2^D without modular
*              reduction. Assumes input coefficients to be less than 2^{31-D}.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_shiftl(polyveck *v) {
 80032a8:	b510      	push	{r4, lr}
 80032aa:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_shiftl(&v->vec[i]);
 80032ac:	f7ff f9f6 	bl	800269c <PQCLEAN_MLDSA44_CLEAN_poly_shiftl>
 80032b0:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 80032b4:	f7ff f9f2 	bl	800269c <PQCLEAN_MLDSA44_CLEAN_poly_shiftl>
 80032b8:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 80032bc:	f7ff f9ee 	bl	800269c <PQCLEAN_MLDSA44_CLEAN_poly_shiftl>
 80032c0:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
    }
}
 80032c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_MLDSA44_CLEAN_poly_shiftl(&v->vec[i]);
 80032c8:	f7ff b9e8 	b.w	800269c <PQCLEAN_MLDSA44_CLEAN_poly_shiftl>

080032cc <PQCLEAN_MLDSA44_CLEAN_polyveck_ntt>:
* Description: Forward NTT of all polynomials in vector of length K. Output
*              coefficients can be up to 16*Q larger than input coefficients.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_ntt(polyveck *v) {
 80032cc:	b510      	push	{r4, lr}
 80032ce:	4604      	mov	r4, r0
 80032d0:	f7ff f9ee 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
 80032d4:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 80032d8:	f7ff f9ea 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
 80032dc:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 80032e0:	f7ff f9e6 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
 80032e4:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
 80032e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80032ec:	f7ff b9e0 	b.w	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>

080032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>:
*              in vector of length K. Input coefficients need to be less
*              than 2*Q.
*
* Arguments:   - polyveck *v: pointer to input/output vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(polyveck *v) {
 80032f0:	b510      	push	{r4, lr}
 80032f2:	4604      	mov	r4, r0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 80032f4:	f7ff f9de 	bl	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>
 80032f8:	f504 6080 	add.w	r0, r4, #1024	@ 0x400
 80032fc:	f7ff f9da 	bl	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>
 8003300:	f504 6000 	add.w	r0, r4, #2048	@ 0x800
 8003304:	f7ff f9d6 	bl	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>
 8003308:	f504 6040 	add.w	r0, r4, #3072	@ 0xc00
    }
}
 800330c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont(&v->vec[i]);
 8003310:	f7ff b9d0 	b.w	80026b4 <PQCLEAN_MLDSA44_CLEAN_poly_invntt_tomont>

08003314 <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery>:

void PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery(polyveck *r, const poly *a, const polyveck *v) {
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	4607      	mov	r7, r0
 8003318:	460e      	mov	r6, r1
 800331a:	4615      	mov	r5, r2
 800331c:	2400      	movs	r4, #0
 800331e:	192a      	adds	r2, r5, r4
 8003320:	1938      	adds	r0, r7, r4
 8003322:	4631      	mov	r1, r6
 8003324:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 8003328:	f7ff f9c6 	bl	80026b8 <PQCLEAN_MLDSA44_CLEAN_poly_pointwise_montgomery>
 800332c:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003330:	d1f5      	bne.n	800331e <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery+0xa>
 8003332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003334 <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm>:
*              - int32_t B: norm bound
*
* Returns 0 if norm of all polynomials are strictly smaller than B <= (Q-1)/8
* and 1 otherwise.
**************************************************/
int PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm(const polyveck *v, int32_t bound) {
 8003334:	b570      	push	{r4, r5, r6, lr}
 8003336:	4604      	mov	r4, r0
 8003338:	460d      	mov	r5, r1
 800333a:	f500 5680 	add.w	r6, r0, #4096	@ 0x1000
 800333e:	4620      	mov	r0, r4
 8003340:	4629      	mov	r1, r5
 8003342:	f7ff fa19 	bl	8002778 <PQCLEAN_MLDSA44_CLEAN_poly_chknorm>
 8003346:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 800334a:	b910      	cbnz	r0, 8003352 <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm+0x1e>
 800334c:	42b4      	cmp	r4, r6
 800334e:	d1f6      	bne.n	800333e <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm+0xa>
 8003350:	bd70      	pop	{r4, r5, r6, pc}
 8003352:	2001      	movs	r0, #1
 8003354:	bd70      	pop	{r4, r5, r6, pc}
 8003356:	bf00      	nop

08003358 <PQCLEAN_MLDSA44_CLEAN_polyveck_power2round>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_power2round(polyveck *v1, polyveck *v0, const polyveck *v) {
 8003358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800335a:	4607      	mov	r7, r0
 800335c:	460e      	mov	r6, r1
 800335e:	4615      	mov	r5, r2
 8003360:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003362:	192a      	adds	r2, r5, r4
 8003364:	1931      	adds	r1, r6, r4
 8003366:	1938      	adds	r0, r7, r4
    for (i = 0; i < K; ++i) {
 8003368:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_power2round(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800336c:	f7ff f9b8 	bl	80026e0 <PQCLEAN_MLDSA44_CLEAN_poly_power2round>
    for (i = 0; i < K; ++i) {
 8003370:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003374:	d1f5      	bne.n	8003362 <PQCLEAN_MLDSA44_CLEAN_polyveck_power2round+0xa>
    }
}
 8003376:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003378 <PQCLEAN_MLDSA44_CLEAN_polyveck_decompose>:
*                              coefficients a1
*              - polyveck *v0: pointer to output vector of polynomials with
*                              coefficients a0
*              - const polyveck *v: pointer to input vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_decompose(polyveck *v1, polyveck *v0, const polyveck *v) {
 8003378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800337a:	4607      	mov	r7, r0
 800337c:	460e      	mov	r6, r1
 800337e:	4615      	mov	r5, r2
 8003380:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 8003382:	192a      	adds	r2, r5, r4
 8003384:	1931      	adds	r1, r6, r4
 8003386:	1938      	adds	r0, r7, r4
    for (i = 0; i < K; ++i) {
 8003388:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_decompose(&v1->vec[i], &v0->vec[i], &v->vec[i]);
 800338c:	f7ff f9ba 	bl	8002704 <PQCLEAN_MLDSA44_CLEAN_poly_decompose>
    for (i = 0; i < K; ++i) {
 8003390:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 8003394:	d1f5      	bne.n	8003382 <PQCLEAN_MLDSA44_CLEAN_polyveck_decompose+0xa>
    }
}
 8003396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003398 <PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint>:
*
* Returns number of 1 bits.
**************************************************/
unsigned int PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint(polyveck *h,
        const polyveck *v0,
        const polyveck *v1) {
 8003398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800339c:	2400      	movs	r4, #0
 800339e:	4680      	mov	r8, r0
 80033a0:	460f      	mov	r7, r1
 80033a2:	4616      	mov	r6, r2
    unsigned int i, s = 0;
 80033a4:	4625      	mov	r5, r4

    for (i = 0; i < K; ++i) {
        s += PQCLEAN_MLDSA44_CLEAN_poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 80033a6:	1932      	adds	r2, r6, r4
 80033a8:	1939      	adds	r1, r7, r4
 80033aa:	eb08 0004 	add.w	r0, r8, r4
 80033ae:	f7ff f9bb 	bl	8002728 <PQCLEAN_MLDSA44_CLEAN_poly_make_hint>
    for (i = 0; i < K; ++i) {
 80033b2:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
 80033b6:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
        s += PQCLEAN_MLDSA44_CLEAN_poly_make_hint(&h->vec[i], &v0->vec[i], &v1->vec[i]);
 80033ba:	4405      	add	r5, r0
    for (i = 0; i < K; ++i) {
 80033bc:	d1f3      	bne.n	80033a6 <PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint+0xe>
    }

    return s;
}
 80033be:	4628      	mov	r0, r5
 80033c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080033c4 <PQCLEAN_MLDSA44_CLEAN_polyveck_use_hint>:
* Arguments:   - polyveck *w: pointer to output vector of polynomials with
*                             corrected high bits
*              - const polyveck *u: pointer to input vector
*              - const polyveck *h: pointer to input hint vector
**************************************************/
void PQCLEAN_MLDSA44_CLEAN_polyveck_use_hint(polyveck *w, const polyveck *v, const polyveck *h) {
 80033c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033c6:	4607      	mov	r7, r0
 80033c8:	460e      	mov	r6, r1
 80033ca:	4615      	mov	r5, r2
 80033cc:	2400      	movs	r4, #0
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_poly_use_hint(&w->vec[i], &v->vec[i], &h->vec[i]);
 80033ce:	192a      	adds	r2, r5, r4
 80033d0:	1931      	adds	r1, r6, r4
 80033d2:	1938      	adds	r0, r7, r4
    for (i = 0; i < K; ++i) {
 80033d4:	f504 6480 	add.w	r4, r4, #1024	@ 0x400
        PQCLEAN_MLDSA44_CLEAN_poly_use_hint(&w->vec[i], &v->vec[i], &h->vec[i]);
 80033d8:	f7ff f9bc 	bl	8002754 <PQCLEAN_MLDSA44_CLEAN_poly_use_hint>
    for (i = 0; i < K; ++i) {
 80033dc:	f5b4 5f80 	cmp.w	r4, #4096	@ 0x1000
 80033e0:	d1f5      	bne.n	80033ce <PQCLEAN_MLDSA44_CLEAN_polyveck_use_hint+0xa>
    }
}
 80033e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080033e4 <PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1>:

void PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1(uint8_t r[K * POLYW1_PACKEDBYTES], const polyveck *w1) {
 80033e4:	b570      	push	{r4, r5, r6, lr}
 80033e6:	4604      	mov	r4, r0
 80033e8:	460d      	mov	r5, r1
 80033ea:	f500 7640 	add.w	r6, r0, #768	@ 0x300
    unsigned int i;

    for (i = 0; i < K; ++i) {
        PQCLEAN_MLDSA44_CLEAN_polyw1_pack(&r[i * POLYW1_PACKEDBYTES], &w1->vec[i]);
 80033ee:	4629      	mov	r1, r5
 80033f0:	4620      	mov	r0, r4
    for (i = 0; i < K; ++i) {
 80033f2:	34c0      	adds	r4, #192	@ 0xc0
        PQCLEAN_MLDSA44_CLEAN_polyw1_pack(&r[i * POLYW1_PACKEDBYTES], &w1->vec[i]);
 80033f4:	f7ff fdcc 	bl	8002f90 <PQCLEAN_MLDSA44_CLEAN_polyw1_pack>
    for (i = 0; i < K; ++i) {
 80033f8:	42b4      	cmp	r4, r6
 80033fa:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80033fe:	d1f6      	bne.n	80033ee <PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1+0xa>
    }
}
 8003400:	bd70      	pop	{r4, r5, r6, pc}
 8003402:	bf00      	nop

08003404 <PQCLEAN_MLDSA44_CLEAN_montgomery_reduce>:
* Returns r.
**************************************************/
int32_t PQCLEAN_MLDSA44_CLEAN_montgomery_reduce(int64_t a) {
    int32_t t;

    t = (int32_t)((uint64_t)a * (uint64_t)QINV);
 8003404:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
int32_t PQCLEAN_MLDSA44_CLEAN_montgomery_reduce(int64_t a) {
 8003408:	4603      	mov	r3, r0
 800340a:	b410      	push	{r4}
    t = (int32_t)((uint64_t)a * (uint64_t)QINV);
 800340c:	eb00 2282 	add.w	r2, r0, r2, lsl #10
    t = (a - (int64_t)t * Q) >> 32;
 8003410:	4c04      	ldr	r4, [pc, #16]	@ (8003424 <PQCLEAN_MLDSA44_CLEAN_montgomery_reduce+0x20>)
int32_t PQCLEAN_MLDSA44_CLEAN_montgomery_reduce(int64_t a) {
 8003412:	4608      	mov	r0, r1
    t = (int32_t)((uint64_t)a * (uint64_t)QINV);
 8003414:	eb03 3242 	add.w	r2, r3, r2, lsl #13
    return t;
}
 8003418:	fbc2 3004 	smlal	r3, r0, r2, r4
 800341c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	ff801fff 	.word	0xff801fff

08003428 <PQCLEAN_MLDSA44_CLEAN_reduce32>:
* Returns r.
**************************************************/
int32_t PQCLEAN_MLDSA44_CLEAN_reduce32(int32_t a) {
    int32_t t;

    t = (a + (1 << 22)) >> 23;
 8003428:	f500 0380 	add.w	r3, r0, #4194304	@ 0x400000
 800342c:	15db      	asrs	r3, r3, #23
    t = a - t * Q;
 800342e:	ebc3 2243 	rsb	r2, r3, r3, lsl #9
 8003432:	eb03 2282 	add.w	r2, r3, r2, lsl #10
 8003436:	ebc3 3342 	rsb	r3, r3, r2, lsl #13
    return t;
}
 800343a:	4418      	add	r0, r3
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop

08003440 <PQCLEAN_MLDSA44_CLEAN_caddq>:
* Arguments:   - int32_t: finite field element a
*
* Returns r.
**************************************************/
int32_t PQCLEAN_MLDSA44_CLEAN_caddq(int32_t a) {
    a += (a >> 31) & Q;
 8003440:	4b02      	ldr	r3, [pc, #8]	@ (800344c <PQCLEAN_MLDSA44_CLEAN_caddq+0xc>)
 8003442:	ea03 73e0 	and.w	r3, r3, r0, asr #31
    return a;
}
 8003446:	4418      	add	r0, r3
 8003448:	4770      	bx	lr
 800344a:	bf00      	nop
 800344c:	007fe001 	.word	0x007fe001

08003450 <randombytes_init>:

void
randombytes_init(unsigned int entropy_input)
{
    //memcpy(&lfsr_state, entropy_input, 4);
    lfsr_state = entropy_input;
 8003450:	4b01      	ldr	r3, [pc, #4]	@ (8003458 <randombytes_init+0x8>)
 8003452:	6018      	str	r0, [r3, #0]
}
 8003454:	4770      	bx	lr
 8003456:	bf00      	nop
 8003458:	200024e4 	.word	0x200024e4

0800345c <randombytes>:

void
randombytes(unsigned char* x, unsigned int xlen)
{

    for (int i = 0; i < xlen; ++i) {
 800345c:	b1b9      	cbz	r1, 800348e <randombytes+0x32>
{
 800345e:	b410      	push	{r4}
 8003460:	4c0b      	ldr	r4, [pc, #44]	@ (8003490 <randombytes+0x34>)
 8003462:	4401      	add	r1, r0
 8003464:	6822      	ldr	r2, [r4, #0]
 8003466:	3801      	subs	r0, #1
 8003468:	3901      	subs	r1, #1
    g22 = lfsr_state >> 21;
 800346a:	0d53      	lsrs	r3, r2, #21
    lfsr_state ^= ((g1 ^ g2 ^ g22 ^ g32) & 0x1);
 800346c:	ea83 0352 	eor.w	r3, r3, r2, lsr #1
 8003470:	4053      	eors	r3, r2
 8003472:	ea83 73d2 	eor.w	r3, r3, r2, lsr #31
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	ea43 0242 	orr.w	r2, r3, r2, lsl #1
        lfsr_update_state();
        x[i] = (unsigned char)lfsr_state;
 800347e:	f800 2f01 	strb.w	r2, [r0, #1]!
    for (int i = 0; i < xlen; ++i) {
 8003482:	4281      	cmp	r1, r0
 8003484:	d1f1      	bne.n	800346a <randombytes+0xe>
 8003486:	6022      	str	r2, [r4, #0]
    }
}
 8003488:	f85d 4b04 	ldr.w	r4, [sp], #4
 800348c:	4770      	bx	lr
 800348e:	4770      	bx	lr
 8003490:	200024e4 	.word	0x200024e4

08003494 <PQCLEAN_MLDSA44_CLEAN_power2round>:
* Returns a1.
**************************************************/
int32_t PQCLEAN_MLDSA44_CLEAN_power2round(int32_t *a0, int32_t a)  {
    int32_t a1;

    a1 = (a + (1 << (D - 1)) - 1) >> D;
 8003494:	f601 73ff 	addw	r3, r1, #4095	@ 0xfff
    *a0 = a - (a1 << D);
 8003498:	f423 52ff 	bic.w	r2, r3, #8160	@ 0x1fe0
 800349c:	f022 021f 	bic.w	r2, r2, #31
 80034a0:	1a89      	subs	r1, r1, r2
 80034a2:	6001      	str	r1, [r0, #0]
    return a1;
}
 80034a4:	1358      	asrs	r0, r3, #13
 80034a6:	4770      	bx	lr

080034a8 <PQCLEAN_MLDSA44_CLEAN_decompose>:
* Returns a1.
**************************************************/
int32_t PQCLEAN_MLDSA44_CLEAN_decompose(int32_t *a0, int32_t a) {
    int32_t a1;

    a1  = (a + 127) >> 7;
 80034a8:	f101 037f 	add.w	r3, r1, #127	@ 0x7f
    a1  = (a1 * 11275 + (1 << 23)) >> 24;
 80034ac:	f642 420b 	movw	r2, #11275	@ 0x2c0b
    a1  = (a + 127) >> 7;
 80034b0:	11db      	asrs	r3, r3, #7
    a1  = (a1 * 11275 + (1 << 23)) >> 24;
 80034b2:	fb02 f303 	mul.w	r3, r2, r3
 80034b6:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 80034ba:	161b      	asrs	r3, r3, #24
    a1 ^= ((43 - a1) >> 31) & a1;
 80034bc:	f1c3 022b 	rsb	r2, r3, #43	@ 0x2b
int32_t PQCLEAN_MLDSA44_CLEAN_decompose(int32_t *a0, int32_t a) {
 80034c0:	b410      	push	{r4}
    a1 ^= ((43 - a1) >> 31) & a1;
 80034c2:	17d2      	asrs	r2, r2, #31

    *a0  = a - a1 * 2 * GAMMA2;
 80034c4:	4c08      	ldr	r4, [pc, #32]	@ (80034e8 <PQCLEAN_MLDSA44_CLEAN_decompose+0x40>)
    a1 ^= ((43 - a1) >> 31) & a1;
 80034c6:	ea23 0302 	bic.w	r3, r3, r2
    *a0  = a - a1 * 2 * GAMMA2;
 80034ca:	fb04 1103 	mla	r1, r4, r3, r1
    *a0 -= (((Q - 1) / 2 - *a0) >> 31) & Q;
 80034ce:	f5c1 1c7f 	rsb	ip, r1, #4177920	@ 0x3fc000
 80034d2:	4a06      	ldr	r2, [pc, #24]	@ (80034ec <PQCLEAN_MLDSA44_CLEAN_decompose+0x44>)
    return a1;
}
 80034d4:	f85d 4b04 	ldr.w	r4, [sp], #4
    *a0 -= (((Q - 1) / 2 - *a0) >> 31) & Q;
 80034d8:	f50c 5c40 	add.w	ip, ip, #12288	@ 0x3000
 80034dc:	ea02 72ec 	and.w	r2, r2, ip, asr #31
 80034e0:	1a89      	subs	r1, r1, r2
 80034e2:	6001      	str	r1, [r0, #0]
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	4770      	bx	lr
 80034e8:	fffd1800 	.word	0xfffd1800
 80034ec:	007fe001 	.word	0x007fe001

080034f0 <PQCLEAN_MLDSA44_CLEAN_make_hint>:
*              - int32_t a1: high bits of input element
*
* Returns 1 if overflow.
**************************************************/
unsigned int PQCLEAN_MLDSA44_CLEAN_make_hint(int32_t a0, int32_t a1) {
    if (a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0)) {
 80034f0:	f500 33ba 	add.w	r3, r0, #95232	@ 0x17400
 80034f4:	f5b3 3f3a 	cmp.w	r3, #190464	@ 0x2e800
 80034f8:	d808      	bhi.n	800350c <PQCLEAN_MLDSA44_CLEAN_make_hint+0x1c>
 80034fa:	f510 3fba 	cmn.w	r0, #95232	@ 0x17400
 80034fe:	d001      	beq.n	8003504 <PQCLEAN_MLDSA44_CLEAN_make_hint+0x14>
        return 1;
    }

    return 0;
 8003500:	2000      	movs	r0, #0
}
 8003502:	4770      	bx	lr
    if (a0 > GAMMA2 || a0 < -GAMMA2 || (a0 == -GAMMA2 && a1 != 0)) {
 8003504:	1e08      	subs	r0, r1, #0
 8003506:	bf18      	it	ne
 8003508:	2001      	movne	r0, #1
 800350a:	4770      	bx	lr
        return 1;
 800350c:	2001      	movs	r0, #1
 800350e:	4770      	bx	lr

08003510 <PQCLEAN_MLDSA44_CLEAN_use_hint>:
    a1  = (a + 127) >> 7;
 8003510:	f100 037f 	add.w	r3, r0, #127	@ 0x7f
* Arguments:   - int32_t a: input element
*              - unsigned int hint: hint bit
*
* Returns corrected high bits.
**************************************************/
int32_t PQCLEAN_MLDSA44_CLEAN_use_hint(int32_t a, unsigned int hint) {
 8003514:	4602      	mov	r2, r0
    a1  = (a + 127) >> 7;
 8003516:	11db      	asrs	r3, r3, #7
    a1  = (a1 * 11275 + (1 << 23)) >> 24;
 8003518:	f642 400b 	movw	r0, #11275	@ 0x2c0b
 800351c:	fb00 f303 	mul.w	r3, r0, r3
 8003520:	f503 0300 	add.w	r3, r3, #8388608	@ 0x800000
 8003524:	161b      	asrs	r3, r3, #24
    a1 ^= ((43 - a1) >> 31) & a1;
 8003526:	f1c3 002b 	rsb	r0, r3, #43	@ 0x2b
 800352a:	17c0      	asrs	r0, r0, #31
 800352c:	ea23 0000 	bic.w	r0, r3, r0
    int32_t a0, a1;

    a1 = PQCLEAN_MLDSA44_CLEAN_decompose(&a0, a);
    if (hint == 0) {
 8003530:	b181      	cbz	r1, 8003554 <PQCLEAN_MLDSA44_CLEAN_use_hint+0x44>
    *a0  = a - a1 * 2 * GAMMA2;
 8003532:	490c      	ldr	r1, [pc, #48]	@ (8003564 <PQCLEAN_MLDSA44_CLEAN_use_hint+0x54>)
    *a0 -= (((Q - 1) / 2 - *a0) >> 31) & Q;
 8003534:	4b0c      	ldr	r3, [pc, #48]	@ (8003568 <PQCLEAN_MLDSA44_CLEAN_use_hint+0x58>)
    *a0  = a - a1 * 2 * GAMMA2;
 8003536:	fb01 2200 	mla	r2, r1, r0, r2
    *a0 -= (((Q - 1) / 2 - *a0) >> 31) & Q;
 800353a:	f5c2 117f 	rsb	r1, r2, #4177920	@ 0x3fc000
 800353e:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
 8003542:	ea03 73e1 	and.w	r3, r3, r1, asr #31
        return a1;
    }

    if (a0 > 0) {
 8003546:	429a      	cmp	r2, r3
 8003548:	dd05      	ble.n	8003556 <PQCLEAN_MLDSA44_CLEAN_use_hint+0x46>
        if (a1 == 43) {
 800354a:	282b      	cmp	r0, #43	@ 0x2b
 800354c:	d007      	beq.n	800355e <PQCLEAN_MLDSA44_CLEAN_use_hint+0x4e>
            return 0;
        }
        return a1 + 1;
 800354e:	3001      	adds	r0, #1
 8003550:	4770      	bx	lr
    }
    if (a1 == 0) {
        return 43;
 8003552:	202b      	movs	r0, #43	@ 0x2b
    }
    return a1 - 1;
}
 8003554:	4770      	bx	lr
    if (a1 == 0) {
 8003556:	2800      	cmp	r0, #0
 8003558:	d0fb      	beq.n	8003552 <PQCLEAN_MLDSA44_CLEAN_use_hint+0x42>
    return a1 - 1;
 800355a:	3801      	subs	r0, #1
 800355c:	4770      	bx	lr
            return 0;
 800355e:	2000      	movs	r0, #0
 8003560:	4770      	bx	lr
 8003562:	bf00      	nop
 8003564:	fffd1800 	.word	0xfffd1800
 8003568:	007fe001 	.word	0x007fe001

0800356c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair>:
*              - uint8_t *sk: pointer to output private key (allocated
*                             array of PQCLEAN_MLDSA44_CLEAN_CRYPTO_SECRETKEYBYTES bytes)
*
* Returns 0 (success)
**************************************************/
int PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 800356c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003570:	f5ad 4d10 	sub.w	sp, sp, #36864	@ 0x9000
 8003574:	b0b4      	sub	sp, #208	@ 0xd0
    polyvecl mat[K];
    polyvecl s1, s1hat;
    polyveck s2, t1, t0;

    /* Get randomness for rho, rhoprime and key */
    randombytes(seedbuf, SEEDBYTES);
 8003576:	ac34      	add	r4, sp, #208	@ 0xd0
    seedbuf[SEEDBYTES + 0] = K;
 8003578:	4626      	mov	r6, r4
int PQCLEAN_MLDSA44_CLEAN_crypto_sign_keypair(uint8_t *pk, uint8_t *sk) {
 800357a:	4605      	mov	r5, r0
 800357c:	460f      	mov	r7, r1
    randombytes(seedbuf, SEEDBYTES);
 800357e:	a814      	add	r0, sp, #80	@ 0x50
 8003580:	2120      	movs	r1, #32
 8003582:	f7ff ff6b 	bl	800345c <randombytes>
    seedbuf[SEEDBYTES + 0] = K;
 8003586:	f240 4204 	movw	r2, #1028	@ 0x404
 800358a:	f826 2d60 	strh.w	r2, [r6, #-96]!
    seedbuf[SEEDBYTES + 1] = L;
    shake256(seedbuf, 2 * SEEDBYTES + CRHBYTES, seedbuf, SEEDBYTES + 2);
 800358e:	aa14      	add	r2, sp, #80	@ 0x50
 8003590:	2322      	movs	r3, #34	@ 0x22
 8003592:	4610      	mov	r0, r2
 8003594:	2180      	movs	r1, #128	@ 0x80
 8003596:	f7fd f92d 	bl	80007f4 <shake256>
    rho = seedbuf;
    rhoprime = rho + SEEDBYTES;
    key = rhoprime + CRHBYTES;

    /* Expand matrix */
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand(mat, rho);
 800359a:	f50d 40a1 	add.w	r0, sp, #20608	@ 0x5080
 800359e:	a914      	add	r1, sp, #80	@ 0x50
 80035a0:	3050      	adds	r0, #80	@ 0x50
 80035a2:	f7ff fd1b 	bl	8002fdc <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand>

    /* Sample short vectors s1 and s2 */
    PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_eta(&s1, rhoprime, 0);
 80035a6:	4631      	mov	r1, r6
 80035a8:	4620      	mov	r0, r4
 80035aa:	2200      	movs	r2, #0
 80035ac:	f7ff fd34 	bl	8003018 <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_eta>
    PQCLEAN_MLDSA44_CLEAN_polyveck_uniform_eta(&s2, rhoprime, L);
 80035b0:	4631      	mov	r1, r6
 80035b2:	f50d 5603 	add.w	r6, sp, #8384	@ 0x20c0
 80035b6:	3610      	adds	r6, #16
 80035b8:	4630      	mov	r0, r6
 80035ba:	2204      	movs	r2, #4
 80035bc:	f7ff fe1e 	bl	80031fc <PQCLEAN_MLDSA44_CLEAN_polyveck_uniform_eta>
//  		  HAL_UART_Transmit(&huart2,(unsigned char*)&s1.vec[i].coeffs[j],4,100);
//  	  }
//    }

    /* Matrix-vector multiplication */
    s1hat = s1;
 80035c0:	f50d 5086 	add.w	r0, sp, #4288	@ 0x10c0
 80035c4:	4621      	mov	r1, r4
 80035c6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80035ca:	3010      	adds	r0, #16
 80035cc:	f001 fcac 	bl	8004f28 <memcpy>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(&s1hat);
 80035d0:	f50d 5086 	add.w	r0, sp, #4288	@ 0x10c0
 80035d4:	3010      	adds	r0, #16
 80035d6:	f7ff fd7b 	bl	80030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery(&t1, mat, &s1hat);
 80035da:	f50d 5286 	add.w	r2, sp, #4288	@ 0x10c0
 80035de:	f50d 41a1 	add.w	r1, sp, #20608	@ 0x5080
 80035e2:	f50d 5043 	add.w	r0, sp, #12480	@ 0x30c0
 80035e6:	3210      	adds	r2, #16
 80035e8:	3150      	adds	r1, #80	@ 0x50
 80035ea:	3010      	adds	r0, #16
 80035ec:	f7ff fde2 	bl	80031b4 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&t1);
 80035f0:	f50d 5043 	add.w	r0, sp, #12480	@ 0x30c0
 80035f4:	3010      	adds	r0, #16
 80035f6:	f7ff fe13 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&t1);
 80035fa:	f50d 5043 	add.w	r0, sp, #12480	@ 0x30c0
 80035fe:	3010      	adds	r0, #16
 8003600:	f7ff fe76 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>

    /* Add error vector s2 */
    PQCLEAN_MLDSA44_CLEAN_polyveck_add(&t1, &t1, &s2);
 8003604:	f50d 5143 	add.w	r1, sp, #12480	@ 0x30c0
 8003608:	3110      	adds	r1, #16
 800360a:	4632      	mov	r2, r6
 800360c:	4608      	mov	r0, r1
 800360e:	f7ff fe2b 	bl	8003268 <PQCLEAN_MLDSA44_CLEAN_polyveck_add>

    /* Extract t1 and write public key */
    PQCLEAN_MLDSA44_CLEAN_polyveck_caddq(&t1);
 8003612:	f50d 5043 	add.w	r0, sp, #12480	@ 0x30c0
 8003616:	3010      	adds	r0, #16
 8003618:	f7ff fe14 	bl	8003244 <PQCLEAN_MLDSA44_CLEAN_polyveck_caddq>
    PQCLEAN_MLDSA44_CLEAN_polyveck_power2round(&t1, &t0, &t1);
 800361c:	f50d 4881 	add.w	r8, sp, #16512	@ 0x4080
 8003620:	f50d 5243 	add.w	r2, sp, #12480	@ 0x30c0
 8003624:	f108 0850 	add.w	r8, r8, #80	@ 0x50
 8003628:	3210      	adds	r2, #16
 800362a:	4641      	mov	r1, r8
 800362c:	4610      	mov	r0, r2
 800362e:	f7ff fe93 	bl	8003358 <PQCLEAN_MLDSA44_CLEAN_polyveck_power2round>
    PQCLEAN_MLDSA44_CLEAN_pack_pk(pk, rho, &t1);
 8003632:	f50d 5243 	add.w	r2, sp, #12480	@ 0x30c0
 8003636:	a914      	add	r1, sp, #80	@ 0x50
 8003638:	4628      	mov	r0, r5
 800363a:	3210      	adds	r2, #16
 800363c:	f7fe fd7c 	bl	8002138 <PQCLEAN_MLDSA44_CLEAN_pack_pk>

    /* Compute H(rho, t1) and write secret key */
    shake256(tr, TRBYTES, pk, PQCLEAN_MLDSA44_CLEAN_CRYPTO_PUBLICKEYBYTES);
 8003640:	462a      	mov	r2, r5
 8003642:	a804      	add	r0, sp, #16
 8003644:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8003648:	2140      	movs	r1, #64	@ 0x40
 800364a:	f7fd f8d3 	bl	80007f4 <shake256>
    PQCLEAN_MLDSA44_CLEAN_pack_sk(sk, rho, tr, key, &t0, &s1, &s2);
 800364e:	4638      	mov	r0, r7
 8003650:	e9cd 4601 	strd	r4, r6, [sp, #4]
 8003654:	f8cd 8000 	str.w	r8, [sp]
 8003658:	ab2c      	add	r3, sp, #176	@ 0xb0
 800365a:	aa04      	add	r2, sp, #16
 800365c:	a914      	add	r1, sp, #80	@ 0x50
 800365e:	f7fe fdcf 	bl	8002200 <PQCLEAN_MLDSA44_CLEAN_pack_sk>

    return 0;
}
 8003662:	2000      	movs	r0, #0
 8003664:	f50d 4d10 	add.w	sp, sp, #36864	@ 0x9000
 8003668:	b034      	add	sp, #208	@ 0xd0
 800366a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800366e:	bf00      	nop

08003670 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx>:
        const uint8_t *m,
        size_t mlen,
        const uint8_t *ctx,
        size_t ctxlen,
        const uint8_t *sk,int trigger_rej_idx,
		  int poly_idx, int* rej_num) {
 8003670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003674:	f5ad 4d46 	sub.w	sp, sp, #50688	@ 0xc600
 8003678:	b083      	sub	sp, #12
 800367a:	f50d 4446 	add.w	r4, sp, #50688	@ 0xc600
 800367e:	3434      	adds	r4, #52	@ 0x34
 8003680:	6826      	ldr	r6, [r4, #0]
 8003682:	9105      	str	r1, [sp, #20]
    poly cp;
    shake256incctx state;

    int rej_cnt = 0;

    if (ctxlen > 255) {
 8003684:	2eff      	cmp	r6, #255	@ 0xff
 8003686:	f200 8270 	bhi.w	8003b6a <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x4fa>
    tr = rho + SEEDBYTES;
    key = tr + TRBYTES;
    rnd = key + SEEDBYTES;
    mu = rnd + RNDBYTES;
    rhoprime = mu + CRHBYTES;
    PQCLEAN_MLDSA44_CLEAN_unpack_sk(rho, tr, key, &t0, &s1, &s2, sk);
 800368a:	461d      	mov	r5, r3
 800368c:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003690:	3338      	adds	r3, #56	@ 0x38
 8003692:	af52      	add	r7, sp, #328	@ 0x148
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	9302      	str	r3, [sp, #8]
 8003698:	f50d 438c 	add.w	r3, sp, #17920	@ 0x4600
 800369c:	3308      	adds	r3, #8
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	f50d 63c1 	add.w	r3, sp, #1544	@ 0x608
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	f50d 5358 	add.w	r3, sp, #13824	@ 0x3600
 80036aa:	3308      	adds	r3, #8
 80036ac:	4614      	mov	r4, r2
 80036ae:	a942      	add	r1, sp, #264	@ 0x108
 80036b0:	463a      	mov	r2, r7
 80036b2:	4680      	mov	r8, r0
 80036b4:	a83a      	add	r0, sp, #232	@ 0xe8
 80036b6:	f7fe fe41 	bl	800233c <PQCLEAN_MLDSA44_CLEAN_unpack_sk>

    /* Compute mu = CRH(tr, 0, ctxlen, ctx, msg) */
    mu[0] = 0;
 80036ba:	f04f 0a00 	mov.w	sl, #0
    mu[1] = (uint8_t)ctxlen;
    shake256_inc_init(&state);
 80036be:	a806      	add	r0, sp, #24
    mu[0] = 0;
 80036c0:	ab3a      	add	r3, sp, #232	@ 0xe8
    shake256_inc_absorb(&state, tr, TRBYTES);
    shake256_inc_absorb(&state, mu, 2);
 80036c2:	f50d 79c4 	add.w	r9, sp, #392	@ 0x188
    mu[1] = (uint8_t)ctxlen;
 80036c6:	f883 60a1 	strb.w	r6, [r3, #161]	@ 0xa1
    mu[0] = 0;
 80036ca:	f883 a0a0 	strb.w	sl, [r3, #160]	@ 0xa0
    shake256_inc_init(&state);
 80036ce:	f7fc ffd5 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, tr, TRBYTES);
 80036d2:	2240      	movs	r2, #64	@ 0x40
 80036d4:	a942      	add	r1, sp, #264	@ 0x108
 80036d6:	a806      	add	r0, sp, #24
 80036d8:	f7fc ffdc 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, mu, 2);
 80036dc:	4649      	mov	r1, r9
 80036de:	2202      	movs	r2, #2
 80036e0:	a806      	add	r0, sp, #24
 80036e2:	f7fc ffd7 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, ctx, ctxlen);
 80036e6:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80036ea:	4632      	mov	r2, r6
 80036ec:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80036ee:	a806      	add	r0, sp, #24
 80036f0:	3330      	adds	r3, #48	@ 0x30
 80036f2:	f7fc ffcf 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, m, mlen);
 80036f6:	462a      	mov	r2, r5
 80036f8:	4621      	mov	r1, r4
 80036fa:	a806      	add	r0, sp, #24
 80036fc:	f7fc ffca 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8003700:	a806      	add	r0, sp, #24
 8003702:	f7fd f803 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(mu, CRHBYTES, &state);
 8003706:	aa06      	add	r2, sp, #24
 8003708:	4648      	mov	r0, r9
 800370a:	2140      	movs	r1, #64	@ 0x40
 800370c:	f7fd f82a 	bl	8000764 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8003710:	a806      	add	r0, sp, #24
 8003712:	f7fd f86d 	bl	80007f0 <shake256_inc_ctx_release>

    randombytes(rnd, RNDBYTES);
 8003716:	2120      	movs	r1, #32
 8003718:	a85a      	add	r0, sp, #360	@ 0x168
 800371a:	f7ff fe9f 	bl	800345c <randombytes>
    shake256(rhoprime, CRHBYTES, key, SEEDBYTES + RNDBYTES + CRHBYTES);
 800371e:	463a      	mov	r2, r7
 8003720:	2380      	movs	r3, #128	@ 0x80
 8003722:	2140      	movs	r1, #64	@ 0x40
 8003724:	a872      	add	r0, sp, #456	@ 0x1c8
 8003726:	f7fd f865 	bl	80007f4 <shake256>

    /* Expand matrix and transform vectors */
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand(mat, rho);
 800372a:	f50d 4006 	add.w	r0, sp, #34304	@ 0x8600
 800372e:	a93a      	add	r1, sp, #232	@ 0xe8
 8003730:	3008      	adds	r0, #8
 8003732:	f7ff fc53 	bl	8002fdc <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(&s1);
 8003736:	f50d 60c1 	add.w	r0, sp, #1544	@ 0x608
 800373a:	f7ff fcc9 	bl	80030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyveck_ntt(&s2);
 800373e:	f50d 408c 	add.w	r0, sp, #17920	@ 0x4600
 8003742:	3008      	adds	r0, #8
 8003744:	f7ff fdc2 	bl	80032cc <PQCLEAN_MLDSA44_CLEAN_polyveck_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyveck_ntt(&t0);
 8003748:	f50d 5058 	add.w	r0, sp, #13824	@ 0x3600
 800374c:	3008      	adds	r0, #8
 800374e:	f7ff fdbd 	bl	80032cc <PQCLEAN_MLDSA44_CLEAN_polyveck_ntt>
 8003752:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003756:	333c      	adds	r3, #60	@ 0x3c
 8003758:	f50d 5bb0 	add.w	fp, sp, #5632	@ 0x1600
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f50d 5418 	add.w	r4, sp, #9728	@ 0x2600
 8003762:	f50d 45ac 	add.w	r5, sp, #22016	@ 0x5600
 8003766:	f50d 46cc 	add.w	r6, sp, #26112	@ 0x6600
 800376a:	f50d 47ec 	add.w	r7, sp, #30208	@ 0x7600
 800376e:	3301      	adds	r3, #1
 8003770:	f10b 0b08 	add.w	fp, fp, #8
 8003774:	f104 0408 	add.w	r4, r4, #8
 8003778:	f105 0508 	add.w	r5, r5, #8
 800377c:	f106 0608 	add.w	r6, r6, #8
 8003780:	f50d 7902 	add.w	r9, sp, #520	@ 0x208
 8003784:	f107 0708 	add.w	r7, r7, #8
 8003788:	f000 80d2 	beq.w	8003930 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x2c0>

rej:

	if(trigger_rej_idx == -2)
 800378c:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003790:	333c      	adds	r3, #60	@ 0x3c
 8003792:	fa1f f28a 	uxth.w	r2, sl
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3302      	adds	r3, #2
		*rej_num += 1;
	rej_cnt++;
 800379a:	f10a 0a01 	add.w	sl, sl, #1
	if(trigger_rej_idx == -2)
 800379e:	f000 8177 	beq.w	8003a90 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x420>

	if(trigger_rej_idx == -1){
		PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(&y, rhoprime, nonce++,1,poly_idx);
	}
	else{
		  if(rej_cnt==trigger_rej_idx){
 80037a2:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80037a6:	333c      	adds	r3, #60	@ 0x3c
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	459a      	cmp	sl, r3
 80037ac:	f040 817b 	bne.w	8003aa6 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x436>
			  PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(&y, rhoprime, nonce++,1,poly_idx);
 80037b0:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80037b4:	3340      	adds	r3, #64	@ 0x40
 80037b6:	a972      	add	r1, sp, #456	@ 0x1c8
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	9300      	str	r3, [sp, #0]
 80037bc:	4658      	mov	r0, fp
 80037be:	2301      	movs	r3, #1
 80037c0:	f7ff fc3c 	bl	800303c <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1>
		  else
			  PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(&y, rhoprime, nonce++,0,poly_idx);
	}

    /* Matrix-vector multiplication */
    z = y;
 80037c4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80037c8:	4659      	mov	r1, fp
 80037ca:	4620      	mov	r0, r4
 80037cc:	f001 fbac 	bl	8004f28 <memcpy>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(&z);
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff fc7d 	bl	80030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 80037d6:	f50d 4106 	add.w	r1, sp, #34304	@ 0x8600
 80037da:	4622      	mov	r2, r4
 80037dc:	3108      	adds	r1, #8
 80037de:	4628      	mov	r0, r5
 80037e0:	f7ff fce8 	bl	80031b4 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&w1);
 80037e4:	4628      	mov	r0, r5
 80037e6:	f7ff fd1b 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&w1);
 80037ea:	4628      	mov	r0, r5
 80037ec:	f7ff fd80 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>

    /* Decompose w and call the random oracle */
    PQCLEAN_MLDSA44_CLEAN_polyveck_caddq(&w1);
 80037f0:	4628      	mov	r0, r5
 80037f2:	f7ff fd27 	bl	8003244 <PQCLEAN_MLDSA44_CLEAN_polyveck_caddq>
    PQCLEAN_MLDSA44_CLEAN_polyveck_decompose(&w1, &w0, &w1);
 80037f6:	462a      	mov	r2, r5
 80037f8:	4631      	mov	r1, r6
 80037fa:	4628      	mov	r0, r5
 80037fc:	f7ff fdbc 	bl	8003378 <PQCLEAN_MLDSA44_CLEAN_polyveck_decompose>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1(sig, &w1);
 8003800:	4629      	mov	r1, r5
 8003802:	4640      	mov	r0, r8
 8003804:	f7ff fdee 	bl	80033e4 <PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1>

    shake256_inc_init(&state);
 8003808:	a806      	add	r0, sp, #24
 800380a:	f7fc ff37 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 800380e:	2240      	movs	r2, #64	@ 0x40
 8003810:	a962      	add	r1, sp, #392	@ 0x188
 8003812:	a806      	add	r0, sp, #24
 8003814:	f7fc ff3e 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, sig, K * POLYW1_PACKEDBYTES);
 8003818:	f44f 7240 	mov.w	r2, #768	@ 0x300
 800381c:	4641      	mov	r1, r8
 800381e:	a806      	add	r0, sp, #24
 8003820:	f7fc ff38 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8003824:	a806      	add	r0, sp, #24
 8003826:	f7fc ff71 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 800382a:	2120      	movs	r1, #32
 800382c:	aa06      	add	r2, sp, #24
 800382e:	4640      	mov	r0, r8
 8003830:	f7fc ff98 	bl	8000764 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8003834:	a806      	add	r0, sp, #24
 8003836:	f7fc ffdb 	bl	80007f0 <shake256_inc_ctx_release>
    PQCLEAN_MLDSA44_CLEAN_poly_challenge(&cp, sig);
 800383a:	4641      	mov	r1, r8
 800383c:	4648      	mov	r0, r9
 800383e:	f7ff f8bf 	bl	80029c0 <PQCLEAN_MLDSA44_CLEAN_poly_challenge>
//    }

//    PQCLEAN_MLDSA44_CLEAN_poly_ntt(&cp);

    if(trigger_rej_idx == -1){
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 8003842:	2200      	movs	r2, #0
 8003844:	2102      	movs	r1, #2
 8003846:	48ca      	ldr	r0, [pc, #808]	@ (8003b70 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x500>)
 8003848:	f000 fe76 	bl	8004538 <HAL_GPIO_WritePin>
    	PQCLEAN_MLDSA44_CLEAN_poly_ntt(&cp);
 800384c:	4648      	mov	r0, r9
 800384e:	f7fe ff2f 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 8003852:	48c7      	ldr	r0, [pc, #796]	@ (8003b70 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x500>)
 8003854:	2201      	movs	r2, #1
 8003856:	2102      	movs	r1, #2
 8003858:	f000 fe6e 	bl	8004538 <HAL_GPIO_WritePin>
  	  else
  		PQCLEAN_MLDSA44_CLEAN_poly_ntt(&cp);
    }

    /* Compute z, reject if it reveals secret */
    PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 800385c:	f50d 62c1 	add.w	r2, sp, #1544	@ 0x608
 8003860:	4649      	mov	r1, r9
 8003862:	4620      	mov	r0, r4
 8003864:	f7ff fc7a 	bl	800315c <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery>
//    PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont(&z);

    if(trigger_rej_idx == -1){
    	PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont(&z,1,poly_idx);
 8003868:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 800386c:	2101      	movs	r1, #1
 800386e:	4620      	mov	r0, r4
 8003870:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003872:	3340      	adds	r3, #64	@ 0x40
 8003874:	f7ff fc3e 	bl	80030f4 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont>
//	  for(int i=0;i<N;++i){
//		  HAL_UART_Transmit(&huart2,(unsigned char*)&z.vec[poly_idx].coeffs[i],4,1000);
//	  }
//   }

    PQCLEAN_MLDSA44_CLEAN_polyvecl_add(&z, &z, &y);
 8003878:	4621      	mov	r1, r4
 800387a:	465a      	mov	r2, fp
 800387c:	4620      	mov	r0, r4
 800387e:	f7ff fc17 	bl	80030b0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_add>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_reduce(&z);
 8003882:	4620      	mov	r0, r4
 8003884:	f7ff fc02 	bl	800308c <PQCLEAN_MLDSA44_CLEAN_polyvecl_reduce>
    if (PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm(&z, GAMMA1 - BETA)) {
 8003888:	49ba      	ldr	r1, [pc, #744]	@ (8003b74 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x504>)
 800388a:	4620      	mov	r0, r4
 800388c:	f7ff fca4 	bl	80031d8 <PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm>
 8003890:	2800      	cmp	r0, #0
 8003892:	f47f af7b 	bne.w	800378c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x11c>
        goto rej;
    }

    /* Check that subtracting cs2 does not change high bits of w and low bits
     * do not reveal secret information */
    PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 8003896:	f50d 428c 	add.w	r2, sp, #17920	@ 0x4600
 800389a:	3208      	adds	r2, #8
 800389c:	4649      	mov	r1, r9
 800389e:	4638      	mov	r0, r7
 80038a0:	f7ff fd38 	bl	8003314 <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&h);
 80038a4:	4638      	mov	r0, r7
 80038a6:	f7ff fd23 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyveck_sub(&w0, &w0, &h);
 80038aa:	4631      	mov	r1, r6
 80038ac:	463a      	mov	r2, r7
 80038ae:	4630      	mov	r0, r6
 80038b0:	f7ff fcea 	bl	8003288 <PQCLEAN_MLDSA44_CLEAN_polyveck_sub>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&w0);
 80038b4:	4630      	mov	r0, r6
 80038b6:	f7ff fcb3 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    if (PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm(&w0, GAMMA2 - BETA)) {
 80038ba:	49af      	ldr	r1, [pc, #700]	@ (8003b78 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x508>)
 80038bc:	4630      	mov	r0, r6
 80038be:	f7ff fd39 	bl	8003334 <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm>
 80038c2:	2800      	cmp	r0, #0
 80038c4:	f47f af62 	bne.w	800378c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x11c>
        goto rej;
    }

    /* Compute hints for w1 */
    PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 80038c8:	f50d 5258 	add.w	r2, sp, #13824	@ 0x3600
 80038cc:	4649      	mov	r1, r9
 80038ce:	3208      	adds	r2, #8
 80038d0:	4638      	mov	r0, r7
 80038d2:	f7ff fd1f 	bl	8003314 <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&h);
 80038d6:	4638      	mov	r0, r7
 80038d8:	f7ff fd0a 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&h);
 80038dc:	4638      	mov	r0, r7
 80038de:	f7ff fc9f 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    if (PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm(&h, GAMMA2)) {
 80038e2:	f44f 31ba 	mov.w	r1, #95232	@ 0x17400
 80038e6:	4638      	mov	r0, r7
 80038e8:	f7ff fd24 	bl	8003334 <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	f47f af4d 	bne.w	800378c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x11c>
        goto rej;
    }

    PQCLEAN_MLDSA44_CLEAN_polyveck_add(&w0, &w0, &h);
 80038f2:	463a      	mov	r2, r7
 80038f4:	4631      	mov	r1, r6
 80038f6:	4630      	mov	r0, r6
 80038f8:	f7ff fcb6 	bl	8003268 <PQCLEAN_MLDSA44_CLEAN_polyveck_add>
    n = PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint(&h, &w0, &w1);
 80038fc:	462a      	mov	r2, r5
 80038fe:	4631      	mov	r1, r6
 8003900:	4638      	mov	r0, r7
 8003902:	f7ff fd49 	bl	8003398 <PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint>
    if (n > OMEGA) {
 8003906:	2850      	cmp	r0, #80	@ 0x50
 8003908:	f63f af40 	bhi.w	800378c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x11c>
        goto rej;
    }

    /* Write signature */
    PQCLEAN_MLDSA44_CLEAN_pack_sig(sig, sig, &z, &h);
 800390c:	463b      	mov	r3, r7
 800390e:	4622      	mov	r2, r4
 8003910:	4640      	mov	r0, r8
 8003912:	4641      	mov	r1, r8
 8003914:	f7fe fdb8 	bl	8002488 <PQCLEAN_MLDSA44_CLEAN_pack_sig>
    *siglen = PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES;
 8003918:	9a05      	ldr	r2, [sp, #20]
 800391a:	f640 1374 	movw	r3, #2420	@ 0x974
    return 0;
 800391e:	2000      	movs	r0, #0
    *siglen = PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES;
 8003920:	6013      	str	r3, [r2, #0]
}
 8003922:	f50d 4d46 	add.w	sp, sp, #50688	@ 0xc600
 8003926:	b003      	add	sp, #12
 8003928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800392c:	f10a 0a01 	add.w	sl, sl, #1
		PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(&y, rhoprime, nonce++,1,poly_idx);
 8003930:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003934:	3340      	adds	r3, #64	@ 0x40
 8003936:	fa1f f28a 	uxth.w	r2, sl
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	a972      	add	r1, sp, #456	@ 0x1c8
 8003940:	2301      	movs	r3, #1
 8003942:	4658      	mov	r0, fp
 8003944:	f7ff fb7a 	bl	800303c <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1>
    z = y;
 8003948:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800394c:	4659      	mov	r1, fp
 800394e:	4620      	mov	r0, r4
 8003950:	f001 faea 	bl	8004f28 <memcpy>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(&z);
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fbbb 	bl	80030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 800395a:	f50d 4106 	add.w	r1, sp, #34304	@ 0x8600
 800395e:	4622      	mov	r2, r4
 8003960:	3108      	adds	r1, #8
 8003962:	4628      	mov	r0, r5
 8003964:	f7ff fc26 	bl	80031b4 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&w1);
 8003968:	4628      	mov	r0, r5
 800396a:	f7ff fc59 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&w1);
 800396e:	4628      	mov	r0, r5
 8003970:	f7ff fcbe 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyveck_caddq(&w1);
 8003974:	4628      	mov	r0, r5
 8003976:	f7ff fc65 	bl	8003244 <PQCLEAN_MLDSA44_CLEAN_polyveck_caddq>
    PQCLEAN_MLDSA44_CLEAN_polyveck_decompose(&w1, &w0, &w1);
 800397a:	462a      	mov	r2, r5
 800397c:	4631      	mov	r1, r6
 800397e:	4628      	mov	r0, r5
 8003980:	f7ff fcfa 	bl	8003378 <PQCLEAN_MLDSA44_CLEAN_polyveck_decompose>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1(sig, &w1);
 8003984:	4629      	mov	r1, r5
 8003986:	4640      	mov	r0, r8
 8003988:	f7ff fd2c 	bl	80033e4 <PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1>
    shake256_inc_init(&state);
 800398c:	a806      	add	r0, sp, #24
 800398e:	f7fc fe75 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 8003992:	2240      	movs	r2, #64	@ 0x40
 8003994:	a962      	add	r1, sp, #392	@ 0x188
 8003996:	a806      	add	r0, sp, #24
 8003998:	f7fc fe7c 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, sig, K * POLYW1_PACKEDBYTES);
 800399c:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80039a0:	4641      	mov	r1, r8
 80039a2:	a806      	add	r0, sp, #24
 80039a4:	f7fc fe76 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 80039a8:	a806      	add	r0, sp, #24
 80039aa:	f7fc feaf 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 80039ae:	aa06      	add	r2, sp, #24
 80039b0:	2120      	movs	r1, #32
 80039b2:	4640      	mov	r0, r8
 80039b4:	f7fc fed6 	bl	8000764 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 80039b8:	a806      	add	r0, sp, #24
 80039ba:	f7fc ff19 	bl	80007f0 <shake256_inc_ctx_release>
    PQCLEAN_MLDSA44_CLEAN_poly_challenge(&cp, sig);
 80039be:	4641      	mov	r1, r8
 80039c0:	4648      	mov	r0, r9
 80039c2:	f7fe fffd 	bl	80029c0 <PQCLEAN_MLDSA44_CLEAN_poly_challenge>
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2102      	movs	r1, #2
 80039ca:	4869      	ldr	r0, [pc, #420]	@ (8003b70 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x500>)
 80039cc:	f000 fdb4 	bl	8004538 <HAL_GPIO_WritePin>
    	PQCLEAN_MLDSA44_CLEAN_poly_ntt(&cp);
 80039d0:	4648      	mov	r0, r9
 80039d2:	f7fe fe6d 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
  	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);
 80039d6:	4866      	ldr	r0, [pc, #408]	@ (8003b70 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x500>)
 80039d8:	2201      	movs	r2, #1
 80039da:	2102      	movs	r1, #2
 80039dc:	f000 fdac 	bl	8004538 <HAL_GPIO_WritePin>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 80039e0:	f50d 62c1 	add.w	r2, sp, #1544	@ 0x608
 80039e4:	4649      	mov	r1, r9
 80039e6:	4620      	mov	r0, r4
 80039e8:	f7ff fbb8 	bl	800315c <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery>
    	PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont(&z,1,poly_idx);
 80039ec:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 80039f0:	2101      	movs	r1, #1
 80039f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80039f4:	4620      	mov	r0, r4
 80039f6:	3340      	adds	r3, #64	@ 0x40
 80039f8:	f7ff fb7c 	bl	80030f4 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_add(&z, &z, &y);
 80039fc:	4621      	mov	r1, r4
 80039fe:	465a      	mov	r2, fp
 8003a00:	4620      	mov	r0, r4
 8003a02:	f7ff fb55 	bl	80030b0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_add>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_reduce(&z);
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7ff fb40 	bl	800308c <PQCLEAN_MLDSA44_CLEAN_polyvecl_reduce>
    if (PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm(&z, GAMMA1 - BETA)) {
 8003a0c:	4959      	ldr	r1, [pc, #356]	@ (8003b74 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x504>)
 8003a0e:	4620      	mov	r0, r4
 8003a10:	f7ff fbe2 	bl	80031d8 <PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm>
 8003a14:	2800      	cmp	r0, #0
 8003a16:	d189      	bne.n	800392c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x2bc>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &s2);
 8003a18:	f50d 428c 	add.w	r2, sp, #17920	@ 0x4600
 8003a1c:	3208      	adds	r2, #8
 8003a1e:	4649      	mov	r1, r9
 8003a20:	4638      	mov	r0, r7
 8003a22:	f7ff fc77 	bl	8003314 <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&h);
 8003a26:	4638      	mov	r0, r7
 8003a28:	f7ff fc62 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyveck_sub(&w0, &w0, &h);
 8003a2c:	4631      	mov	r1, r6
 8003a2e:	463a      	mov	r2, r7
 8003a30:	4630      	mov	r0, r6
 8003a32:	f7ff fc29 	bl	8003288 <PQCLEAN_MLDSA44_CLEAN_polyveck_sub>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&w0);
 8003a36:	4630      	mov	r0, r6
 8003a38:	f7ff fbf2 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    if (PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm(&w0, GAMMA2 - BETA)) {
 8003a3c:	494e      	ldr	r1, [pc, #312]	@ (8003b78 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x508>)
 8003a3e:	4630      	mov	r0, r6
 8003a40:	f7ff fc78 	bl	8003334 <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	f47f af71 	bne.w	800392c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x2bc>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery(&h, &cp, &t0);
 8003a4a:	f50d 5258 	add.w	r2, sp, #13824	@ 0x3600
 8003a4e:	4649      	mov	r1, r9
 8003a50:	3208      	adds	r2, #8
 8003a52:	4638      	mov	r0, r7
 8003a54:	f7ff fc5e 	bl	8003314 <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&h);
 8003a58:	4638      	mov	r0, r7
 8003a5a:	f7ff fc49 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&h);
 8003a5e:	4638      	mov	r0, r7
 8003a60:	f7ff fbde 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    if (PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm(&h, GAMMA2)) {
 8003a64:	f44f 31ba 	mov.w	r1, #95232	@ 0x17400
 8003a68:	4638      	mov	r0, r7
 8003a6a:	f7ff fc63 	bl	8003334 <PQCLEAN_MLDSA44_CLEAN_polyveck_chknorm>
 8003a6e:	2800      	cmp	r0, #0
 8003a70:	f47f af5c 	bne.w	800392c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x2bc>
    PQCLEAN_MLDSA44_CLEAN_polyveck_add(&w0, &w0, &h);
 8003a74:	463a      	mov	r2, r7
 8003a76:	4631      	mov	r1, r6
 8003a78:	4630      	mov	r0, r6
 8003a7a:	f7ff fbf5 	bl	8003268 <PQCLEAN_MLDSA44_CLEAN_polyveck_add>
    n = PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint(&h, &w0, &w1);
 8003a7e:	462a      	mov	r2, r5
 8003a80:	4631      	mov	r1, r6
 8003a82:	4638      	mov	r0, r7
 8003a84:	f7ff fc88 	bl	8003398 <PQCLEAN_MLDSA44_CLEAN_polyveck_make_hint>
    if (n > OMEGA) {
 8003a88:	2850      	cmp	r0, #80	@ 0x50
 8003a8a:	f63f af4f 	bhi.w	800392c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x2bc>
 8003a8e:	e73d      	b.n	800390c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x29c>
		*rej_num += 1;
 8003a90:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003a94:	3344      	adds	r3, #68	@ 0x44
 8003a96:	f50d 4146 	add.w	r1, sp, #50688	@ 0xc600
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3144      	adds	r1, #68	@ 0x44
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6809      	ldr	r1, [r1, #0]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	600b      	str	r3, [r1, #0]
			  PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1(&y, rhoprime, nonce++,0,poly_idx);
 8003aa6:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003aaa:	3340      	adds	r3, #64	@ 0x40
 8003aac:	a972      	add	r1, sp, #456	@ 0x1c8
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	4658      	mov	r0, fp
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f7ff fac1 	bl	800303c <PQCLEAN_MLDSA44_CLEAN_polyvecl_uniform_gamma1>
    z = y;
 8003aba:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8003abe:	4659      	mov	r1, fp
 8003ac0:	4620      	mov	r0, r4
 8003ac2:	f001 fa31 	bl	8004f28 <memcpy>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(&z);
 8003ac6:	4620      	mov	r0, r4
 8003ac8:	f7ff fb02 	bl	80030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8003acc:	f50d 4106 	add.w	r1, sp, #34304	@ 0x8600
 8003ad0:	4622      	mov	r2, r4
 8003ad2:	3108      	adds	r1, #8
 8003ad4:	4628      	mov	r0, r5
 8003ad6:	f7ff fb6d 	bl	80031b4 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&w1);
 8003ada:	4628      	mov	r0, r5
 8003adc:	f7ff fba0 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&w1);
 8003ae0:	4628      	mov	r0, r5
 8003ae2:	f7ff fc05 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>
    PQCLEAN_MLDSA44_CLEAN_polyveck_caddq(&w1);
 8003ae6:	4628      	mov	r0, r5
 8003ae8:	f7ff fbac 	bl	8003244 <PQCLEAN_MLDSA44_CLEAN_polyveck_caddq>
    PQCLEAN_MLDSA44_CLEAN_polyveck_decompose(&w1, &w0, &w1);
 8003aec:	462a      	mov	r2, r5
 8003aee:	4631      	mov	r1, r6
 8003af0:	4628      	mov	r0, r5
 8003af2:	f7ff fc41 	bl	8003378 <PQCLEAN_MLDSA44_CLEAN_polyveck_decompose>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1(sig, &w1);
 8003af6:	4629      	mov	r1, r5
 8003af8:	4640      	mov	r0, r8
 8003afa:	f7ff fc73 	bl	80033e4 <PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1>
    shake256_inc_init(&state);
 8003afe:	a806      	add	r0, sp, #24
 8003b00:	f7fc fdbc 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 8003b04:	2240      	movs	r2, #64	@ 0x40
 8003b06:	a962      	add	r1, sp, #392	@ 0x188
 8003b08:	a806      	add	r0, sp, #24
 8003b0a:	f7fc fdc3 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, sig, K * POLYW1_PACKEDBYTES);
 8003b0e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003b12:	4641      	mov	r1, r8
 8003b14:	a806      	add	r0, sp, #24
 8003b16:	f7fc fdbd 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8003b1a:	a806      	add	r0, sp, #24
 8003b1c:	f7fc fdf6 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(sig, CTILDEBYTES, &state);
 8003b20:	aa06      	add	r2, sp, #24
 8003b22:	2120      	movs	r1, #32
 8003b24:	4640      	mov	r0, r8
 8003b26:	f7fc fe1d 	bl	8000764 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8003b2a:	a806      	add	r0, sp, #24
 8003b2c:	f7fc fe60 	bl	80007f0 <shake256_inc_ctx_release>
    PQCLEAN_MLDSA44_CLEAN_poly_challenge(&cp, sig);
 8003b30:	4641      	mov	r1, r8
 8003b32:	4648      	mov	r0, r9
 8003b34:	f7fe ff44 	bl	80029c0 <PQCLEAN_MLDSA44_CLEAN_poly_challenge>
  	  if(rej_cnt==trigger_rej_idx){
 8003b38:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003b3c:	333c      	adds	r3, #60	@ 0x3c
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	459a      	cmp	sl, r3
 8003b42:	f43f ae7e 	beq.w	8003842 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x1d2>
  		PQCLEAN_MLDSA44_CLEAN_poly_ntt(&cp);
 8003b46:	4648      	mov	r0, r9
 8003b48:	f7fe fdb2 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery(&z, &cp, &s1);
 8003b4c:	f50d 62c1 	add.w	r2, sp, #1544	@ 0x608
 8003b50:	4649      	mov	r1, r9
 8003b52:	4620      	mov	r0, r4
 8003b54:	f7ff fb02 	bl	800315c <PQCLEAN_MLDSA44_CLEAN_polyvecl_pointwise_poly_montgomery>
  		PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont(&z,0,poly_idx);
 8003b58:	f50d 4346 	add.w	r3, sp, #50688	@ 0xc600
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4620      	mov	r0, r4
 8003b60:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003b62:	3340      	adds	r3, #64	@ 0x40
 8003b64:	f7ff fac6 	bl	80030f4 <PQCLEAN_MLDSA44_CLEAN_polyvecl_invntt_tomont>
 8003b68:	e686      	b.n	8003878 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x208>
        return -1;
 8003b6a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b6e:	e6d8      	b.n	8003922 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx+0x2b2>
 8003b70:	40020800 	.word	0x40020800
 8003b74:	0001ffb2 	.word	0x0001ffb2
 8003b78:	000173b2 	.word	0x000173b2

08003b7c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx>:
        size_t siglen,
        const uint8_t *m,
        size_t mlen,
        const uint8_t *ctx,
        size_t ctxlen,
        const uint8_t *pk) {
 8003b7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003b80:	f5ad 4d08 	sub.w	sp, sp, #34816	@ 0x8800
 8003b84:	b09c      	sub	sp, #112	@ 0x70
 8003b86:	f50d 4408 	add.w	r4, sp, #34816	@ 0x8800
 8003b8a:	461e      	mov	r6, r3
 8003b8c:	f8d4 708c 	ldr.w	r7, [r4, #140]	@ 0x8c
 8003b90:	f50d 4308 	add.w	r3, sp, #34816	@ 0x8800
 8003b94:	3390      	adds	r3, #144	@ 0x90
    poly cp;
    polyvecl mat[K], z;
    polyveck t1, w1, h;
    shake256incctx state;

    if (ctxlen > 255 || siglen != PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES) {
 8003b96:	2fff      	cmp	r7, #255	@ 0xff
        const uint8_t *pk) {
 8003b98:	f104 048c 	add.w	r4, r4, #140	@ 0x8c
 8003b9c:	681c      	ldr	r4, [r3, #0]
    if (ctxlen > 255 || siglen != PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES) {
 8003b9e:	f200 80ce 	bhi.w	8003d3e <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1c2>
 8003ba2:	f640 1374 	movw	r3, #2420	@ 0x974
 8003ba6:	4299      	cmp	r1, r3
 8003ba8:	f040 80c9 	bne.w	8003d3e <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1c2>
        return -1;
    }

    PQCLEAN_MLDSA44_CLEAN_unpack_pk(rho, &t1, pk);
 8003bac:	f50d 51c3 	add.w	r1, sp, #6240	@ 0x1860
 8003bb0:	4605      	mov	r5, r0
 8003bb2:	3110      	adds	r1, #16
 8003bb4:	4668      	mov	r0, sp
 8003bb6:	4690      	mov	r8, r2
 8003bb8:	4622      	mov	r2, r4
 8003bba:	f7fe faef 	bl	800219c <PQCLEAN_MLDSA44_CLEAN_unpack_pk>
    if (PQCLEAN_MLDSA44_CLEAN_unpack_sig(c, &z, &h, sig)) {
 8003bbe:	f50d 5261 	add.w	r2, sp, #14400	@ 0x3840
 8003bc2:	462b      	mov	r3, r5
 8003bc4:	3230      	adds	r2, #48	@ 0x30
 8003bc6:	f50d 6107 	add.w	r1, sp, #2160	@ 0x870
 8003bca:	a808      	add	r0, sp, #32
 8003bcc:	f7fe fcac 	bl	8002528 <PQCLEAN_MLDSA44_CLEAN_unpack_sig>
 8003bd0:	2800      	cmp	r0, #0
 8003bd2:	f040 80b4 	bne.w	8003d3e <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1c2>
        return -1;
    }
    if (PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm(&z, GAMMA1 - BETA)) {
 8003bd6:	495e      	ldr	r1, [pc, #376]	@ (8003d50 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1d4>)
 8003bd8:	f50d 6007 	add.w	r0, sp, #2160	@ 0x870
 8003bdc:	f7ff fafc 	bl	80031d8 <PQCLEAN_MLDSA44_CLEAN_polyvecl_chknorm>
 8003be0:	4605      	mov	r5, r0
 8003be2:	2800      	cmp	r0, #0
 8003be4:	f040 80ab 	bne.w	8003d3e <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1c2>
        return -1;
    }

    /* Compute CRH(H(rho, t1), msg) */
    shake256(mu, TRBYTES, pk, PQCLEAN_MLDSA44_CLEAN_CRYPTO_PUBLICKEYBYTES);
 8003be8:	f44f 63a4 	mov.w	r3, #1312	@ 0x520
 8003bec:	4622      	mov	r2, r4
 8003bee:	2140      	movs	r1, #64	@ 0x40
 8003bf0:	a818      	add	r0, sp, #96	@ 0x60
 8003bf2:	f7fc fdff 	bl	80007f4 <shake256>
    shake256_inc_init(&state);
 8003bf6:	a828      	add	r0, sp, #160	@ 0xa0
 8003bf8:	f7fc fd40 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, mu, TRBYTES);
 8003bfc:	a828      	add	r0, sp, #160	@ 0xa0
 8003bfe:	2240      	movs	r2, #64	@ 0x40
 8003c00:	a918      	add	r1, sp, #96	@ 0x60
 8003c02:	f7fc fd47 	bl	8000694 <shake256_inc_absorb>
    mu[0] = 0;
 8003c06:	a818      	add	r0, sp, #96	@ 0x60
    mu[1] = (uint8_t)ctxlen;
    shake256_inc_absorb(&state, mu, 2);
 8003c08:	4601      	mov	r1, r0
 8003c0a:	2202      	movs	r2, #2
    mu[0] = 0;
 8003c0c:	7005      	strb	r5, [r0, #0]
    mu[1] = (uint8_t)ctxlen;
 8003c0e:	7047      	strb	r7, [r0, #1]
    shake256_inc_absorb(&state, mu, 2);
 8003c10:	a828      	add	r0, sp, #160	@ 0xa0
 8003c12:	f7fc fd3f 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, ctx, ctxlen);
 8003c16:	f50d 4308 	add.w	r3, sp, #34816	@ 0x8800
 8003c1a:	463a      	mov	r2, r7
 8003c1c:	f8d3 1088 	ldr.w	r1, [r3, #136]	@ 0x88
 8003c20:	a828      	add	r0, sp, #160	@ 0xa0
 8003c22:	3388      	adds	r3, #136	@ 0x88
 8003c24:	f7fc fd36 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, m, mlen);
 8003c28:	4632      	mov	r2, r6
 8003c2a:	4641      	mov	r1, r8
 8003c2c:	a828      	add	r0, sp, #160	@ 0xa0
 8003c2e:	f7fc fd31 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
 8003c32:	a828      	add	r0, sp, #160	@ 0xa0
 8003c34:	f7fc fd6a 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(mu, CRHBYTES, &state);
 8003c38:	aa28      	add	r2, sp, #160	@ 0xa0
 8003c3a:	2140      	movs	r1, #64	@ 0x40
 8003c3c:	a818      	add	r0, sp, #96	@ 0x60
 8003c3e:	f7fc fd91 	bl	8000764 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8003c42:	a828      	add	r0, sp, #160	@ 0xa0
 8003c44:	f7fc fdd4 	bl	80007f0 <shake256_inc_ctx_release>

    /* Matrix-vector multiplication; compute Az - c2^dt1 */
    PQCLEAN_MLDSA44_CLEAN_poly_challenge(&cp, c);
 8003c48:	a908      	add	r1, sp, #32
 8003c4a:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8003c4e:	f7fe feb7 	bl	80029c0 <PQCLEAN_MLDSA44_CLEAN_poly_challenge>
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand(mat, rho);
 8003c52:	f50d 4090 	add.w	r0, sp, #18432	@ 0x4800
 8003c56:	4669      	mov	r1, sp
 8003c58:	3070      	adds	r0, #112	@ 0x70
 8003c5a:	f7ff f9bf 	bl	8002fdc <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_expand>

    PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt(&z);
 8003c5e:	f50d 6007 	add.w	r0, sp, #2160	@ 0x870
 8003c62:	f7ff fa35 	bl	80030d0 <PQCLEAN_MLDSA44_CLEAN_polyvecl_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery(&w1, mat, &z);
 8003c66:	f50d 4190 	add.w	r1, sp, #18432	@ 0x4800
 8003c6a:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 8003c6e:	f50d 6207 	add.w	r2, sp, #2160	@ 0x870
 8003c72:	3170      	adds	r1, #112	@ 0x70
 8003c74:	3030      	adds	r0, #48	@ 0x30
 8003c76:	f7ff fa9d 	bl	80031b4 <PQCLEAN_MLDSA44_CLEAN_polyvec_matrix_pointwise_montgomery>

    PQCLEAN_MLDSA44_CLEAN_poly_ntt(&cp);
 8003c7a:	f50d 608e 	add.w	r0, sp, #1136	@ 0x470
 8003c7e:	f7fe fd17 	bl	80026b0 <PQCLEAN_MLDSA44_CLEAN_poly_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyveck_shiftl(&t1);
 8003c82:	f50d 50c3 	add.w	r0, sp, #6240	@ 0x1860
 8003c86:	3010      	adds	r0, #16
 8003c88:	f7ff fb0e 	bl	80032a8 <PQCLEAN_MLDSA44_CLEAN_polyveck_shiftl>
    PQCLEAN_MLDSA44_CLEAN_polyveck_ntt(&t1);
 8003c8c:	f50d 50c3 	add.w	r0, sp, #6240	@ 0x1860
 8003c90:	3010      	adds	r0, #16
 8003c92:	f7ff fb1b 	bl	80032cc <PQCLEAN_MLDSA44_CLEAN_polyveck_ntt>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery(&t1, &cp, &t1);
 8003c96:	f50d 52c3 	add.w	r2, sp, #6240	@ 0x1860
 8003c9a:	3210      	adds	r2, #16
 8003c9c:	4610      	mov	r0, r2
 8003c9e:	f50d 618e 	add.w	r1, sp, #1136	@ 0x470
 8003ca2:	f7ff fb37 	bl	8003314 <PQCLEAN_MLDSA44_CLEAN_polyveck_pointwise_poly_montgomery>

    PQCLEAN_MLDSA44_CLEAN_polyveck_sub(&w1, &w1, &t1);
 8003ca6:	f50d 5121 	add.w	r1, sp, #10304	@ 0x2840
 8003caa:	3130      	adds	r1, #48	@ 0x30
 8003cac:	f50d 52c3 	add.w	r2, sp, #6240	@ 0x1860
 8003cb0:	4608      	mov	r0, r1
 8003cb2:	3210      	adds	r2, #16
 8003cb4:	f7ff fae8 	bl	8003288 <PQCLEAN_MLDSA44_CLEAN_polyveck_sub>
    PQCLEAN_MLDSA44_CLEAN_polyveck_reduce(&w1);
 8003cb8:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 8003cbc:	3030      	adds	r0, #48	@ 0x30
 8003cbe:	f7ff faaf 	bl	8003220 <PQCLEAN_MLDSA44_CLEAN_polyveck_reduce>
    PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont(&w1);
 8003cc2:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 8003cc6:	3030      	adds	r0, #48	@ 0x30
 8003cc8:	f7ff fb12 	bl	80032f0 <PQCLEAN_MLDSA44_CLEAN_polyveck_invntt_tomont>

    /* Reconstruct w1 */
    PQCLEAN_MLDSA44_CLEAN_polyveck_caddq(&w1);
 8003ccc:	f50d 5021 	add.w	r0, sp, #10304	@ 0x2840
 8003cd0:	3030      	adds	r0, #48	@ 0x30
 8003cd2:	f7ff fab7 	bl	8003244 <PQCLEAN_MLDSA44_CLEAN_polyveck_caddq>
    PQCLEAN_MLDSA44_CLEAN_polyveck_use_hint(&w1, &w1, &h);
 8003cd6:	f50d 5121 	add.w	r1, sp, #10304	@ 0x2840
 8003cda:	3130      	adds	r1, #48	@ 0x30
 8003cdc:	f50d 5261 	add.w	r2, sp, #14400	@ 0x3840
 8003ce0:	3230      	adds	r2, #48	@ 0x30
 8003ce2:	4608      	mov	r0, r1
 8003ce4:	f7ff fb6e 	bl	80033c4 <PQCLEAN_MLDSA44_CLEAN_polyveck_use_hint>
    PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1(buf, &w1);
 8003ce8:	f50d 5121 	add.w	r1, sp, #10304	@ 0x2840
 8003cec:	3130      	adds	r1, #48	@ 0x30
 8003cee:	a85c      	add	r0, sp, #368	@ 0x170
 8003cf0:	f7ff fb78 	bl	80033e4 <PQCLEAN_MLDSA44_CLEAN_polyveck_pack_w1>

    /* Call random oracle and verify challenge */
    shake256_inc_init(&state);
 8003cf4:	a828      	add	r0, sp, #160	@ 0xa0
 8003cf6:	f7fc fcc1 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(&state, mu, CRHBYTES);
 8003cfa:	a918      	add	r1, sp, #96	@ 0x60
 8003cfc:	2240      	movs	r2, #64	@ 0x40
 8003cfe:	a828      	add	r0, sp, #160	@ 0xa0
 8003d00:	f7fc fcc8 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(&state, buf, K * POLYW1_PACKEDBYTES);
 8003d04:	a95c      	add	r1, sp, #368	@ 0x170
 8003d06:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8003d0a:	a828      	add	r0, sp, #160	@ 0xa0
 8003d0c:	f7fc fcc2 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(&state);
    shake256_inc_squeeze(c2, CTILDEBYTES, &state);
 8003d10:	ac10      	add	r4, sp, #64	@ 0x40
    shake256_inc_finalize(&state);
 8003d12:	a828      	add	r0, sp, #160	@ 0xa0
 8003d14:	f7fc fcfa 	bl	800070c <shake256_inc_finalize>
    shake256_inc_squeeze(c2, CTILDEBYTES, &state);
 8003d18:	aa28      	add	r2, sp, #160	@ 0xa0
 8003d1a:	2120      	movs	r1, #32
 8003d1c:	4620      	mov	r0, r4
 8003d1e:	f7fc fd21 	bl	8000764 <shake256_inc_squeeze>
    shake256_inc_ctx_release(&state);
 8003d22:	a828      	add	r0, sp, #160	@ 0xa0
 8003d24:	f7fc fd64 	bl	80007f0 <shake256_inc_ctx_release>
    for (i = 0; i < CTILDEBYTES; ++i) {
 8003d28:	ab08      	add	r3, sp, #32
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	e001      	b.n	8003d32 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1b6>
 8003d2e:	42a3      	cmp	r3, r4
 8003d30:	d007      	beq.n	8003d42 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1c6>
        if (c[i] != c2[i]) {
 8003d32:	f813 cb01 	ldrb.w	ip, [r3], #1
 8003d36:	f812 1b01 	ldrb.w	r1, [r2], #1
 8003d3a:	458c      	cmp	ip, r1
 8003d3c:	d0f7      	beq.n	8003d2e <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx+0x1b2>
        return -1;
 8003d3e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
            return -1;
        }
    }

    return 0;
}
 8003d42:	4628      	mov	r0, r5
 8003d44:	f50d 4d08 	add.w	sp, sp, #34816	@ 0x8800
 8003d48:	b01c      	add	sp, #112	@ 0x70
 8003d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003d4e:	bf00      	nop
 8003d50:	0001ffb2 	.word	0x0001ffb2

08003d54 <PQCLEAN_MLDSA44_CLEAN_crypto_sign>:
int PQCLEAN_MLDSA44_CLEAN_crypto_sign(uint8_t *sm,
                                      size_t *smlen,
                                      const uint8_t *m,
                                      size_t mlen,
                                      const uint8_t *sk,int trigger_rej_idx,
									  int poly_idx, int* rej_num) {
 8003d54:	b530      	push	{r4, r5, lr}
 8003d56:	460d      	mov	r5, r1
 8003d58:	b087      	sub	sp, #28
    for (i = 0; i < mlen; ++i) {
 8003d5a:	461c      	mov	r4, r3
 8003d5c:	b153      	cbz	r3, 8003d74 <PQCLEAN_MLDSA44_CLEAN_crypto_sign+0x20>
 8003d5e:	f603 1e74 	addw	lr, r3, #2420	@ 0x974
 8003d62:	4486      	add	lr, r0
 8003d64:	eb02 0c03 	add.w	ip, r2, r3
        sm[PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES + mlen - 1 - i] = m[mlen - 1 - i];
 8003d68:	f81c 3d01 	ldrb.w	r3, [ip, #-1]!
 8003d6c:	f80e 3d01 	strb.w	r3, [lr, #-1]!
    for (i = 0; i < mlen; ++i) {
 8003d70:	4594      	cmp	ip, r2
 8003d72:	d1f9      	bne.n	8003d68 <PQCLEAN_MLDSA44_CLEAN_crypto_sign+0x14>
    ret = PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx(sm, smlen, sm + PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES, mlen, ctx, ctxlen, sk,trigger_rej_idx,poly_idx,rej_num);
 8003d74:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003d76:	9305      	str	r3, [sp, #20]
 8003d78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8003d7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003d7c:	9304      	str	r3, [sp, #16]
 8003d7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003d80:	9303      	str	r3, [sp, #12]
 8003d82:	2300      	movs	r3, #0
 8003d84:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	f600 1274 	addw	r2, r0, #2420	@ 0x974
 8003d8e:	4623      	mov	r3, r4
 8003d90:	4629      	mov	r1, r5
 8003d92:	f7ff fc6d 	bl	8003670 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_signature_ctx>
    *smlen += mlen;
 8003d96:	682b      	ldr	r3, [r5, #0]
 8003d98:	4423      	add	r3, r4
 8003d9a:	602b      	str	r3, [r5, #0]
    return PQCLEAN_MLDSA44_CLEAN_crypto_sign_ctx(sm, smlen, m, mlen, NULL, 0, sk,trigger_rej_idx,poly_idx,rej_num);
}
 8003d9c:	b007      	add	sp, #28
 8003d9e:	bd30      	pop	{r4, r5, pc}

08003da0 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open>:
}

int PQCLEAN_MLDSA44_CLEAN_crypto_sign_open(uint8_t *m,
        size_t *mlen,
        const uint8_t *sm, size_t smlen,
        const uint8_t *pk) {
 8003da0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003da4:	461c      	mov	r4, r3
    if (smlen < PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES) {
 8003da6:	f640 1373 	movw	r3, #2419	@ 0x973
 8003daa:	429c      	cmp	r4, r3
        const uint8_t *pk) {
 8003dac:	b084      	sub	sp, #16
 8003dae:	4607      	mov	r7, r0
 8003db0:	460d      	mov	r5, r1
    if (smlen < PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES) {
 8003db2:	d80c      	bhi.n	8003dce <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open+0x2e>
    *mlen = 0;
 8003db4:	2300      	movs	r3, #0
 8003db6:	600b      	str	r3, [r1, #0]
    for (i = 0; i < smlen; ++i) {
 8003db8:	b124      	cbz	r4, 8003dc4 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open+0x24>
        m[i] = 0;
 8003dba:	4622      	mov	r2, r4
 8003dbc:	2100      	movs	r1, #0
 8003dbe:	4638      	mov	r0, r7
 8003dc0:	f001 f886 	bl	8004ed0 <memset>
    return -1;
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
    return PQCLEAN_MLDSA44_CLEAN_crypto_sign_open_ctx(m, mlen, sm, smlen, NULL, 0, pk);
}
 8003dc8:	b004      	add	sp, #16
 8003dca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *mlen = smlen - PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES;
 8003dce:	4616      	mov	r6, r2
 8003dd0:	f6a4 1374 	subw	r3, r4, #2420	@ 0x974
    if (PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx(sm, PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES, sm + PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES, *mlen, ctx, ctxlen, pk)) {
 8003dd4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
    *mlen = smlen - PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES;
 8003dd6:	600b      	str	r3, [r1, #0]
    if (PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx(sm, PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES, sm + PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES, *mlen, ctx, ctxlen, pk)) {
 8003dd8:	f04f 0800 	mov.w	r8, #0
 8003ddc:	9202      	str	r2, [sp, #8]
 8003dde:	e9cd 8800 	strd	r8, r8, [sp]
 8003de2:	f606 1274 	addw	r2, r6, #2420	@ 0x974
 8003de6:	f640 1174 	movw	r1, #2420	@ 0x974
 8003dea:	4630      	mov	r0, r6
 8003dec:	f7ff fec6 	bl	8003b7c <PQCLEAN_MLDSA44_CLEAN_crypto_sign_verify_ctx>
 8003df0:	b998      	cbnz	r0, 8003e1a <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open+0x7a>
        for (i = 0; i < *mlen; ++i) {
 8003df2:	682b      	ldr	r3, [r5, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d0e7      	beq.n	8003dc8 <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open+0x28>
 8003df8:	f606 1c73 	addw	ip, r6, #2419	@ 0x973
 8003dfc:	1e7c      	subs	r4, r7, #1
            m[i] = sm[PQCLEAN_MLDSA44_CLEAN_CRYPTO_BYTES + i];
 8003dfe:	4663      	mov	r3, ip
 8003e00:	f81c 2f01 	ldrb.w	r2, [ip, #1]!
 8003e04:	f804 2f01 	strb.w	r2, [r4, #1]!
        for (i = 0; i < *mlen; ++i) {
 8003e08:	f6a3 1372 	subw	r3, r3, #2418	@ 0x972
 8003e0c:	682a      	ldr	r2, [r5, #0]
 8003e0e:	1b9b      	subs	r3, r3, r6
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d8f4      	bhi.n	8003dfe <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open+0x5e>
}
 8003e14:	b004      	add	sp, #16
 8003e16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *mlen = 0;
 8003e1a:	f8c5 8000 	str.w	r8, [r5]
    for (i = 0; i < smlen; ++i) {
 8003e1e:	e7cc      	b.n	8003dba <PQCLEAN_MLDSA44_CLEAN_crypto_sign_open+0x1a>

08003e20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e20:	b082      	sub	sp, #8

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e22:	4b0c      	ldr	r3, [pc, #48]	@ (8003e54 <HAL_MspInit+0x34>)
 8003e24:	2100      	movs	r1, #0
 8003e26:	9100      	str	r1, [sp, #0]
 8003e28:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8003e30:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e32:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8003e36:	9200      	str	r2, [sp, #0]
 8003e38:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e3a:	9101      	str	r1, [sp, #4]
 8003e3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e3e:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 8003e42:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4a:	9301      	str	r3, [sp, #4]
 8003e4c:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e4e:	b002      	add	sp, #8
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	40023800 	.word	0x40023800

08003e58 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e58:	e7fe      	b.n	8003e58 <NMI_Handler>
 8003e5a:	bf00      	nop

08003e5c <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e5c:	e7fe      	b.n	8003e5c <HardFault_Handler>
 8003e5e:	bf00      	nop

08003e60 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e60:	e7fe      	b.n	8003e60 <MemManage_Handler>
 8003e62:	bf00      	nop

08003e64 <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e64:	e7fe      	b.n	8003e64 <BusFault_Handler>
 8003e66:	bf00      	nop

08003e68 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e68:	e7fe      	b.n	8003e68 <UsageFault_Handler>
 8003e6a:	bf00      	nop

08003e6c <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e6c:	4770      	bx	lr
 8003e6e:	bf00      	nop

08003e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop

08003e74 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop

08003e78 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e78:	f000 b8fa 	b.w	8004070 <HAL_IncTick>

08003e7c <PQCLEAN_MLDSA44_CLEAN_dilithium_shake128_stream_init>:
#include "fips202.h"
#include "params.h"
#include "symmetric.h"
#include <stdint.h>

void PQCLEAN_MLDSA44_CLEAN_dilithium_shake128_stream_init(shake128incctx *state, const uint8_t seed[SEEDBYTES], uint16_t nonce) {
 8003e7c:	b530      	push	{r4, r5, lr}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	4604      	mov	r4, r0
 8003e82:	460d      	mov	r5, r1
    uint8_t t[2];
    t[0] = (uint8_t) nonce;
 8003e84:	f8ad 2004 	strh.w	r2, [sp, #4]
    t[1] = (uint8_t) (nonce >> 8);

    shake128_inc_init(state);
 8003e88:	f7fc fb3c 	bl	8000504 <shake128_inc_init>
    shake128_inc_absorb(state, seed, SEEDBYTES);
 8003e8c:	4629      	mov	r1, r5
 8003e8e:	4620      	mov	r0, r4
 8003e90:	2220      	movs	r2, #32
 8003e92:	f7fc fb43 	bl	800051c <shake128_inc_absorb>
    shake128_inc_absorb(state, t, 2);
 8003e96:	2202      	movs	r2, #2
 8003e98:	a901      	add	r1, sp, #4
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	f7fc fb3e 	bl	800051c <shake128_inc_absorb>
    shake128_inc_finalize(state);
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	f7fc fb77 	bl	8000594 <shake128_inc_finalize>
}
 8003ea6:	b003      	add	sp, #12
 8003ea8:	bd30      	pop	{r4, r5, pc}
 8003eaa:	bf00      	nop

08003eac <PQCLEAN_MLDSA44_CLEAN_dilithium_shake256_stream_init>:

void PQCLEAN_MLDSA44_CLEAN_dilithium_shake256_stream_init(shake256incctx *state, const uint8_t seed[CRHBYTES], uint16_t nonce) {
 8003eac:	b530      	push	{r4, r5, lr}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	4604      	mov	r4, r0
 8003eb2:	460d      	mov	r5, r1
    uint8_t t[2];
    t[0] = (uint8_t) nonce;
 8003eb4:	f8ad 2004 	strh.w	r2, [sp, #4]
    t[1] = (uint8_t) (nonce >> 8);

    shake256_inc_init(state);
 8003eb8:	f7fc fbe0 	bl	800067c <shake256_inc_init>
    shake256_inc_absorb(state, seed, CRHBYTES);
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4620      	mov	r0, r4
 8003ec0:	2240      	movs	r2, #64	@ 0x40
 8003ec2:	f7fc fbe7 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_absorb(state, t, 2);
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	a901      	add	r1, sp, #4
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7fc fbe2 	bl	8000694 <shake256_inc_absorb>
    shake256_inc_finalize(state);
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f7fc fc1b 	bl	800070c <shake256_inc_finalize>
}
 8003ed6:	b003      	add	sp, #12
 8003ed8:	bd30      	pop	{r4, r5, pc}
 8003eda:	bf00      	nop

08003edc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003edc:	4a03      	ldr	r2, [pc, #12]	@ (8003eec <SystemInit+0x10>)
 8003ede:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
 8003ee2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003ee6:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003eea:	4770      	bx	lr
 8003eec:	e000ed00 	.word	0xe000ed00

08003ef0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003ef0:	b510      	push	{r4, lr}
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003ef2:	480b      	ldr	r0, [pc, #44]	@ (8003f20 <MX_USART2_UART_Init+0x30>)
 8003ef4:	4c0b      	ldr	r4, [pc, #44]	@ (8003f24 <MX_USART2_UART_Init+0x34>)
  huart2.Init.BaudRate = 256000;
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003ef6:	2300      	movs	r3, #0
  huart2.Init.BaudRate = 256000;
 8003ef8:	f44f 317a 	mov.w	r1, #256000	@ 0x3e800
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003efc:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 256000;
 8003efe:	e9c0 4100 	strd	r4, r1, [r0]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003f02:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003f06:	e9c0 3204 	strd	r3, r2, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f0a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003f0e:	f000 fdeb 	bl	8004ae8 <HAL_UART_Init>
 8003f12:	b900      	cbnz	r0, 8003f16 <MX_USART2_UART_Init+0x26>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8003f1a:	f7fe b847 	b.w	8001fac <Error_Handler>
 8003f1e:	bf00      	nop
 8003f20:	200024e8 	.word	0x200024e8
 8003f24:	40004400 	.word	0x40004400

08003f28 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003f28:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART2)
 8003f2a:	4a1b      	ldr	r2, [pc, #108]	@ (8003f98 <HAL_UART_MspInit+0x70>)
 8003f2c:	6801      	ldr	r1, [r0, #0]
{
 8003f2e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f30:	2300      	movs	r3, #0
  if(uartHandle->Instance==USART2)
 8003f32:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f34:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003f38:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003f3c:	9306      	str	r3, [sp, #24]
  if(uartHandle->Instance==USART2)
 8003f3e:	d001      	beq.n	8003f44 <HAL_UART_MspInit+0x1c>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003f40:	b008      	add	sp, #32
 8003f42:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003f44:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8003f4c:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003f50:	6410      	str	r0, [r2, #64]	@ 0x40
 8003f52:	6c10      	ldr	r0, [r2, #64]	@ 0x40
 8003f54:	f400 3000 	and.w	r0, r0, #131072	@ 0x20000
 8003f58:	9000      	str	r0, [sp, #0]
 8003f5a:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f5c:	9301      	str	r3, [sp, #4]
 8003f5e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f60:	480e      	ldr	r0, [pc, #56]	@ (8003f9c <HAL_UART_MspInit+0x74>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f62:	f043 0301 	orr.w	r3, r3, #1
 8003f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f68:	6b13      	ldr	r3, [r2, #48]	@ 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f6a:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 8003f90 <HAL_UART_MspInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f74:	2203      	movs	r2, #3
 8003f76:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f78:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f7a:	ed8d 7b02 	vstr	d7, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f84:	f000 f8ee 	bl	8004164 <HAL_GPIO_Init>
}
 8003f88:	b008      	add	sp, #32
 8003f8a:	bd10      	pop	{r4, pc}
 8003f8c:	f3af 8000 	nop.w
 8003f90:	0000000c 	.word	0x0000000c
 8003f94:	00000002 	.word	0x00000002
 8003f98:	40004400 	.word	0x40004400
 8003f9c:	40020000 	.word	0x40020000

08003fa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003fa0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003fd8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003fa4:	f7ff ff9a 	bl	8003edc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003fa8:	480c      	ldr	r0, [pc, #48]	@ (8003fdc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003faa:	490d      	ldr	r1, [pc, #52]	@ (8003fe0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003fac:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003fae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003fb0:	e002      	b.n	8003fb8 <LoopCopyDataInit>

08003fb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003fb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003fb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003fb6:	3304      	adds	r3, #4

08003fb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003fb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003fba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003fbc:	d3f9      	bcc.n	8003fb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003fc0:	4c0a      	ldr	r4, [pc, #40]	@ (8003fec <LoopFillZerobss+0x22>)
  movs r3, #0
 8003fc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003fc4:	e001      	b.n	8003fca <LoopFillZerobss>

08003fc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003fc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003fc8:	3204      	adds	r2, #4

08003fca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003fca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003fcc:	d3fb      	bcc.n	8003fc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003fce:	f000 ff87 	bl	8004ee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003fd2:	f7fd ff37 	bl	8001e44 <main>
  bx  lr    
 8003fd6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003fd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003fdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003fe0:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8003fe4:	080054ac 	.word	0x080054ac
  ldr r2, =_sbss
 8003fe8:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8003fec:	20002534 	.word	0x20002534

08003ff0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ff0:	e7fe      	b.n	8003ff0 <ADC_IRQHandler>
	...

08003ff4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ff4:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ff6:	4a0e      	ldr	r2, [pc, #56]	@ (8004030 <HAL_InitTick+0x3c>)
 8003ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8004034 <HAL_InitTick+0x40>)
 8003ffa:	7812      	ldrb	r2, [r2, #0]
{
 8003ffc:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ffe:	6818      	ldr	r0, [r3, #0]
 8004000:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004004:	fbb3 f3f2 	udiv	r3, r3, r2
 8004008:	fbb0 f0f3 	udiv	r0, r0, r3
 800400c:	f000 f890 	bl	8004130 <HAL_SYSTICK_Config>
 8004010:	b908      	cbnz	r0, 8004016 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004012:	2d0f      	cmp	r5, #15
 8004014:	d901      	bls.n	800401a <HAL_InitTick+0x26>
    return HAL_ERROR;
 8004016:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004018:	bd38      	pop	{r3, r4, r5, pc}
 800401a:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800401c:	4602      	mov	r2, r0
 800401e:	4629      	mov	r1, r5
 8004020:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004024:	f000 f848 	bl	80040b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004028:	4b03      	ldr	r3, [pc, #12]	@ (8004038 <HAL_InitTick+0x44>)
 800402a:	4620      	mov	r0, r4
 800402c:	601d      	str	r5, [r3, #0]
}
 800402e:	bd38      	pop	{r3, r4, r5, pc}
 8004030:	20000010 	.word	0x20000010
 8004034:	2000000c 	.word	0x2000000c
 8004038:	20000014 	.word	0x20000014

0800403c <HAL_Init>:
{
 800403c:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800403e:	4b0b      	ldr	r3, [pc, #44]	@ (800406c <HAL_Init+0x30>)
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004046:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800404e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004056:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004058:	2003      	movs	r0, #3
 800405a:	f000 f81b 	bl	8004094 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800405e:	200f      	movs	r0, #15
 8004060:	f7ff ffc8 	bl	8003ff4 <HAL_InitTick>
  HAL_MspInit();
 8004064:	f7ff fedc 	bl	8003e20 <HAL_MspInit>
}
 8004068:	2000      	movs	r0, #0
 800406a:	bd08      	pop	{r3, pc}
 800406c:	40023c00 	.word	0x40023c00

08004070 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004070:	4a03      	ldr	r2, [pc, #12]	@ (8004080 <HAL_IncTick+0x10>)
 8004072:	4b04      	ldr	r3, [pc, #16]	@ (8004084 <HAL_IncTick+0x14>)
 8004074:	6811      	ldr	r1, [r2, #0]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	440b      	add	r3, r1
 800407a:	6013      	str	r3, [r2, #0]
}
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	20002530 	.word	0x20002530
 8004084:	20000010 	.word	0x20000010

08004088 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004088:	4b01      	ldr	r3, [pc, #4]	@ (8004090 <HAL_GetTick+0x8>)
 800408a:	6818      	ldr	r0, [r3, #0]
}
 800408c:	4770      	bx	lr
 800408e:	bf00      	nop
 8004090:	20002530 	.word	0x20002530

08004094 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004094:	4907      	ldr	r1, [pc, #28]	@ (80040b4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004096:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004098:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800409a:	f64f 00ff 	movw	r0, #63743	@ 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800409e:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040a2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040a4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040a6:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80040ae:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80040b0:	4770      	bx	lr
 80040b2:	bf00      	nop
 80040b4:	e000ed00 	.word	0xe000ed00

080040b8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004128 <HAL_NVIC_SetPriority+0x70>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80040c0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c2:	f1c3 0e07 	rsb	lr, r3, #7
 80040c6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ca:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040ce:	bf28      	it	cs
 80040d0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d4:	f1bc 0f06 	cmp.w	ip, #6
 80040d8:	d91c      	bls.n	8004114 <HAL_NVIC_SetPriority+0x5c>
 80040da:	f1a3 0c03 	sub.w	ip, r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040e2:	fa03 f30c 	lsl.w	r3, r3, ip
 80040e6:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040ee:	fa03 f30e 	lsl.w	r3, r3, lr
 80040f2:	ea21 0303 	bic.w	r3, r1, r3
 80040f6:	fa03 f30c 	lsl.w	r3, r3, ip
 80040fa:	4313      	orrs	r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fc:	011b      	lsls	r3, r3, #4
  if ((int32_t)(IRQn) >= 0)
 80040fe:	2800      	cmp	r0, #0
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004100:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8004102:	db0a      	blt.n	800411a <HAL_NVIC_SetPriority+0x62>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004104:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8004108:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 800410c:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004110:	f85d fb04 	ldr.w	pc, [sp], #4
 8004114:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004116:	4694      	mov	ip, r2
 8004118:	e7e7      	b.n	80040ea <HAL_NVIC_SetPriority+0x32>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800411a:	4a04      	ldr	r2, [pc, #16]	@ (800412c <HAL_NVIC_SetPriority+0x74>)
 800411c:	f000 000f 	and.w	r0, r0, #15
 8004120:	4402      	add	r2, r0
 8004122:	7613      	strb	r3, [r2, #24]
 8004124:	f85d fb04 	ldr.w	pc, [sp], #4
 8004128:	e000ed00 	.word	0xe000ed00
 800412c:	e000ecfc 	.word	0xe000ecfc

08004130 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004130:	3801      	subs	r0, #1
 8004132:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8004136:	d301      	bcc.n	800413c <HAL_SYSTICK_Config+0xc>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004138:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800413a:	4770      	bx	lr
{
 800413c:	b410      	push	{r4}
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800413e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004142:	4c07      	ldr	r4, [pc, #28]	@ (8004160 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004144:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004146:	f04f 0cf0 	mov.w	ip, #240	@ 0xf0
 800414a:	f884 c023 	strb.w	ip, [r4, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800414e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004150:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004152:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004154:	619a      	str	r2, [r3, #24]
}
 8004156:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800415a:	6119      	str	r1, [r3, #16]
 800415c:	4770      	bx	lr
 800415e:	bf00      	nop
 8004160:	e000ed00 	.word	0xe000ed00

08004164 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004168:	4aa4      	ldr	r2, [pc, #656]	@ (80043fc <HAL_GPIO_Init+0x298>)
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800416a:	680b      	ldr	r3, [r1, #0]
 800416c:	4290      	cmp	r0, r2
{
 800416e:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004170:	f04f 0200 	mov.w	r2, #0
 8004174:	f000 80d4 	beq.w	8004320 <HAL_GPIO_Init+0x1bc>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004178:	f8df 8290 	ldr.w	r8, [pc, #656]	@ 800440c <HAL_GPIO_Init+0x2a8>
    ioposition = 0x01U << position;
 800417c:	f04f 0b01 	mov.w	fp, #1
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004180:	468a      	mov	sl, r1
 8004182:	e003      	b.n	800418c <HAL_GPIO_Init+0x28>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004184:	3201      	adds	r2, #1
 8004186:	2a10      	cmp	r2, #16
 8004188:	f000 809e 	beq.w	80042c8 <HAL_GPIO_Init+0x164>
    ioposition = 0x01U << position;
 800418c:	fa0b f102 	lsl.w	r1, fp, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004190:	ea01 0603 	and.w	r6, r1, r3
    if(iocurrent == ioposition)
 8004194:	4399      	bics	r1, r3
 8004196:	d1f5      	bne.n	8004184 <HAL_GPIO_Init+0x20>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004198:	f8da 4004 	ldr.w	r4, [sl, #4]
 800419c:	f004 0c03 	and.w	ip, r4, #3
 80041a0:	0051      	lsls	r1, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a2:	2503      	movs	r5, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041a4:	f10c 37ff 	add.w	r7, ip, #4294967295	@ 0xffffffff
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041a8:	408d      	lsls	r5, r1
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041aa:	2f01      	cmp	r7, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80041ac:	ea6f 0505 	mvn.w	r5, r5
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80041b0:	d950      	bls.n	8004254 <HAL_GPIO_Init+0xf0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80041b2:	f1bc 0f03 	cmp.w	ip, #3
 80041b6:	f040 81a5 	bne.w	8004504 <HAL_GPIO_Init+0x3a0>
      temp = GPIOx->MODER;
 80041ba:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041bc:	fa0c f101 	lsl.w	r1, ip, r1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80041c0:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80041c2:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041c4:	f414 3f40 	tst.w	r4, #196608	@ 0x30000
      GPIOx->MODER = temp;
 80041c8:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80041ca:	d0db      	beq.n	8004184 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80041cc:	4d8c      	ldr	r5, [pc, #560]	@ (8004400 <HAL_GPIO_Init+0x29c>)
 80041ce:	2100      	movs	r1, #0
 80041d0:	9103      	str	r1, [sp, #12]
 80041d2:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80041d4:	f441 4180 	orr.w	r1, r1, #16384	@ 0x4000
 80041d8:	6469      	str	r1, [r5, #68]	@ 0x44
 80041da:	6c69      	ldr	r1, [r5, #68]	@ 0x44
 80041dc:	f401 4180 	and.w	r1, r1, #16384	@ 0x4000
 80041e0:	9103      	str	r1, [sp, #12]
 80041e2:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 80041e4:	f022 0103 	bic.w	r1, r2, #3
 80041e8:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 80041ec:	f501 319c 	add.w	r1, r1, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f0:	f002 0703 	and.w	r7, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80041f4:	688d      	ldr	r5, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80041f6:	00bf      	lsls	r7, r7, #2
 80041f8:	f04f 0c0f 	mov.w	ip, #15
 80041fc:	fa0c fc07 	lsl.w	ip, ip, r7
 8004200:	ea25 0e0c 	bic.w	lr, r5, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004204:	4d7f      	ldr	r5, [pc, #508]	@ (8004404 <HAL_GPIO_Init+0x2a0>)
 8004206:	42a8      	cmp	r0, r5
 8004208:	d061      	beq.n	80042ce <HAL_GPIO_Init+0x16a>
 800420a:	4d7f      	ldr	r5, [pc, #508]	@ (8004408 <HAL_GPIO_Init+0x2a4>)
 800420c:	42a8      	cmp	r0, r5
 800420e:	f000 8156 	beq.w	80044be <HAL_GPIO_Init+0x35a>
 8004212:	f8df c1fc 	ldr.w	ip, [pc, #508]	@ 8004410 <HAL_GPIO_Init+0x2ac>
 8004216:	4560      	cmp	r0, ip
 8004218:	f000 8158 	beq.w	80044cc <HAL_GPIO_Init+0x368>
 800421c:	f8df c1f4 	ldr.w	ip, [pc, #500]	@ 8004414 <HAL_GPIO_Init+0x2b0>
 8004220:	4560      	cmp	r0, ip
 8004222:	f000 8161 	beq.w	80044e8 <HAL_GPIO_Init+0x384>
 8004226:	f8df c1f0 	ldr.w	ip, [pc, #496]	@ 8004418 <HAL_GPIO_Init+0x2b4>
 800422a:	4560      	cmp	r0, ip
 800422c:	f000 8163 	beq.w	80044f6 <HAL_GPIO_Init+0x392>
 8004230:	f8df c1e8 	ldr.w	ip, [pc, #488]	@ 800441c <HAL_GPIO_Init+0x2b8>
 8004234:	4560      	cmp	r0, ip
 8004236:	f000 8150 	beq.w	80044da <HAL_GPIO_Init+0x376>
 800423a:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8004420 <HAL_GPIO_Init+0x2bc>
 800423e:	4560      	cmp	r0, ip
 8004240:	bf0c      	ite	eq
 8004242:	f04f 0c07 	moveq.w	ip, #7
 8004246:	f04f 0c08 	movne.w	ip, #8
 800424a:	fa0c f707 	lsl.w	r7, ip, r7
 800424e:	ea4e 0507 	orr.w	r5, lr, r7
 8004252:	e042      	b.n	80042da <HAL_GPIO_Init+0x176>
        temp = GPIOx->OSPEEDR; 
 8004254:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004256:	ea07 0e05 	and.w	lr, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 800425a:	f8da 700c 	ldr.w	r7, [sl, #12]
 800425e:	408f      	lsls	r7, r1
 8004260:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OSPEEDR = temp;
 8004264:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004266:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004268:	ea27 0e06 	bic.w	lr, r7, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800426c:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8004270:	4097      	lsls	r7, r2
 8004272:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004276:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004278:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800427a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800427e:	f8da 7008 	ldr.w	r7, [sl, #8]
 8004282:	408f      	lsls	r7, r1
 8004284:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004288:	f1bc 0f02 	cmp.w	ip, #2
        GPIOx->PUPDR = temp;
 800428c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800428e:	d194      	bne.n	80041ba <HAL_GPIO_Init+0x56>
        temp = GPIOx->AFR[position >> 3U];
 8004290:	ea4f 09d2 	mov.w	r9, r2, lsr #3
 8004294:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004298:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 800429c:	f8d9 7020 	ldr.w	r7, [r9, #32]
 80042a0:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042a2:	f8da 7010 	ldr.w	r7, [sl, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042a6:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042aa:	fa07 f70e 	lsl.w	r7, r7, lr
 80042ae:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80042b0:	270f      	movs	r7, #15
 80042b2:	fa07 fe0e 	lsl.w	lr, r7, lr
 80042b6:	9f00      	ldr	r7, [sp, #0]
 80042b8:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80042bc:	9f01      	ldr	r7, [sp, #4]
 80042be:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80042c2:	f8c9 7020 	str.w	r7, [r9, #32]
 80042c6:	e778      	b.n	80041ba <HAL_GPIO_Init+0x56>
        }
        EXTI->IMR = temp;
      }
    }
  }
}
 80042c8:	b005      	add	sp, #20
 80042ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ce:	f04f 0c01 	mov.w	ip, #1
 80042d2:	fa0c f707 	lsl.w	r7, ip, r7
 80042d6:	ea4e 0507 	orr.w	r5, lr, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042da:	608d      	str	r5, [r1, #8]
        temp = EXTI->RTSR;
 80042dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
        temp &= ~((uint32_t)iocurrent);
 80042e0:	43f5      	mvns	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80042e2:	02e7      	lsls	r7, r4, #11
        temp &= ~((uint32_t)iocurrent);
 80042e4:	bf54      	ite	pl
 80042e6:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80042e8:	4331      	orrmi	r1, r6
        EXTI->RTSR = temp;
 80042ea:	f8c8 1008 	str.w	r1, [r8, #8]
        temp = EXTI->FTSR;
 80042ee:	f8d8 100c 	ldr.w	r1, [r8, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80042f2:	02a7      	lsls	r7, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80042f4:	bf54      	ite	pl
 80042f6:	4029      	andpl	r1, r5
          temp |= iocurrent;
 80042f8:	4331      	orrmi	r1, r6
        EXTI->FTSR = temp;
 80042fa:	f8c8 100c 	str.w	r1, [r8, #12]
        temp = EXTI->EMR;
 80042fe:	f8d8 1004 	ldr.w	r1, [r8, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004302:	03a7      	lsls	r7, r4, #14
        temp &= ~((uint32_t)iocurrent);
 8004304:	bf54      	ite	pl
 8004306:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004308:	4331      	orrmi	r1, r6
        EXTI->EMR = temp;
 800430a:	f8c8 1004 	str.w	r1, [r8, #4]
        temp = EXTI->IMR;
 800430e:	f8d8 1000 	ldr.w	r1, [r8]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004312:	03e4      	lsls	r4, r4, #15
        temp &= ~((uint32_t)iocurrent);
 8004314:	bf54      	ite	pl
 8004316:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8004318:	4331      	orrmi	r1, r6
        EXTI->IMR = temp;
 800431a:	f8c8 1000 	str.w	r1, [r8]
 800431e:	e731      	b.n	8004184 <HAL_GPIO_Init+0x20>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004320:	f8df b0dc 	ldr.w	fp, [pc, #220]	@ 8004400 <HAL_GPIO_Init+0x29c>
    ioposition = 0x01U << position;
 8004324:	f04f 0a01 	mov.w	sl, #1
 8004328:	e002      	b.n	8004330 <HAL_GPIO_Init+0x1cc>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800432a:	3201      	adds	r2, #1
 800432c:	2a10      	cmp	r2, #16
 800432e:	d0cb      	beq.n	80042c8 <HAL_GPIO_Init+0x164>
    ioposition = 0x01U << position;
 8004330:	fa0a f402 	lsl.w	r4, sl, r2
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004334:	ea03 0604 	and.w	r6, r3, r4
    if(iocurrent == ioposition)
 8004338:	439c      	bics	r4, r3
 800433a:	d1f6      	bne.n	800432a <HAL_GPIO_Init+0x1c6>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800433c:	684d      	ldr	r5, [r1, #4]
 800433e:	0054      	lsls	r4, r2, #1
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004340:	2703      	movs	r7, #3
 8004342:	fa07 fc04 	lsl.w	ip, r7, r4
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004346:	f005 0803 	and.w	r8, r5, #3
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800434a:	ea6f 090c 	mvn.w	r9, ip
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800434e:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8004352:	f1bc 0f01 	cmp.w	ip, #1
 8004356:	d965      	bls.n	8004424 <HAL_GPIO_Init+0x2c0>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004358:	f1b8 0f03 	cmp.w	r8, #3
 800435c:	f040 80dc 	bne.w	8004518 <HAL_GPIO_Init+0x3b4>
      temp = GPIOx->MODER;
 8004360:	f8d0 c000 	ldr.w	ip, [r0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004364:	fa08 f404 	lsl.w	r4, r8, r4
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004368:	ea0c 0c09 	and.w	ip, ip, r9
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800436c:	ea44 040c 	orr.w	r4, r4, ip
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004370:	f415 3f40 	tst.w	r5, #196608	@ 0x30000
      GPIOx->MODER = temp;
 8004374:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004376:	d0d8      	beq.n	800432a <HAL_GPIO_Init+0x1c6>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004378:	2400      	movs	r4, #0
 800437a:	9403      	str	r4, [sp, #12]
 800437c:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 8004380:	f444 4480 	orr.w	r4, r4, #16384	@ 0x4000
 8004384:	f8cb 4044 	str.w	r4, [fp, #68]	@ 0x44
 8004388:	f8db 4044 	ldr.w	r4, [fp, #68]	@ 0x44
 800438c:	f404 4480 	and.w	r4, r4, #16384	@ 0x4000
 8004390:	9403      	str	r4, [sp, #12]
 8004392:	9c03      	ldr	r4, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004394:	f022 0403 	bic.w	r4, r2, #3
 8004398:	f104 4480 	add.w	r4, r4, #1073741824	@ 0x40000000
 800439c:	f504 349c 	add.w	r4, r4, #79872	@ 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a0:	f002 0c03 	and.w	ip, r2, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 80043a4:	f8d4 e008 	ldr.w	lr, [r4, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80043a8:	270f      	movs	r7, #15
 80043aa:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 80043ae:	fa07 fc0c 	lsl.w	ip, r7, ip
 80043b2:	ea2e 0c0c 	bic.w	ip, lr, ip
        SYSCFG->EXTICR[position >> 2U] = temp;
 80043b6:	f8c4 c008 	str.w	ip, [r4, #8]
        temp = EXTI->RTSR;
 80043ba:	4c14      	ldr	r4, [pc, #80]	@ (800440c <HAL_GPIO_Init+0x2a8>)
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043bc:	02ef      	lsls	r7, r5, #11
        temp = EXTI->RTSR;
 80043be:	68a4      	ldr	r4, [r4, #8]
        temp &= ~((uint32_t)iocurrent);
 80043c0:	ea6f 0c06 	mvn.w	ip, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80043c4:	d479      	bmi.n	80044ba <HAL_GPIO_Init+0x356>
        temp &= ~((uint32_t)iocurrent);
 80043c6:	ea04 040c 	and.w	r4, r4, ip
        EXTI->RTSR = temp;
 80043ca:	4f10      	ldr	r7, [pc, #64]	@ (800440c <HAL_GPIO_Init+0x2a8>)
 80043cc:	60bc      	str	r4, [r7, #8]
        temp = EXTI->FTSR;
 80043ce:	68fc      	ldr	r4, [r7, #12]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80043d0:	02af      	lsls	r7, r5, #10
 80043d2:	d470      	bmi.n	80044b6 <HAL_GPIO_Init+0x352>
        temp &= ~((uint32_t)iocurrent);
 80043d4:	ea04 040c 	and.w	r4, r4, ip
        EXTI->FTSR = temp;
 80043d8:	4f0c      	ldr	r7, [pc, #48]	@ (800440c <HAL_GPIO_Init+0x2a8>)
 80043da:	60fc      	str	r4, [r7, #12]
        temp = EXTI->EMR;
 80043dc:	687c      	ldr	r4, [r7, #4]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80043de:	03af      	lsls	r7, r5, #14
 80043e0:	d467      	bmi.n	80044b2 <HAL_GPIO_Init+0x34e>
        temp &= ~((uint32_t)iocurrent);
 80043e2:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->EMR = temp;
 80043e6:	4f09      	ldr	r7, [pc, #36]	@ (800440c <HAL_GPIO_Init+0x2a8>)
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043e8:	03ed      	lsls	r5, r5, #15
        EXTI->EMR = temp;
 80043ea:	607c      	str	r4, [r7, #4]
        temp = EXTI->IMR;
 80043ec:	683c      	ldr	r4, [r7, #0]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80043ee:	d45e      	bmi.n	80044ae <HAL_GPIO_Init+0x34a>
        temp &= ~((uint32_t)iocurrent);
 80043f0:	ea0c 0404 	and.w	r4, ip, r4
        EXTI->IMR = temp;
 80043f4:	4d05      	ldr	r5, [pc, #20]	@ (800440c <HAL_GPIO_Init+0x2a8>)
 80043f6:	602c      	str	r4, [r5, #0]
 80043f8:	e797      	b.n	800432a <HAL_GPIO_Init+0x1c6>
 80043fa:	bf00      	nop
 80043fc:	40020000 	.word	0x40020000
 8004400:	40023800 	.word	0x40023800
 8004404:	40020400 	.word	0x40020400
 8004408:	40020800 	.word	0x40020800
 800440c:	40013c00 	.word	0x40013c00
 8004410:	40020c00 	.word	0x40020c00
 8004414:	40021000 	.word	0x40021000
 8004418:	40021400 	.word	0x40021400
 800441c:	40021800 	.word	0x40021800
 8004420:	40021c00 	.word	0x40021c00
        temp = GPIOx->OSPEEDR; 
 8004424:	f8d0 e008 	ldr.w	lr, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004428:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800442a:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 800442e:	fa07 fc04 	lsl.w	ip, r7, r4
 8004432:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OSPEEDR = temp;
 8004436:	f8c0 c008 	str.w	ip, [r0, #8]
        temp = GPIOx->OTYPER;
 800443a:	f8d0 e004 	ldr.w	lr, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800443e:	f3c5 1c00 	ubfx	ip, r5, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004442:	ea2e 0e06 	bic.w	lr, lr, r6
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004446:	fa0c fc02 	lsl.w	ip, ip, r2
 800444a:	ea4c 0c0e 	orr.w	ip, ip, lr
        GPIOx->OTYPER = temp;
 800444e:	f8c0 c004 	str.w	ip, [r0, #4]
        temp = GPIOx->PUPDR;
 8004452:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004456:	688f      	ldr	r7, [r1, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004458:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800445c:	fa07 fc04 	lsl.w	ip, r7, r4
 8004460:	ea4c 0c0e 	orr.w	ip, ip, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004464:	f1b8 0f02 	cmp.w	r8, #2
        GPIOx->PUPDR = temp;
 8004468:	f8c0 c00c 	str.w	ip, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800446c:	f47f af78 	bne.w	8004360 <HAL_GPIO_Init+0x1fc>
        temp = GPIOx->AFR[position >> 3U];
 8004470:	ea4f 0cd2 	mov.w	ip, r2, lsr #3
 8004474:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8004478:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 800447c:	f50c 3c00 	add.w	ip, ip, #131072	@ 0x20000
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004480:	f002 0e07 	and.w	lr, r2, #7
        temp = GPIOx->AFR[position >> 3U];
 8004484:	f8dc 7020 	ldr.w	r7, [ip, #32]
 8004488:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800448a:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800448c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004490:	fa07 f70e 	lsl.w	r7, r7, lr
 8004494:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004496:	270f      	movs	r7, #15
 8004498:	fa07 fe0e 	lsl.w	lr, r7, lr
 800449c:	9f00      	ldr	r7, [sp, #0]
 800449e:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80044a2:	9f01      	ldr	r7, [sp, #4]
 80044a4:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->AFR[position >> 3U] = temp;
 80044a8:	f8cc e020 	str.w	lr, [ip, #32]
 80044ac:	e758      	b.n	8004360 <HAL_GPIO_Init+0x1fc>
          temp |= iocurrent;
 80044ae:	4334      	orrs	r4, r6
 80044b0:	e7a0      	b.n	80043f4 <HAL_GPIO_Init+0x290>
          temp |= iocurrent;
 80044b2:	4334      	orrs	r4, r6
 80044b4:	e797      	b.n	80043e6 <HAL_GPIO_Init+0x282>
          temp |= iocurrent;
 80044b6:	4334      	orrs	r4, r6
 80044b8:	e78e      	b.n	80043d8 <HAL_GPIO_Init+0x274>
          temp |= iocurrent;
 80044ba:	4334      	orrs	r4, r6
 80044bc:	e785      	b.n	80043ca <HAL_GPIO_Init+0x266>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80044be:	f04f 0c02 	mov.w	ip, #2
 80044c2:	fa0c f707 	lsl.w	r7, ip, r7
 80044c6:	ea4e 0507 	orr.w	r5, lr, r7
 80044ca:	e706      	b.n	80042da <HAL_GPIO_Init+0x176>
 80044cc:	f04f 0c03 	mov.w	ip, #3
 80044d0:	fa0c f707 	lsl.w	r7, ip, r7
 80044d4:	ea4e 0507 	orr.w	r5, lr, r7
 80044d8:	e6ff      	b.n	80042da <HAL_GPIO_Init+0x176>
 80044da:	f04f 0c06 	mov.w	ip, #6
 80044de:	fa0c f707 	lsl.w	r7, ip, r7
 80044e2:	ea4e 0507 	orr.w	r5, lr, r7
 80044e6:	e6f8      	b.n	80042da <HAL_GPIO_Init+0x176>
 80044e8:	f04f 0c04 	mov.w	ip, #4
 80044ec:	fa0c f707 	lsl.w	r7, ip, r7
 80044f0:	ea4e 0507 	orr.w	r5, lr, r7
 80044f4:	e6f1      	b.n	80042da <HAL_GPIO_Init+0x176>
 80044f6:	f04f 0c05 	mov.w	ip, #5
 80044fa:	fa0c f707 	lsl.w	r7, ip, r7
 80044fe:	ea4e 0507 	orr.w	r5, lr, r7
 8004502:	e6ea      	b.n	80042da <HAL_GPIO_Init+0x176>
        temp = GPIOx->PUPDR;
 8004504:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004506:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800450a:	f8da 7008 	ldr.w	r7, [sl, #8]
 800450e:	408f      	lsls	r7, r1
 8004510:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8004514:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004516:	e650      	b.n	80041ba <HAL_GPIO_Init+0x56>
        temp = GPIOx->PUPDR;
 8004518:	f8df c018 	ldr.w	ip, [pc, #24]	@ 8004534 <HAL_GPIO_Init+0x3d0>
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800451c:	688f      	ldr	r7, [r1, #8]
        temp = GPIOx->PUPDR;
 800451e:	f8dc e00c 	ldr.w	lr, [ip, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004522:	40a7      	lsls	r7, r4
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004524:	ea09 0e0e 	and.w	lr, r9, lr
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004528:	ea47 0e0e 	orr.w	lr, r7, lr
        GPIOx->PUPDR = temp;
 800452c:	f8cc e00c 	str.w	lr, [ip, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004530:	e716      	b.n	8004360 <HAL_GPIO_Init+0x1fc>
 8004532:	bf00      	nop
 8004534:	40020000 	.word	0x40020000

08004538 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004538:	b902      	cbnz	r2, 800453c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800453a:	0409      	lsls	r1, r1, #16
 800453c:	6181      	str	r1, [r0, #24]
  }
}
 800453e:	4770      	bx	lr

08004540 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004540:	2800      	cmp	r0, #0
 8004542:	f000 81d8 	beq.w	80048f6 <HAL_RCC_OscConfig+0x3b6>
{
 8004546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800454a:	6803      	ldr	r3, [r0, #0]
 800454c:	07dd      	lsls	r5, r3, #31
{
 800454e:	b082      	sub	sp, #8
 8004550:	4604      	mov	r4, r0
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004552:	d52f      	bpl.n	80045b4 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004554:	499d      	ldr	r1, [pc, #628]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 8004556:	688a      	ldr	r2, [r1, #8]
 8004558:	f002 020c 	and.w	r2, r2, #12
 800455c:	2a04      	cmp	r2, #4
 800455e:	f000 80ec 	beq.w	800473a <HAL_RCC_OscConfig+0x1fa>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004562:	688a      	ldr	r2, [r1, #8]
 8004564:	f002 020c 	and.w	r2, r2, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004568:	2a08      	cmp	r2, #8
 800456a:	f000 80e2 	beq.w	8004732 <HAL_RCC_OscConfig+0x1f2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004574:	f000 80eb 	beq.w	800474e <HAL_RCC_OscConfig+0x20e>
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800457c:	f000 8173 	beq.w	8004866 <HAL_RCC_OscConfig+0x326>
 8004580:	4d92      	ldr	r5, [pc, #584]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 8004582:	682a      	ldr	r2, [r5, #0]
 8004584:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004588:	602a      	str	r2, [r5, #0]
 800458a:	682a      	ldr	r2, [r5, #0]
 800458c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004590:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004592:	2b00      	cmp	r3, #0
 8004594:	f040 80e0 	bne.w	8004758 <HAL_RCC_OscConfig+0x218>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004598:	f7ff fd76 	bl	8004088 <HAL_GetTick>
 800459c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459e:	e005      	b.n	80045ac <HAL_RCC_OscConfig+0x6c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045a0:	f7ff fd72 	bl	8004088 <HAL_GetTick>
 80045a4:	1b80      	subs	r0, r0, r6
 80045a6:	2864      	cmp	r0, #100	@ 0x64
 80045a8:	f200 8100 	bhi.w	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ac:	682b      	ldr	r3, [r5, #0]
 80045ae:	039f      	lsls	r7, r3, #14
 80045b0:	d4f6      	bmi.n	80045a0 <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045b2:	6823      	ldr	r3, [r4, #0]
 80045b4:	079d      	lsls	r5, r3, #30
 80045b6:	d528      	bpl.n	800460a <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045b8:	4a84      	ldr	r2, [pc, #528]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 80045ba:	6891      	ldr	r1, [r2, #8]
 80045bc:	f011 0f0c 	tst.w	r1, #12
 80045c0:	f000 809b 	beq.w	80046fa <HAL_RCC_OscConfig+0x1ba>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045c4:	6891      	ldr	r1, [r2, #8]
 80045c6:	f001 010c 	and.w	r1, r1, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80045ca:	2908      	cmp	r1, #8
 80045cc:	f000 8091 	beq.w	80046f2 <HAL_RCC_OscConfig+0x1b2>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80045d0:	68e3      	ldr	r3, [r4, #12]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f000 810c 	beq.w	80047f0 <HAL_RCC_OscConfig+0x2b0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045d8:	4b7d      	ldr	r3, [pc, #500]	@ (80047d0 <HAL_RCC_OscConfig+0x290>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045da:	4e7c      	ldr	r6, [pc, #496]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
        __HAL_RCC_HSI_ENABLE();
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80045e0:	f7ff fd52 	bl	8004088 <HAL_GetTick>
 80045e4:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045e6:	e005      	b.n	80045f4 <HAL_RCC_OscConfig+0xb4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045e8:	f7ff fd4e 	bl	8004088 <HAL_GetTick>
 80045ec:	1b40      	subs	r0, r0, r5
 80045ee:	2802      	cmp	r0, #2
 80045f0:	f200 80dc 	bhi.w	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045f4:	6833      	ldr	r3, [r6, #0]
 80045f6:	079f      	lsls	r7, r3, #30
 80045f8:	d5f6      	bpl.n	80045e8 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045fa:	6833      	ldr	r3, [r6, #0]
 80045fc:	6922      	ldr	r2, [r4, #16]
 80045fe:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8004602:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004606:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004608:	6823      	ldr	r3, [r4, #0]
 800460a:	071a      	lsls	r2, r3, #28
 800460c:	d45c      	bmi.n	80046c8 <HAL_RCC_OscConfig+0x188>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800460e:	075d      	lsls	r5, r3, #29
 8004610:	d53a      	bpl.n	8004688 <HAL_RCC_OscConfig+0x148>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4a6e      	ldr	r2, [pc, #440]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 8004614:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004616:	f013 5380 	ands.w	r3, r3, #268435456	@ 0x10000000
 800461a:	f040 8088 	bne.w	800472e <HAL_RCC_OscConfig+0x1ee>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	9301      	str	r3, [sp, #4]
 8004620:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8004622:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004626:	6413      	str	r3, [r2, #64]	@ 0x40
 8004628:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800462a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800462e:	9301      	str	r3, [sp, #4]
 8004630:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004632:	2501      	movs	r5, #1
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004634:	4e67      	ldr	r6, [pc, #412]	@ (80047d4 <HAL_RCC_OscConfig+0x294>)
 8004636:	6833      	ldr	r3, [r6, #0]
 8004638:	05d8      	lsls	r0, r3, #23
 800463a:	f140 80a7 	bpl.w	800478c <HAL_RCC_OscConfig+0x24c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800463e:	68a3      	ldr	r3, [r4, #8]
 8004640:	2b01      	cmp	r3, #1
 8004642:	f000 80b7 	beq.w	80047b4 <HAL_RCC_OscConfig+0x274>
 8004646:	2b05      	cmp	r3, #5
 8004648:	f000 811d 	beq.w	8004886 <HAL_RCC_OscConfig+0x346>
 800464c:	4e5f      	ldr	r6, [pc, #380]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 800464e:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004650:	f022 0201 	bic.w	r2, r2, #1
 8004654:	6732      	str	r2, [r6, #112]	@ 0x70
 8004656:	6f32      	ldr	r2, [r6, #112]	@ 0x70
 8004658:	f022 0204 	bic.w	r2, r2, #4
 800465c:	6732      	str	r2, [r6, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800465e:	2b00      	cmp	r3, #0
 8004660:	f040 80ad 	bne.w	80047be <HAL_RCC_OscConfig+0x27e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004664:	f7ff fd10 	bl	8004088 <HAL_GetTick>

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004668:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800466c:	4607      	mov	r7, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466e:	e005      	b.n	800467c <HAL_RCC_OscConfig+0x13c>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7ff fd0a 	bl	8004088 <HAL_GetTick>
 8004674:	1bc0      	subs	r0, r0, r7
 8004676:	4540      	cmp	r0, r8
 8004678:	f200 8098 	bhi.w	80047ac <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800467c:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800467e:	079b      	lsls	r3, r3, #30
 8004680:	d4f6      	bmi.n	8004670 <HAL_RCC_OscConfig+0x130>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004682:	2d00      	cmp	r5, #0
 8004684:	f040 80f9 	bne.w	800487a <HAL_RCC_OscConfig+0x33a>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004688:	69a3      	ldr	r3, [r4, #24]
 800468a:	b1cb      	cbz	r3, 80046c0 <HAL_RCC_OscConfig+0x180>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800468c:	4d4f      	ldr	r5, [pc, #316]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 800468e:	68aa      	ldr	r2, [r5, #8]
 8004690:	f002 020c 	and.w	r2, r2, #12
 8004694:	2a08      	cmp	r2, #8
 8004696:	f000 80bc 	beq.w	8004812 <HAL_RCC_OscConfig+0x2d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800469a:	2b02      	cmp	r3, #2
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800469c:	4b4c      	ldr	r3, [pc, #304]	@ (80047d0 <HAL_RCC_OscConfig+0x290>)
 800469e:	f04f 0200 	mov.w	r2, #0
 80046a2:	661a      	str	r2, [r3, #96]	@ 0x60
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046a4:	f000 80f9 	beq.w	800489a <HAL_RCC_OscConfig+0x35a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046a8:	f7ff fcee 	bl	8004088 <HAL_GetTick>
 80046ac:	4604      	mov	r4, r0

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ae:	e004      	b.n	80046ba <HAL_RCC_OscConfig+0x17a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80046b0:	f7ff fcea 	bl	8004088 <HAL_GetTick>
 80046b4:	1b00      	subs	r0, r0, r4
 80046b6:	2802      	cmp	r0, #2
 80046b8:	d878      	bhi.n	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ba:	682b      	ldr	r3, [r5, #0]
 80046bc:	019b      	lsls	r3, r3, #6
 80046be:	d4f7      	bmi.n	80046b0 <HAL_RCC_OscConfig+0x170>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80046c0:	2000      	movs	r0, #0
}
 80046c2:	b002      	add	sp, #8
 80046c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80046c8:	6963      	ldr	r3, [r4, #20]
 80046ca:	b1fb      	cbz	r3, 800470c <HAL_RCC_OscConfig+0x1cc>
      __HAL_RCC_LSI_ENABLE();
 80046cc:	4b40      	ldr	r3, [pc, #256]	@ (80047d0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ce:	4e3f      	ldr	r6, [pc, #252]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_ENABLE();
 80046d0:	2201      	movs	r2, #1
 80046d2:	f8c3 2e80 	str.w	r2, [r3, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 80046d6:	f7ff fcd7 	bl	8004088 <HAL_GetTick>
 80046da:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046dc:	e004      	b.n	80046e8 <HAL_RCC_OscConfig+0x1a8>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80046de:	f7ff fcd3 	bl	8004088 <HAL_GetTick>
 80046e2:	1b40      	subs	r0, r0, r5
 80046e4:	2802      	cmp	r0, #2
 80046e6:	d861      	bhi.n	80047ac <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046e8:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 80046ea:	079b      	lsls	r3, r3, #30
 80046ec:	d5f7      	bpl.n	80046de <HAL_RCC_OscConfig+0x19e>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046ee:	6823      	ldr	r3, [r4, #0]
 80046f0:	e78d      	b.n	800460e <HAL_RCC_OscConfig+0xce>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80046f2:	6852      	ldr	r2, [r2, #4]
 80046f4:	0251      	lsls	r1, r2, #9
 80046f6:	f53f af6b 	bmi.w	80045d0 <HAL_RCC_OscConfig+0x90>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046fa:	4a34      	ldr	r2, [pc, #208]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 80046fc:	6812      	ldr	r2, [r2, #0]
 80046fe:	0792      	lsls	r2, r2, #30
 8004700:	d538      	bpl.n	8004774 <HAL_RCC_OscConfig+0x234>
 8004702:	68e2      	ldr	r2, [r4, #12]
 8004704:	2a01      	cmp	r2, #1
 8004706:	d035      	beq.n	8004774 <HAL_RCC_OscConfig+0x234>
    return HAL_ERROR;
 8004708:	2001      	movs	r0, #1
 800470a:	e7da      	b.n	80046c2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_LSI_DISABLE();
 800470c:	4a30      	ldr	r2, [pc, #192]	@ (80047d0 <HAL_RCC_OscConfig+0x290>)
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800470e:	4e2f      	ldr	r6, [pc, #188]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
      __HAL_RCC_LSI_DISABLE();
 8004710:	f8c2 3e80 	str.w	r3, [r2, #3712]	@ 0xe80
      tickstart = HAL_GetTick();
 8004714:	f7ff fcb8 	bl	8004088 <HAL_GetTick>
 8004718:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471a:	e004      	b.n	8004726 <HAL_RCC_OscConfig+0x1e6>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800471c:	f7ff fcb4 	bl	8004088 <HAL_GetTick>
 8004720:	1b40      	subs	r0, r0, r5
 8004722:	2802      	cmp	r0, #2
 8004724:	d842      	bhi.n	80047ac <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004726:	6f73      	ldr	r3, [r6, #116]	@ 0x74
 8004728:	079f      	lsls	r7, r3, #30
 800472a:	d4f7      	bmi.n	800471c <HAL_RCC_OscConfig+0x1dc>
 800472c:	e7df      	b.n	80046ee <HAL_RCC_OscConfig+0x1ae>
    FlagStatus       pwrclkchanged = RESET;
 800472e:	2500      	movs	r5, #0
 8004730:	e780      	b.n	8004634 <HAL_RCC_OscConfig+0xf4>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004732:	684a      	ldr	r2, [r1, #4]
 8004734:	0251      	lsls	r1, r2, #9
 8004736:	f57f af1a 	bpl.w	800456e <HAL_RCC_OscConfig+0x2e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800473a:	4a24      	ldr	r2, [pc, #144]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 800473c:	6812      	ldr	r2, [r2, #0]
 800473e:	0392      	lsls	r2, r2, #14
 8004740:	f57f af38 	bpl.w	80045b4 <HAL_RCC_OscConfig+0x74>
 8004744:	6862      	ldr	r2, [r4, #4]
 8004746:	2a00      	cmp	r2, #0
 8004748:	f47f af34 	bne.w	80045b4 <HAL_RCC_OscConfig+0x74>
 800474c:	e7dc      	b.n	8004708 <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800474e:	4a1f      	ldr	r2, [pc, #124]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 8004750:	6813      	ldr	r3, [r2, #0]
 8004752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004756:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004758:	f7ff fc96 	bl	8004088 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800475c:	4e1b      	ldr	r6, [pc, #108]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
        tickstart = HAL_GetTick();
 800475e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004760:	e004      	b.n	800476c <HAL_RCC_OscConfig+0x22c>
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004762:	f7ff fc91 	bl	8004088 <HAL_GetTick>
 8004766:	1b40      	subs	r0, r0, r5
 8004768:	2864      	cmp	r0, #100	@ 0x64
 800476a:	d81f      	bhi.n	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476c:	6833      	ldr	r3, [r6, #0]
 800476e:	039b      	lsls	r3, r3, #14
 8004770:	d5f7      	bpl.n	8004762 <HAL_RCC_OscConfig+0x222>
 8004772:	e71e      	b.n	80045b2 <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004774:	4915      	ldr	r1, [pc, #84]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 8004776:	6920      	ldr	r0, [r4, #16]
 8004778:	680a      	ldr	r2, [r1, #0]
 800477a:	f022 02f8 	bic.w	r2, r2, #248	@ 0xf8
 800477e:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004782:	600a      	str	r2, [r1, #0]
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004784:	071a      	lsls	r2, r3, #28
 8004786:	f57f af42 	bpl.w	800460e <HAL_RCC_OscConfig+0xce>
 800478a:	e79d      	b.n	80046c8 <HAL_RCC_OscConfig+0x188>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800478c:	6833      	ldr	r3, [r6, #0]
 800478e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004792:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004794:	f7ff fc78 	bl	8004088 <HAL_GetTick>
 8004798:	4607      	mov	r7, r0
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	6833      	ldr	r3, [r6, #0]
 800479c:	05d9      	lsls	r1, r3, #23
 800479e:	f53f af4e 	bmi.w	800463e <HAL_RCC_OscConfig+0xfe>
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a2:	f7ff fc71 	bl	8004088 <HAL_GetTick>
 80047a6:	1bc0      	subs	r0, r0, r7
 80047a8:	2802      	cmp	r0, #2
 80047aa:	d9f6      	bls.n	800479a <HAL_RCC_OscConfig+0x25a>
            return HAL_TIMEOUT;
 80047ac:	2003      	movs	r0, #3
}
 80047ae:	b002      	add	sp, #8
 80047b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047b4:	4a05      	ldr	r2, [pc, #20]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
 80047b6:	6f13      	ldr	r3, [r2, #112]	@ 0x70
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
      tickstart = HAL_GetTick();
 80047be:	f7ff fc63 	bl	8004088 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047c2:	4f02      	ldr	r7, [pc, #8]	@ (80047cc <HAL_RCC_OscConfig+0x28c>)
      tickstart = HAL_GetTick();
 80047c4:	4606      	mov	r6, r0
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c6:	f241 3888 	movw	r8, #5000	@ 0x1388
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047ca:	e00a      	b.n	80047e2 <HAL_RCC_OscConfig+0x2a2>
 80047cc:	40023800 	.word	0x40023800
 80047d0:	42470000 	.word	0x42470000
 80047d4:	40007000 	.word	0x40007000
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047d8:	f7ff fc56 	bl	8004088 <HAL_GetTick>
 80047dc:	1b80      	subs	r0, r0, r6
 80047de:	4540      	cmp	r0, r8
 80047e0:	d8e4      	bhi.n	80047ac <HAL_RCC_OscConfig+0x26c>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80047e4:	079a      	lsls	r2, r3, #30
 80047e6:	d5f7      	bpl.n	80047d8 <HAL_RCC_OscConfig+0x298>
    if (pwrclkchanged == SET)
 80047e8:	2d00      	cmp	r5, #0
 80047ea:	f43f af4d 	beq.w	8004688 <HAL_RCC_OscConfig+0x148>
 80047ee:	e044      	b.n	800487a <HAL_RCC_OscConfig+0x33a>
        __HAL_RCC_HSI_DISABLE();
 80047f0:	4a42      	ldr	r2, [pc, #264]	@ (80048fc <HAL_RCC_OscConfig+0x3bc>)
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f2:	4e43      	ldr	r6, [pc, #268]	@ (8004900 <HAL_RCC_OscConfig+0x3c0>)
        __HAL_RCC_HSI_DISABLE();
 80047f4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80047f6:	f7ff fc47 	bl	8004088 <HAL_GetTick>
 80047fa:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047fc:	e004      	b.n	8004808 <HAL_RCC_OscConfig+0x2c8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047fe:	f7ff fc43 	bl	8004088 <HAL_GetTick>
 8004802:	1b40      	subs	r0, r0, r5
 8004804:	2802      	cmp	r0, #2
 8004806:	d8d1      	bhi.n	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004808:	6833      	ldr	r3, [r6, #0]
 800480a:	0799      	lsls	r1, r3, #30
 800480c:	d4f7      	bmi.n	80047fe <HAL_RCC_OscConfig+0x2be>
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800480e:	6823      	ldr	r3, [r4, #0]
 8004810:	e6fb      	b.n	800460a <HAL_RCC_OscConfig+0xca>
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004812:	2b01      	cmp	r3, #1
 8004814:	f43f af78 	beq.w	8004708 <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8004818:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800481a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800481c:	f403 0180 	and.w	r1, r3, #4194304	@ 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004820:	4291      	cmp	r1, r2
 8004822:	f47f af71 	bne.w	8004708 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004826:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004828:	f003 013f 	and.w	r1, r3, #63	@ 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800482c:	4291      	cmp	r1, r2
 800482e:	f47f af6b 	bne.w	8004708 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004832:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8004834:	f647 72c0 	movw	r2, #32704	@ 0x7fc0
 8004838:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800483a:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 800483e:	f47f af63 	bne.w	8004708 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004842:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8004844:	0852      	lsrs	r2, r2, #1
 8004846:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
 800484a:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800484c:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004850:	f47f af5a 	bne.w	8004708 <HAL_RCC_OscConfig+0x1c8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004854:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8004856:	f003 6370 	and.w	r3, r3, #251658240	@ 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800485a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
 800485e:	bf14      	ite	ne
 8004860:	2001      	movne	r0, #1
 8004862:	2000      	moveq	r0, #0
 8004864:	e72d      	b.n	80046c2 <HAL_RCC_OscConfig+0x182>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004866:	4b26      	ldr	r3, [pc, #152]	@ (8004900 <HAL_RCC_OscConfig+0x3c0>)
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004876:	601a      	str	r2, [r3, #0]
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004878:	e76e      	b.n	8004758 <HAL_RCC_OscConfig+0x218>
      __HAL_RCC_PWR_CLK_DISABLE();
 800487a:	4a21      	ldr	r2, [pc, #132]	@ (8004900 <HAL_RCC_OscConfig+0x3c0>)
 800487c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004882:	6413      	str	r3, [r2, #64]	@ 0x40
 8004884:	e700      	b.n	8004688 <HAL_RCC_OscConfig+0x148>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004886:	4b1e      	ldr	r3, [pc, #120]	@ (8004900 <HAL_RCC_OscConfig+0x3c0>)
 8004888:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800488a:	f042 0204 	orr.w	r2, r2, #4
 800488e:	671a      	str	r2, [r3, #112]	@ 0x70
 8004890:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004892:	f042 0201 	orr.w	r2, r2, #1
 8004896:	671a      	str	r2, [r3, #112]	@ 0x70
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004898:	e791      	b.n	80047be <HAL_RCC_OscConfig+0x27e>
        tickstart = HAL_GetTick();
 800489a:	f7ff fbf5 	bl	8004088 <HAL_GetTick>
 800489e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a0:	e005      	b.n	80048ae <HAL_RCC_OscConfig+0x36e>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7ff fbf1 	bl	8004088 <HAL_GetTick>
 80048a6:	1b80      	subs	r0, r0, r6
 80048a8:	2802      	cmp	r0, #2
 80048aa:	f63f af7f 	bhi.w	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	682b      	ldr	r3, [r5, #0]
 80048b0:	0199      	lsls	r1, r3, #6
 80048b2:	d4f6      	bmi.n	80048a2 <HAL_RCC_OscConfig+0x362>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048b4:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 80048b8:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80048ba:	430b      	orrs	r3, r1
 80048bc:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80048c0:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	@ 0x28
 80048c4:	0852      	lsrs	r2, r2, #1
        __HAL_RCC_PLL_ENABLE();
 80048c6:	490d      	ldr	r1, [pc, #52]	@ (80048fc <HAL_RCC_OscConfig+0x3bc>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048c8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80048cc:	3a01      	subs	r2, #1
 80048ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 80048d2:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048d4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 80048d6:	660a      	str	r2, [r1, #96]	@ 0x60
        tickstart = HAL_GetTick();
 80048d8:	f7ff fbd6 	bl	8004088 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	4d08      	ldr	r5, [pc, #32]	@ (8004900 <HAL_RCC_OscConfig+0x3c0>)
        tickstart = HAL_GetTick();
 80048de:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048e0:	e005      	b.n	80048ee <HAL_RCC_OscConfig+0x3ae>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e2:	f7ff fbd1 	bl	8004088 <HAL_GetTick>
 80048e6:	1b00      	subs	r0, r0, r4
 80048e8:	2802      	cmp	r0, #2
 80048ea:	f63f af5f 	bhi.w	80047ac <HAL_RCC_OscConfig+0x26c>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	019a      	lsls	r2, r3, #6
 80048f2:	d5f6      	bpl.n	80048e2 <HAL_RCC_OscConfig+0x3a2>
 80048f4:	e6e4      	b.n	80046c0 <HAL_RCC_OscConfig+0x180>
    return HAL_ERROR;
 80048f6:	2001      	movs	r0, #1
}
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	42470000 	.word	0x42470000
 8004900:	40023800 	.word	0x40023800

08004904 <HAL_RCC_GetSysClockFreq>:
  uint32_t pllvco = 0U;
  uint32_t pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004904:	4916      	ldr	r1, [pc, #88]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004906:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004908:	688b      	ldr	r3, [r1, #8]
 800490a:	f003 030c 	and.w	r3, r3, #12
 800490e:	2b04      	cmp	r3, #4
 8004910:	d01b      	beq.n	800494a <HAL_RCC_GetSysClockFreq+0x46>
 8004912:	2b08      	cmp	r3, #8
 8004914:	d001      	beq.n	800491a <HAL_RCC_GetSysClockFreq+0x16>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004916:	4813      	ldr	r0, [pc, #76]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x60>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004918:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800491a:	684a      	ldr	r2, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800491c:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800491e:	6849      	ldr	r1, [r1, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004920:	f413 0380 	ands.w	r3, r3, #4194304	@ 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004924:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004928:	d111      	bne.n	800494e <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800492a:	480e      	ldr	r0, [pc, #56]	@ (8004964 <HAL_RCC_GetSysClockFreq+0x60>)
 800492c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004930:	fba1 0100 	umull	r0, r1, r1, r0
 8004934:	f7fb fc50 	bl	80001d8 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004938:	4b09      	ldr	r3, [pc, #36]	@ (8004960 <HAL_RCC_GetSysClockFreq+0x5c>)
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004940:	3301      	adds	r3, #1
 8004942:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco / pllp;
 8004944:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8004948:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800494a:	4807      	ldr	r0, [pc, #28]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x64>)
}
 800494c:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800494e:	4806      	ldr	r0, [pc, #24]	@ (8004968 <HAL_RCC_GetSysClockFreq+0x64>)
 8004950:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004954:	2300      	movs	r3, #0
 8004956:	fba1 0100 	umull	r0, r1, r1, r0
 800495a:	f7fb fc3d 	bl	80001d8 <__aeabi_uldivmod>
 800495e:	e7eb      	b.n	8004938 <HAL_RCC_GetSysClockFreq+0x34>
 8004960:	40023800 	.word	0x40023800
 8004964:	00f42400 	.word	0x00f42400
 8004968:	007a1200 	.word	0x007a1200

0800496c <HAL_RCC_ClockConfig>:
  if (RCC_ClkInitStruct == NULL)
 800496c:	2800      	cmp	r0, #0
 800496e:	f000 8087 	beq.w	8004a80 <HAL_RCC_ClockConfig+0x114>
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004972:	4a48      	ldr	r2, [pc, #288]	@ (8004a94 <HAL_RCC_ClockConfig+0x128>)
 8004974:	6813      	ldr	r3, [r2, #0]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	428b      	cmp	r3, r1
{
 800497c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004980:	460d      	mov	r5, r1
 8004982:	4604      	mov	r4, r0
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004984:	d209      	bcs.n	800499a <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004986:	b2cb      	uxtb	r3, r1
 8004988:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800498a:	6813      	ldr	r3, [r2, #0]
 800498c:	f003 0307 	and.w	r3, r3, #7
 8004990:	428b      	cmp	r3, r1
 8004992:	d002      	beq.n	800499a <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004994:	2001      	movs	r0, #1
}
 8004996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0798      	lsls	r0, r3, #30
 800499e:	d514      	bpl.n	80049ca <HAL_RCC_ClockConfig+0x5e>
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049a0:	0759      	lsls	r1, r3, #29
 80049a2:	d504      	bpl.n	80049ae <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049a4:	493c      	ldr	r1, [pc, #240]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 80049a6:	688a      	ldr	r2, [r1, #8]
 80049a8:	f442 52e0 	orr.w	r2, r2, #7168	@ 0x1c00
 80049ac:	608a      	str	r2, [r1, #8]
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049ae:	071a      	lsls	r2, r3, #28
 80049b0:	d504      	bpl.n	80049bc <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049b2:	4939      	ldr	r1, [pc, #228]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 80049b4:	688a      	ldr	r2, [r1, #8]
 80049b6:	f442 4260 	orr.w	r2, r2, #57344	@ 0xe000
 80049ba:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049bc:	4936      	ldr	r1, [pc, #216]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 80049be:	68a0      	ldr	r0, [r4, #8]
 80049c0:	688a      	ldr	r2, [r1, #8]
 80049c2:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80049c6:	4302      	orrs	r2, r0
 80049c8:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049ca:	07df      	lsls	r7, r3, #31
 80049cc:	d521      	bpl.n	8004a12 <HAL_RCC_ClockConfig+0xa6>
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ce:	6862      	ldr	r2, [r4, #4]
 80049d0:	2a01      	cmp	r2, #1
 80049d2:	d057      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x118>
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049d4:	1e93      	subs	r3, r2, #2
 80049d6:	2b01      	cmp	r3, #1
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049d8:	4b2f      	ldr	r3, [pc, #188]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 80049da:	681b      	ldr	r3, [r3, #0]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049dc:	d94d      	bls.n	8004a7a <HAL_RCC_ClockConfig+0x10e>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80049de:	0799      	lsls	r1, r3, #30
 80049e0:	d5d8      	bpl.n	8004994 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80049e2:	4e2d      	ldr	r6, [pc, #180]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 80049e4:	68b3      	ldr	r3, [r6, #8]
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80049ee:	f7ff fb4b 	bl	8004088 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049f2:	f241 3888 	movw	r8, #5000	@ 0x1388
    tickstart = HAL_GetTick();
 80049f6:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80049f8:	e004      	b.n	8004a04 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80049fa:	f7ff fb45 	bl	8004088 <HAL_GetTick>
 80049fe:	1bc0      	subs	r0, r0, r7
 8004a00:	4540      	cmp	r0, r8
 8004a02:	d844      	bhi.n	8004a8e <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a04:	68b3      	ldr	r3, [r6, #8]
 8004a06:	6862      	ldr	r2, [r4, #4]
 8004a08:	f003 030c 	and.w	r3, r3, #12
 8004a0c:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004a10:	d1f3      	bne.n	80049fa <HAL_RCC_ClockConfig+0x8e>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004a12:	4a20      	ldr	r2, [pc, #128]	@ (8004a94 <HAL_RCC_ClockConfig+0x128>)
 8004a14:	6813      	ldr	r3, [r2, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	42ab      	cmp	r3, r5
 8004a1c:	d906      	bls.n	8004a2c <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a1e:	b2eb      	uxtb	r3, r5
 8004a20:	7013      	strb	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	6813      	ldr	r3, [r2, #0]
 8004a24:	f003 0307 	and.w	r3, r3, #7
 8004a28:	42ab      	cmp	r3, r5
 8004a2a:	d1b3      	bne.n	8004994 <HAL_RCC_ClockConfig+0x28>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a2c:	6823      	ldr	r3, [r4, #0]
 8004a2e:	075a      	lsls	r2, r3, #29
 8004a30:	d506      	bpl.n	8004a40 <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a32:	4919      	ldr	r1, [pc, #100]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 8004a34:	68e0      	ldr	r0, [r4, #12]
 8004a36:	688a      	ldr	r2, [r1, #8]
 8004a38:	f422 52e0 	bic.w	r2, r2, #7168	@ 0x1c00
 8004a3c:	4302      	orrs	r2, r0
 8004a3e:	608a      	str	r2, [r1, #8]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	071b      	lsls	r3, r3, #28
 8004a42:	d507      	bpl.n	8004a54 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004a44:	4a14      	ldr	r2, [pc, #80]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 8004a46:	6921      	ldr	r1, [r4, #16]
 8004a48:	6893      	ldr	r3, [r2, #8]
 8004a4a:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004a4e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004a52:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a54:	f7ff ff56 	bl	8004904 <HAL_RCC_GetSysClockFreq>
 8004a58:	4a0f      	ldr	r2, [pc, #60]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 8004a5a:	4c10      	ldr	r4, [pc, #64]	@ (8004a9c <HAL_RCC_ClockConfig+0x130>)
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	4910      	ldr	r1, [pc, #64]	@ (8004aa0 <HAL_RCC_ClockConfig+0x134>)
 8004a60:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004a64:	4603      	mov	r3, r0
 8004a66:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick(uwTickPrio);
 8004a68:	480e      	ldr	r0, [pc, #56]	@ (8004aa4 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a6a:	40d3      	lsrs	r3, r2
  HAL_InitTick(uwTickPrio);
 8004a6c:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a6e:	600b      	str	r3, [r1, #0]
  HAL_InitTick(uwTickPrio);
 8004a70:	f7ff fac0 	bl	8003ff4 <HAL_InitTick>
  return HAL_OK;
 8004a74:	2000      	movs	r0, #0
}
 8004a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	0198      	lsls	r0, r3, #6
 8004a7c:	d4b1      	bmi.n	80049e2 <HAL_RCC_ClockConfig+0x76>
 8004a7e:	e789      	b.n	8004994 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004a80:	2001      	movs	r0, #1
}
 8004a82:	4770      	bx	lr
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a84:	4b04      	ldr	r3, [pc, #16]	@ (8004a98 <HAL_RCC_ClockConfig+0x12c>)
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	039e      	lsls	r6, r3, #14
 8004a8a:	d4aa      	bmi.n	80049e2 <HAL_RCC_ClockConfig+0x76>
 8004a8c:	e782      	b.n	8004994 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004a8e:	2003      	movs	r0, #3
 8004a90:	e781      	b.n	8004996 <HAL_RCC_ClockConfig+0x2a>
 8004a92:	bf00      	nop
 8004a94:	40023c00 	.word	0x40023c00
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	0800548c 	.word	0x0800548c
 8004aa0:	2000000c 	.word	0x2000000c
 8004aa4:	20000014 	.word	0x20000014

08004aa8 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aa8:	4b04      	ldr	r3, [pc, #16]	@ (8004abc <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004aaa:	4905      	ldr	r1, [pc, #20]	@ (8004ac0 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	4a05      	ldr	r2, [pc, #20]	@ (8004ac4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004ab0:	6808      	ldr	r0, [r1, #0]
 8004ab2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004ab6:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ab8:	40d8      	lsrs	r0, r3
 8004aba:	4770      	bx	lr
 8004abc:	40023800 	.word	0x40023800
 8004ac0:	2000000c 	.word	0x2000000c
 8004ac4:	08005484 	.word	0x08005484

08004ac8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004ac8:	4b04      	ldr	r3, [pc, #16]	@ (8004adc <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004aca:	4905      	ldr	r1, [pc, #20]	@ (8004ae0 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004acc:	689b      	ldr	r3, [r3, #8]
 8004ace:	4a05      	ldr	r2, [pc, #20]	@ (8004ae4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004ad0:	6808      	ldr	r0, [r1, #0]
 8004ad2:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004ad6:	5cd3      	ldrb	r3, [r2, r3]
}
 8004ad8:	40d8      	lsrs	r0, r3
 8004ada:	4770      	bx	lr
 8004adc:	40023800 	.word	0x40023800
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	08005484 	.word	0x08005484

08004ae8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	f000 8087 	beq.w	8004bfc <HAL_UART_Init+0x114>
{
 8004aee:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004af0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8004af4:	4604      	mov	r4, r0
 8004af6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d079      	beq.n	8004bf2 <HAL_UART_Init+0x10a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004afe:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b00:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8004b02:	2224      	movs	r2, #36	@ 0x24
 8004b04:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
  __HAL_UART_DISABLE(huart);
 8004b08:	68da      	ldr	r2, [r3, #12]
 8004b0a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b0e:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b10:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b12:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b14:	f421 5140 	bic.w	r1, r1, #12288	@ 0x3000
 8004b18:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b1a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b1c:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b1e:	4302      	orrs	r2, r0
 8004b20:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8004b22:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b24:	4302      	orrs	r2, r0
 8004b26:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8004b28:	f421 4116 	bic.w	r1, r1, #38400	@ 0x9600
 8004b2c:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b30:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8004b32:	430a      	orrs	r2, r1
 8004b34:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b36:	695a      	ldr	r2, [r3, #20]
 8004b38:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b3a:	4931      	ldr	r1, [pc, #196]	@ (8004c00 <HAL_UART_Init+0x118>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b3c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004b40:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b42:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b44:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b46:	d036      	beq.n	8004bb6 <HAL_UART_Init+0xce>
 8004b48:	4a2e      	ldr	r2, [pc, #184]	@ (8004c04 <HAL_UART_Init+0x11c>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d033      	beq.n	8004bb6 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b4e:	f7ff ffab 	bl	8004aa8 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b52:	69e2      	ldr	r2, [r4, #28]
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b54:	2119      	movs	r1, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b56:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b5a:	e9d4 5300 	ldrd	r5, r3, [r4]
 8004b5e:	fba0 0101 	umull	r0, r1, r0, r1
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004b62:	d02b      	beq.n	8004bbc <HAL_UART_Init+0xd4>
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b64:	009a      	lsls	r2, r3, #2
 8004b66:	0f9b      	lsrs	r3, r3, #30
 8004b68:	f7fb fb36 	bl	80001d8 <__aeabi_uldivmod>
 8004b6c:	4a26      	ldr	r2, [pc, #152]	@ (8004c08 <HAL_UART_Init+0x120>)
 8004b6e:	fba2 1300 	umull	r1, r3, r2, r0
 8004b72:	095b      	lsrs	r3, r3, #5
 8004b74:	2164      	movs	r1, #100	@ 0x64
 8004b76:	fb01 0013 	mls	r0, r1, r3, r0
 8004b7a:	0100      	lsls	r0, r0, #4
 8004b7c:	3032      	adds	r0, #50	@ 0x32
 8004b7e:	fba2 2000 	umull	r2, r0, r2, r0
 8004b82:	011b      	lsls	r3, r3, #4
 8004b84:	eb03 1350 	add.w	r3, r3, r0, lsr #5
 8004b88:	60ab      	str	r3, [r5, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b8a:	692a      	ldr	r2, [r5, #16]
 8004b8c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b90:	612a      	str	r2, [r5, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b92:	696a      	ldr	r2, [r5, #20]
 8004b94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b98:	616a      	str	r2, [r5, #20]
  __HAL_UART_ENABLE(huart);
 8004b9a:	68ea      	ldr	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b9c:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8004b9e:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8004ba0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ba4:	60ea      	str	r2, [r5, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba6:	6463      	str	r3, [r4, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ba8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004bac:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
  return HAL_OK;
 8004bb0:	4618      	mov	r0, r3
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004bb2:	6363      	str	r3, [r4, #52]	@ 0x34
}
 8004bb4:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bb6:	f7ff ff87 	bl	8004ac8 <HAL_RCC_GetPCLK2Freq>
 8004bba:	e7ca      	b.n	8004b52 <HAL_UART_Init+0x6a>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bbc:	18da      	adds	r2, r3, r3
 8004bbe:	f04f 0300 	mov.w	r3, #0
 8004bc2:	415b      	adcs	r3, r3
 8004bc4:	f7fb fb08 	bl	80001d8 <__aeabi_uldivmod>
 8004bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8004c08 <HAL_UART_Init+0x120>)
 8004bca:	fba2 3100 	umull	r3, r1, r2, r0
 8004bce:	0949      	lsrs	r1, r1, #5
 8004bd0:	2364      	movs	r3, #100	@ 0x64
 8004bd2:	fb03 0311 	mls	r3, r3, r1, r0
 8004bd6:	00db      	lsls	r3, r3, #3
 8004bd8:	3332      	adds	r3, #50	@ 0x32
 8004bda:	fba2 2303 	umull	r2, r3, r2, r3
 8004bde:	f3c3 1242 	ubfx	r2, r3, #5, #3
 8004be2:	091b      	lsrs	r3, r3, #4
 8004be4:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 8004be8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004bec:	4413      	add	r3, r2
 8004bee:	60ab      	str	r3, [r5, #8]
 8004bf0:	e7cb      	b.n	8004b8a <HAL_UART_Init+0xa2>
    huart->Lock = HAL_UNLOCKED;
 8004bf2:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_UART_MspInit(huart);
 8004bf6:	f7ff f997 	bl	8003f28 <HAL_UART_MspInit>
 8004bfa:	e780      	b.n	8004afe <HAL_UART_Init+0x16>
    return HAL_ERROR;
 8004bfc:	2001      	movs	r0, #1
}
 8004bfe:	4770      	bx	lr
 8004c00:	40011000 	.word	0x40011000
 8004c04:	40011400 	.word	0x40011400
 8004c08:	51eb851f 	.word	0x51eb851f

08004c0c <HAL_UART_Transmit>:
{
 8004c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004c10:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8004c12:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
 8004c16:	2820      	cmp	r0, #32
 8004c18:	d155      	bne.n	8004cc6 <HAL_UART_Transmit+0xba>
    if ((pData == NULL) || (Size == 0U))
 8004c1a:	460d      	mov	r5, r1
 8004c1c:	b109      	cbz	r1, 8004c22 <HAL_UART_Transmit+0x16>
 8004c1e:	4616      	mov	r6, r2
 8004c20:	b912      	cbnz	r2, 8004c28 <HAL_UART_Transmit+0x1c>
      return  HAL_ERROR;
 8004c22:	2001      	movs	r0, #1
}
 8004c24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004c28:	461f      	mov	r7, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c2a:	f04f 0800 	mov.w	r8, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c2e:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c30:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004c34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    tickstart = HAL_GetTick();
 8004c38:	f7ff fa26 	bl	8004088 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c3c:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize = Size;
 8004c3e:	84a6      	strh	r6, [r4, #36]	@ 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004c44:	4681      	mov	r9, r0
    huart->TxXferCount = Size;
 8004c46:	84e6      	strh	r6, [r4, #38]	@ 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c48:	d040      	beq.n	8004ccc <HAL_UART_Transmit+0xc0>
    while (huart->TxXferCount > 0U)
 8004c4a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c4c:	6822      	ldr	r2, [r4, #0]
    while (huart->TxXferCount > 0U)
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d047      	beq.n	8004ce4 <HAL_UART_Transmit+0xd8>
 8004c54:	1c7b      	adds	r3, r7, #1
 8004c56:	d124      	bne.n	8004ca2 <HAL_UART_Transmit+0x96>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c58:	6813      	ldr	r3, [r2, #0]
 8004c5a:	061f      	lsls	r7, r3, #24
 8004c5c:	d5fc      	bpl.n	8004c58 <HAL_UART_Transmit+0x4c>
      if (pdata8bits == NULL)
 8004c5e:	2d00      	cmp	r5, #0
 8004c60:	d02c      	beq.n	8004cbc <HAL_UART_Transmit+0xb0>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c62:	f815 3b01 	ldrb.w	r3, [r5], #1
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c66:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004c68:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c70:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004c72:	b29b      	uxth	r3, r3
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1ef      	bne.n	8004c58 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c78:	6813      	ldr	r3, [r2, #0]
 8004c7a:	0659      	lsls	r1, r3, #25
 8004c7c:	d5fc      	bpl.n	8004c78 <HAL_UART_Transmit+0x6c>
    huart->gState = HAL_UART_STATE_READY;
 8004c7e:	2320      	movs	r3, #32
 8004c80:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    return HAL_OK;
 8004c84:	2000      	movs	r0, #0
}
 8004c86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8004c8a:	2d00      	cmp	r5, #0
 8004c8c:	d03d      	beq.n	8004d0a <HAL_UART_Transmit+0xfe>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c8e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004c92:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8004c94:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004c96:	3b01      	subs	r3, #1
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	84e3      	strh	r3, [r4, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c9c:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	b313      	cbz	r3, 8004ce8 <HAL_UART_Transmit+0xdc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ca2:	6813      	ldr	r3, [r2, #0]
 8004ca4:	061e      	lsls	r6, r3, #24
 8004ca6:	d4f0      	bmi.n	8004c8a <HAL_UART_Transmit+0x7e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca8:	f7ff f9ee 	bl	8004088 <HAL_GetTick>
 8004cac:	eba0 0309 	sub.w	r3, r0, r9
 8004cb0:	429f      	cmp	r7, r3
 8004cb2:	d311      	bcc.n	8004cd8 <HAL_UART_Transmit+0xcc>
 8004cb4:	b187      	cbz	r7, 8004cd8 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cb6:	6822      	ldr	r2, [r4, #0]
 8004cb8:	68d3      	ldr	r3, [r2, #12]
 8004cba:	e7f2      	b.n	8004ca2 <HAL_UART_Transmit+0x96>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004cbc:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004cc4:	e7cf      	b.n	8004c66 <HAL_UART_Transmit+0x5a>
    return HAL_BUSY;
 8004cc6:	2002      	movs	r0, #2
}
 8004cc8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ccc:	6923      	ldr	r3, [r4, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d1bb      	bne.n	8004c4a <HAL_UART_Transmit+0x3e>
      pdata16bits = (const uint16_t *) pData;
 8004cd2:	46a8      	mov	r8, r5
      pdata8bits  = NULL;
 8004cd4:	461d      	mov	r5, r3
 8004cd6:	e7b8      	b.n	8004c4a <HAL_UART_Transmit+0x3e>
        huart->gState = HAL_UART_STATE_READY;
 8004cd8:	2320      	movs	r3, #32
 8004cda:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        return HAL_TIMEOUT;
 8004cde:	2003      	movs	r0, #3
}
 8004ce0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ce4:	1c78      	adds	r0, r7, #1
 8004ce6:	d0c7      	beq.n	8004c78 <HAL_UART_Transmit+0x6c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce8:	6813      	ldr	r3, [r2, #0]
 8004cea:	065b      	lsls	r3, r3, #25
 8004cec:	d4c7      	bmi.n	8004c7e <HAL_UART_Transmit+0x72>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cee:	f7ff f9cb 	bl	8004088 <HAL_GetTick>
 8004cf2:	eba0 0309 	sub.w	r3, r0, r9
 8004cf6:	429f      	cmp	r7, r3
 8004cf8:	d3ee      	bcc.n	8004cd8 <HAL_UART_Transmit+0xcc>
 8004cfa:	2f00      	cmp	r7, #0
 8004cfc:	d0ec      	beq.n	8004cd8 <HAL_UART_Transmit+0xcc>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004cfe:	6822      	ldr	r2, [r4, #0]
 8004d00:	68d3      	ldr	r3, [r2, #12]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d02:	6813      	ldr	r3, [r2, #0]
 8004d04:	065b      	lsls	r3, r3, #25
 8004d06:	d5f2      	bpl.n	8004cee <HAL_UART_Transmit+0xe2>
 8004d08:	e7b9      	b.n	8004c7e <HAL_UART_Transmit+0x72>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d0a:	f838 3b02 	ldrh.w	r3, [r8], #2
 8004d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d12:	e7be      	b.n	8004c92 <HAL_UART_Transmit+0x86>

08004d14 <HAL_UART_Receive>:
{
 8004d14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d18:	4604      	mov	r4, r0
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d1a:	f890 0042 	ldrb.w	r0, [r0, #66]	@ 0x42
 8004d1e:	2820      	cmp	r0, #32
{
 8004d20:	b083      	sub	sp, #12
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d22:	d14a      	bne.n	8004dba <HAL_UART_Receive+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8004d24:	460d      	mov	r5, r1
 8004d26:	b109      	cbz	r1, 8004d2c <HAL_UART_Receive+0x18>
 8004d28:	4616      	mov	r6, r2
 8004d2a:	b91a      	cbnz	r2, 8004d34 <HAL_UART_Receive+0x20>
      return  HAL_ERROR;
 8004d2c:	2001      	movs	r0, #1
}
 8004d2e:	b003      	add	sp, #12
 8004d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d34:	f04f 0800 	mov.w	r8, #0
 8004d38:	461f      	mov	r7, r3
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d3a:	2322      	movs	r3, #34	@ 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d3c:	f8c4 8044 	str.w	r8, [r4, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d44:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
    tickstart = HAL_GetTick();
 8004d48:	f7ff f99e 	bl	8004088 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d4c:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize = Size;
 8004d4e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d50:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    tickstart = HAL_GetTick();
 8004d54:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8004d56:	85e6      	strh	r6, [r4, #46]	@ 0x2e
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d58:	f000 8099 	beq.w	8004e8e <HAL_UART_Receive+0x17a>
      pdata16bits = NULL;
 8004d5c:	4646      	mov	r6, r8
    while (huart->RxXferCount > 0U)
 8004d5e:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004d60:	b29b      	uxth	r3, r3
 8004d62:	b1cb      	cbz	r3, 8004d98 <HAL_UART_Receive+0x84>
 8004d64:	1c7b      	adds	r3, r7, #1
 8004d66:	d141      	bne.n	8004dec <HAL_UART_Receive+0xd8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d68:	6822      	ldr	r2, [r4, #0]
 8004d6a:	6813      	ldr	r3, [r2, #0]
 8004d6c:	069f      	lsls	r7, r3, #26
 8004d6e:	d5fc      	bpl.n	8004d6a <HAL_UART_Receive+0x56>
      if (pdata8bits == NULL)
 8004d70:	b1ed      	cbz	r5, 8004dae <HAL_UART_Receive+0x9a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004d72:	68a3      	ldr	r3, [r4, #8]
 8004d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d78:	d002      	beq.n	8004d80 <HAL_UART_Receive+0x6c>
 8004d7a:	b9a3      	cbnz	r3, 8004da6 <HAL_UART_Receive+0x92>
 8004d7c:	6923      	ldr	r3, [r4, #16]
 8004d7e:	b993      	cbnz	r3, 8004da6 <HAL_UART_Receive+0x92>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004d80:	6853      	ldr	r3, [r2, #4]
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8004d88:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004d8a:	3b01      	subs	r3, #1
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004d90:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004d92:	b29b      	uxth	r3, r3
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d1e7      	bne.n	8004d68 <HAL_UART_Receive+0x54>
    huart->RxState = HAL_UART_STATE_READY;
 8004d98:	2320      	movs	r3, #32
    return HAL_OK;
 8004d9a:	2000      	movs	r0, #0
    huart->RxState = HAL_UART_STATE_READY;
 8004d9c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8004da0:	b003      	add	sp, #12
 8004da2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004da6:	6853      	ldr	r3, [r2, #4]
 8004da8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dac:	e7ea      	b.n	8004d84 <HAL_UART_Receive+0x70>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004dae:	6853      	ldr	r3, [r2, #4]
 8004db0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004db4:	f826 3b02 	strh.w	r3, [r6], #2
        pdata16bits++;
 8004db8:	e7e6      	b.n	8004d88 <HAL_UART_Receive+0x74>
    return HAL_BUSY;
 8004dba:	2002      	movs	r0, #2
}
 8004dbc:	b003      	add	sp, #12
 8004dbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      if (pdata8bits == NULL)
 8004dc2:	2d00      	cmp	r5, #0
 8004dc4:	d070      	beq.n	8004ea8 <HAL_UART_Receive+0x194>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004dc6:	68a2      	ldr	r2, [r4, #8]
 8004dc8:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 8004dcc:	d069      	beq.n	8004ea2 <HAL_UART_Receive+0x18e>
 8004dce:	2a00      	cmp	r2, #0
 8004dd0:	d064      	beq.n	8004e9c <HAL_UART_Receive+0x188>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd8:	f805 3b01 	strb.w	r3, [r5], #1
      huart->RxXferCount--;
 8004ddc:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004dde:	3b01      	subs	r3, #1
 8004de0:	b29b      	uxth	r3, r3
 8004de2:	85e3      	strh	r3, [r4, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8004de4:	8de3      	ldrh	r3, [r4, #46]	@ 0x2e
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0d5      	beq.n	8004d98 <HAL_UART_Receive+0x84>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dec:	6823      	ldr	r3, [r4, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	f012 0820 	ands.w	r8, r2, #32
 8004df4:	d1e5      	bne.n	8004dc2 <HAL_UART_Receive+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004df6:	f7ff f947 	bl	8004088 <HAL_GetTick>
 8004dfa:	eba0 0309 	sub.w	r3, r0, r9
 8004dfe:	429f      	cmp	r7, r3
 8004e00:	d33e      	bcc.n	8004e80 <HAL_UART_Receive+0x16c>
 8004e02:	2f00      	cmp	r7, #0
 8004e04:	d03c      	beq.n	8004e80 <HAL_UART_Receive+0x16c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004e06:	6823      	ldr	r3, [r4, #0]
 8004e08:	68d9      	ldr	r1, [r3, #12]
 8004e0a:	0748      	lsls	r0, r1, #29
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	d5ee      	bpl.n	8004dee <HAL_UART_Receive+0xda>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004e10:	6819      	ldr	r1, [r3, #0]
 8004e12:	0709      	lsls	r1, r1, #28
 8004e14:	d5eb      	bpl.n	8004dee <HAL_UART_Receive+0xda>
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e16:	f8cd 8004 	str.w	r8, [sp, #4]
 8004e1a:	6819      	ldr	r1, [r3, #0]
 8004e1c:	9101      	str	r1, [sp, #4]
 8004e1e:	6859      	ldr	r1, [r3, #4]
 8004e20:	9101      	str	r1, [sp, #4]
 8004e22:	9901      	ldr	r1, [sp, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e24:	f103 010c 	add.w	r1, r3, #12
 8004e28:	e851 1f00 	ldrex	r1, [r1]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e2c:	f421 7190 	bic.w	r1, r1, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e30:	330c      	adds	r3, #12
 8004e32:	e843 1000 	strex	r0, r1, [r3]
 8004e36:	b158      	cbz	r0, 8004e50 <HAL_UART_Receive+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e38:	f102 030c 	add.w	r3, r2, #12
 8004e3c:	e853 3f00 	ldrex	r3, [r3]
 8004e40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e44:	f102 000c 	add.w	r0, r2, #12
 8004e48:	e840 3100 	strex	r1, r3, [r0]
 8004e4c:	2900      	cmp	r1, #0
 8004e4e:	d1f3      	bne.n	8004e38 <HAL_UART_Receive+0x124>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	f102 0314 	add.w	r3, r2, #20
 8004e54:	e853 3f00 	ldrex	r3, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e58:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5c:	f102 0014 	add.w	r0, r2, #20
 8004e60:	e840 3100 	strex	r1, r3, [r0]
 8004e64:	2900      	cmp	r1, #0
 8004e66:	d1f3      	bne.n	8004e50 <HAL_UART_Receive+0x13c>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e68:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	d022      	beq.n	8004eb4 <HAL_UART_Receive+0x1a0>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8004e70:	2120      	movs	r1, #32
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e72:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8004e74:	f884 1042 	strb.w	r1, [r4, #66]	@ 0x42
          __HAL_UNLOCK(huart);
 8004e78:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e7c:	6323      	str	r3, [r4, #48]	@ 0x30
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e7e:	6462      	str	r2, [r4, #68]	@ 0x44
        huart->RxState = HAL_UART_STATE_READY;
 8004e80:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 8004e82:	2003      	movs	r0, #3
        huart->RxState = HAL_UART_STATE_READY;
 8004e84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
}
 8004e88:	b003      	add	sp, #12
 8004e8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e8e:	6923      	ldr	r3, [r4, #16]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f47f af63 	bne.w	8004d5c <HAL_UART_Receive+0x48>
      pdata16bits = (uint16_t *) pData;
 8004e96:	462e      	mov	r6, r5
      pdata8bits  = NULL;
 8004e98:	461d      	mov	r5, r3
 8004e9a:	e760      	b.n	8004d5e <HAL_UART_Receive+0x4a>
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e9c:	6922      	ldr	r2, [r4, #16]
 8004e9e:	2a00      	cmp	r2, #0
 8004ea0:	d197      	bne.n	8004dd2 <HAL_UART_Receive+0xbe>
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e797      	b.n	8004dd8 <HAL_UART_Receive+0xc4>
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eae:	f826 3b02 	strh.w	r3, [r6], #2
        pdata16bits++;
 8004eb2:	e793      	b.n	8004ddc <HAL_UART_Receive+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	f102 030c 	add.w	r3, r2, #12
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec0:	f102 000c 	add.w	r0, r2, #12
 8004ec4:	e840 3100 	strex	r1, r3, [r0]
 8004ec8:	2900      	cmp	r1, #0
 8004eca:	d1f3      	bne.n	8004eb4 <HAL_UART_Receive+0x1a0>
 8004ecc:	e7cf      	b.n	8004e6e <HAL_UART_Receive+0x15a>
 8004ece:	bf00      	nop

08004ed0 <memset>:
 8004ed0:	4402      	add	r2, r0
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d100      	bne.n	8004eda <memset+0xa>
 8004ed8:	4770      	bx	lr
 8004eda:	f803 1b01 	strb.w	r1, [r3], #1
 8004ede:	e7f9      	b.n	8004ed4 <memset+0x4>

08004ee0 <__libc_init_array>:
 8004ee0:	b570      	push	{r4, r5, r6, lr}
 8004ee2:	4d0d      	ldr	r5, [pc, #52]	@ (8004f18 <__libc_init_array+0x38>)
 8004ee4:	4c0d      	ldr	r4, [pc, #52]	@ (8004f1c <__libc_init_array+0x3c>)
 8004ee6:	1b64      	subs	r4, r4, r5
 8004ee8:	10a4      	asrs	r4, r4, #2
 8004eea:	2600      	movs	r6, #0
 8004eec:	42a6      	cmp	r6, r4
 8004eee:	d109      	bne.n	8004f04 <__libc_init_array+0x24>
 8004ef0:	4d0b      	ldr	r5, [pc, #44]	@ (8004f20 <__libc_init_array+0x40>)
 8004ef2:	4c0c      	ldr	r4, [pc, #48]	@ (8004f24 <__libc_init_array+0x44>)
 8004ef4:	f000 f826 	bl	8004f44 <_init>
 8004ef8:	1b64      	subs	r4, r4, r5
 8004efa:	10a4      	asrs	r4, r4, #2
 8004efc:	2600      	movs	r6, #0
 8004efe:	42a6      	cmp	r6, r4
 8004f00:	d105      	bne.n	8004f0e <__libc_init_array+0x2e>
 8004f02:	bd70      	pop	{r4, r5, r6, pc}
 8004f04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f08:	4798      	blx	r3
 8004f0a:	3601      	adds	r6, #1
 8004f0c:	e7ee      	b.n	8004eec <__libc_init_array+0xc>
 8004f0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f12:	4798      	blx	r3
 8004f14:	3601      	adds	r6, #1
 8004f16:	e7f2      	b.n	8004efe <__libc_init_array+0x1e>
 8004f18:	080054a4 	.word	0x080054a4
 8004f1c:	080054a4 	.word	0x080054a4
 8004f20:	080054a4 	.word	0x080054a4
 8004f24:	080054a8 	.word	0x080054a8

08004f28 <memcpy>:
 8004f28:	440a      	add	r2, r1
 8004f2a:	4291      	cmp	r1, r2
 8004f2c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004f30:	d100      	bne.n	8004f34 <memcpy+0xc>
 8004f32:	4770      	bx	lr
 8004f34:	b510      	push	{r4, lr}
 8004f36:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f3e:	4291      	cmp	r1, r2
 8004f40:	d1f9      	bne.n	8004f36 <memcpy+0xe>
 8004f42:	bd10      	pop	{r4, pc}

08004f44 <_init>:
 8004f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f46:	bf00      	nop
 8004f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f4a:	bc08      	pop	{r3}
 8004f4c:	469e      	mov	lr, r3
 8004f4e:	4770      	bx	lr

08004f50 <_fini>:
 8004f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f52:	bf00      	nop
 8004f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f56:	bc08      	pop	{r3}
 8004f58:	469e      	mov	lr, r3
 8004f5a:	4770      	bx	lr
